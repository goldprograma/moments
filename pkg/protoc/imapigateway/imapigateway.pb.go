// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imapigateway.proto

package imapigateway

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChatType 聊天类型
type ChatType int32

const (
	ChatType_ChatTypeZero ChatType = 0
	ChatType_PeerUser     ChatType = 1
	ChatType_PeerChat     ChatType = 2
	ChatType_ChannelChat  ChatType = 3
)

var ChatType_name = map[int32]string{
	0: "ChatTypeZero",
	1: "PeerUser",
	2: "PeerChat",
	3: "ChannelChat",
}

var ChatType_value = map[string]int32{
	"ChatTypeZero": 0,
	"PeerUser":     1,
	"PeerChat":     2,
	"ChannelChat":  3,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}

func (ChatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{0}
}

// 消息来源ID定义
type MsgFromID int32

const (
	MsgFromID_MFI_UNKNOWN       MsgFromID = 0
	MsgFromID_MFI_IM            MsgFromID = 1
	MsgFromID_MFI_Integral_Mall MsgFromID = 2
	MsgFromID_MFI_GameApi       MsgFromID = 3
)

var MsgFromID_name = map[int32]string{
	0: "MFI_UNKNOWN",
	1: "MFI_IM",
	2: "MFI_Integral_Mall",
	3: "MFI_GameApi",
}

var MsgFromID_value = map[string]int32{
	"MFI_UNKNOWN":       0,
	"MFI_IM":            1,
	"MFI_Integral_Mall": 2,
	"MFI_GameApi":       3,
}

func (x MsgFromID) String() string {
	return proto.EnumName(MsgFromID_name, int32(x))
}

func (MsgFromID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{1}
}

//###################################  avthumb.pb.go  #############################
// StatusCode 状态码
type StatusCode int32

const (
	StatusCode_StatusCodeOK   StatusCode = 0
	StatusCode_StatusCodeFail StatusCode = 1
)

var StatusCode_name = map[int32]string{
	0: "StatusCodeOK",
	1: "StatusCodeFail",
}

var StatusCode_value = map[string]int32{
	"StatusCodeOK":   0,
	"StatusCodeFail": 1,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{2}
}

type ErrorCode int32

const (
	ErrorCode_ErrorCodeOk           ErrorCode = 0
	ErrorCode_ErrorCodeUserNotExist ErrorCode = 10001
)

var ErrorCode_name = map[int32]string{
	0:     "ErrorCodeOk",
	10001: "ErrorCodeUserNotExist",
}

var ErrorCode_value = map[string]int32{
	"ErrorCodeOk":           0,
	"ErrorCodeUserNotExist": 10001,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{3}
}

type CheckIsMuteContactResult_ResultCode int32

const (
	CheckIsMuteContactResult_Success       CheckIsMuteContactResult_ResultCode = 0
	CheckIsMuteContactResult_InternalError CheckIsMuteContactResult_ResultCode = 1
)

var CheckIsMuteContactResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}

var CheckIsMuteContactResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CheckIsMuteContactResult_ResultCode) String() string {
	return proto.EnumName(CheckIsMuteContactResult_ResultCode_name, int32(x))
}

func (CheckIsMuteContactResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{11, 0}
}

type AuthSignUpResult_ResultCode int32

const (
	AuthSignUpResult_Success             AuthSignUpResult_ResultCode = 0
	AuthSignUpResult_InternalError       AuthSignUpResult_ResultCode = 1
	AuthSignUpResult_PhoneNumberInvalid  AuthSignUpResult_ResultCode = 2
	AuthSignUpResult_PhoneNumberOccupied AuthSignUpResult_ResultCode = 3
	AuthSignUpResult_CaptchaExpired      AuthSignUpResult_ResultCode = 4
	AuthSignUpResult_CaptchaInvalid      AuthSignUpResult_ResultCode = 5
	AuthSignUpResult_FloodWait           AuthSignUpResult_ResultCode = 6
	AuthSignUpResult_SignUpRobotBlocked  AuthSignUpResult_ResultCode = 7
)

var AuthSignUpResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberInvalid",
	3: "PhoneNumberOccupied",
	4: "CaptchaExpired",
	5: "CaptchaInvalid",
	6: "FloodWait",
	7: "SignUpRobotBlocked",
}

var AuthSignUpResult_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"PhoneNumberInvalid":  2,
	"PhoneNumberOccupied": 3,
	"CaptchaExpired":      4,
	"CaptchaInvalid":      5,
	"FloodWait":           6,
	"SignUpRobotBlocked":  7,
}

func (x AuthSignUpResult_ResultCode) String() string {
	return proto.EnumName(AuthSignUpResult_ResultCode_name, int32(x))
}

func (AuthSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{174, 0}
}

// 查询会员等级请求
type ReqMemberLevelCache struct {
	ImUserId             int32    `protobuf:"varint,1,opt,name=imUserId,proto3" json:"imUserId,omitempty"`
	ImKeyId              uint64   `protobuf:"varint,2,opt,name=imKeyId,proto3" json:"imKeyId,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqMemberLevelCache) Reset()         { *m = ReqMemberLevelCache{} }
func (m *ReqMemberLevelCache) String() string { return proto.CompactTextString(m) }
func (*ReqMemberLevelCache) ProtoMessage()    {}
func (*ReqMemberLevelCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{0}
}
func (m *ReqMemberLevelCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqMemberLevelCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqMemberLevelCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqMemberLevelCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqMemberLevelCache.Merge(m, src)
}
func (m *ReqMemberLevelCache) XXX_Size() int {
	return m.Size()
}
func (m *ReqMemberLevelCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqMemberLevelCache.DiscardUnknown(m)
}

var xxx_messageInfo_ReqMemberLevelCache proto.InternalMessageInfo

func (m *ReqMemberLevelCache) GetImUserId() int32 {
	if m != nil {
		return m.ImUserId
	}
	return 0
}

func (m *ReqMemberLevelCache) GetImKeyId() uint64 {
	if m != nil {
		return m.ImKeyId
	}
	return 0
}

func (m *ReqMemberLevelCache) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// 查询会员等级响应
type ReplyMemberLevelCache struct {
	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	//    会等等级
	VipLevelCode int32 `protobuf:"varint,3,opt,name=vipLevelCode,proto3" json:"vipLevelCode,omitempty"`
	//    vip等级名称
	VipLevelName         string   `protobuf:"bytes,4,opt,name=vipLevelName,proto3" json:"vipLevelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyMemberLevelCache) Reset()         { *m = ReplyMemberLevelCache{} }
func (m *ReplyMemberLevelCache) String() string { return proto.CompactTextString(m) }
func (*ReplyMemberLevelCache) ProtoMessage()    {}
func (*ReplyMemberLevelCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{1}
}
func (m *ReplyMemberLevelCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyMemberLevelCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyMemberLevelCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyMemberLevelCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyMemberLevelCache.Merge(m, src)
}
func (m *ReplyMemberLevelCache) XXX_Size() int {
	return m.Size()
}
func (m *ReplyMemberLevelCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyMemberLevelCache.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyMemberLevelCache proto.InternalMessageInfo

func (m *ReplyMemberLevelCache) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyMemberLevelCache) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ReplyMemberLevelCache) GetVipLevelCode() int32 {
	if m != nil {
		return m.VipLevelCode
	}
	return 0
}

func (m *ReplyMemberLevelCache) GetVipLevelName() string {
	if m != nil {
		return m.VipLevelName
	}
	return ""
}

//检测是否是对方是否是自己的联系人
type CheckIsSelfContactReq struct {
	SelfId               int32    `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckIsSelfContactReq) Reset()         { *m = CheckIsSelfContactReq{} }
func (m *CheckIsSelfContactReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsSelfContactReq) ProtoMessage()    {}
func (*CheckIsSelfContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{2}
}
func (m *CheckIsSelfContactReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIsSelfContactReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIsSelfContactReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIsSelfContactReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIsSelfContactReq.Merge(m, src)
}
func (m *CheckIsSelfContactReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckIsSelfContactReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIsSelfContactReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIsSelfContactReq proto.InternalMessageInfo

func (m *CheckIsSelfContactReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckIsSelfContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckIsSelfContactReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//检测是否是自己是否是对方的联系人的返回结果
type CheckIsSelfContactResult struct {
	IsSelfContact        bool      `protobuf:"varint,1,opt,name=IsSelfContact,proto3" json:"IsSelfContact,omitempty"`
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CheckIsSelfContactResult) Reset()         { *m = CheckIsSelfContactResult{} }
func (m *CheckIsSelfContactResult) String() string { return proto.CompactTextString(m) }
func (*CheckIsSelfContactResult) ProtoMessage()    {}
func (*CheckIsSelfContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{3}
}
func (m *CheckIsSelfContactResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIsSelfContactResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIsSelfContactResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIsSelfContactResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIsSelfContactResult.Merge(m, src)
}
func (m *CheckIsSelfContactResult) XXX_Size() int {
	return m.Size()
}
func (m *CheckIsSelfContactResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIsSelfContactResult.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIsSelfContactResult proto.InternalMessageInfo

func (m *CheckIsSelfContactResult) GetIsSelfContact() bool {
	if m != nil {
		return m.IsSelfContact
	}
	return false
}

func (m *CheckIsSelfContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type SearchUserByNicknameReq struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserIds              []int32  `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Offset               int32    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	SelfId               int32    `protobuf:"varint,5,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchUserByNicknameReq) Reset()         { *m = SearchUserByNicknameReq{} }
func (m *SearchUserByNicknameReq) String() string { return proto.CompactTextString(m) }
func (*SearchUserByNicknameReq) ProtoMessage()    {}
func (*SearchUserByNicknameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{4}
}
func (m *SearchUserByNicknameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchUserByNicknameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchUserByNicknameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchUserByNicknameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchUserByNicknameReq.Merge(m, src)
}
func (m *SearchUserByNicknameReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchUserByNicknameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchUserByNicknameReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchUserByNicknameReq proto.InternalMessageInfo

func (m *SearchUserByNicknameReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SearchUserByNicknameReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SearchUserByNicknameReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchUserByNicknameReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchUserByNicknameReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

type SearchUserByNicknameResult struct {
	UserInfos            []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	Errorcode            ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SearchUserByNicknameResult) Reset()         { *m = SearchUserByNicknameResult{} }
func (m *SearchUserByNicknameResult) String() string { return proto.CompactTextString(m) }
func (*SearchUserByNicknameResult) ProtoMessage()    {}
func (*SearchUserByNicknameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{5}
}
func (m *SearchUserByNicknameResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchUserByNicknameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchUserByNicknameResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchUserByNicknameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchUserByNicknameResult.Merge(m, src)
}
func (m *SearchUserByNicknameResult) XXX_Size() int {
	return m.Size()
}
func (m *SearchUserByNicknameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchUserByNicknameResult.DiscardUnknown(m)
}

var xxx_messageInfo_SearchUserByNicknameResult proto.InternalMessageInfo

func (m *SearchUserByNicknameResult) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *SearchUserByNicknameResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type MomentNotifyData struct {
	SourceCode           int32     `protobuf:"varint,1,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	BusinessCode         int32     `protobuf:"varint,2,opt,name=business_code,json=businessCode,proto3" json:"business_code,omitempty"`
	ToId                 int32     `protobuf:"varint,3,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	WithId               int32     `protobuf:"varint,4,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	ForumId              int64     `protobuf:"varint,5,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
	ForumType            int64     `protobuf:"varint,6,opt,name=forum_type,json=forumType,proto3" json:"forum_type,omitempty"`
	ForumImage           string    `protobuf:"bytes,7,opt,name=forum_image,json=forumImage,proto3" json:"forum_image,omitempty"`
	ForumText            string    `protobuf:"bytes,8,opt,name=forum_text,json=forumText,proto3" json:"forum_text,omitempty"`
	MsgId                int64     `protobuf:"varint,9,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	MsgContent           string    `protobuf:"bytes,10,opt,name=msg_content,json=msgContent,proto3" json:"msg_content,omitempty"`
	IsFollowed           int64     `protobuf:"varint,11,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	MsgTime              int64     `protobuf:"varint,12,opt,name=msg_time,json=msgTime,proto3" json:"msg_time,omitempty"`
	Entites              []*Entity `protobuf:"bytes,13,rep,name=entites,proto3" json:"entites,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MomentNotifyData) Reset()         { *m = MomentNotifyData{} }
func (m *MomentNotifyData) String() string { return proto.CompactTextString(m) }
func (*MomentNotifyData) ProtoMessage()    {}
func (*MomentNotifyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{6}
}
func (m *MomentNotifyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MomentNotifyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MomentNotifyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MomentNotifyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MomentNotifyData.Merge(m, src)
}
func (m *MomentNotifyData) XXX_Size() int {
	return m.Size()
}
func (m *MomentNotifyData) XXX_DiscardUnknown() {
	xxx_messageInfo_MomentNotifyData.DiscardUnknown(m)
}

var xxx_messageInfo_MomentNotifyData proto.InternalMessageInfo

func (m *MomentNotifyData) GetSourceCode() int32 {
	if m != nil {
		return m.SourceCode
	}
	return 0
}

func (m *MomentNotifyData) GetBusinessCode() int32 {
	if m != nil {
		return m.BusinessCode
	}
	return 0
}

func (m *MomentNotifyData) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *MomentNotifyData) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *MomentNotifyData) GetForumId() int64 {
	if m != nil {
		return m.ForumId
	}
	return 0
}

func (m *MomentNotifyData) GetForumType() int64 {
	if m != nil {
		return m.ForumType
	}
	return 0
}

func (m *MomentNotifyData) GetForumImage() string {
	if m != nil {
		return m.ForumImage
	}
	return ""
}

func (m *MomentNotifyData) GetForumText() string {
	if m != nil {
		return m.ForumText
	}
	return ""
}

func (m *MomentNotifyData) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *MomentNotifyData) GetMsgContent() string {
	if m != nil {
		return m.MsgContent
	}
	return ""
}

func (m *MomentNotifyData) GetIsFollowed() int64 {
	if m != nil {
		return m.IsFollowed
	}
	return 0
}

func (m *MomentNotifyData) GetMsgTime() int64 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

func (m *MomentNotifyData) GetEntites() []*Entity {
	if m != nil {
		return m.Entites
	}
	return nil
}

type Entity struct {
	Type                 int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length               int32    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	UserId               uint32   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Url                  string   `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{7}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return m.Size()
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Entity) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Entity) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Entity) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Entity) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type MomentNotifyReq struct {
	MomentNotifyData     []*MomentNotifyData `protobuf:"bytes,1,rep,name=moment_notify_data,json=momentNotifyData,proto3" json:"moment_notify_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MomentNotifyReq) Reset()         { *m = MomentNotifyReq{} }
func (m *MomentNotifyReq) String() string { return proto.CompactTextString(m) }
func (*MomentNotifyReq) ProtoMessage()    {}
func (*MomentNotifyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{8}
}
func (m *MomentNotifyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MomentNotifyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MomentNotifyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MomentNotifyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MomentNotifyReq.Merge(m, src)
}
func (m *MomentNotifyReq) XXX_Size() int {
	return m.Size()
}
func (m *MomentNotifyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MomentNotifyReq.DiscardUnknown(m)
}

var xxx_messageInfo_MomentNotifyReq proto.InternalMessageInfo

func (m *MomentNotifyReq) GetMomentNotifyData() []*MomentNotifyData {
	if m != nil {
		return m.MomentNotifyData
	}
	return nil
}

type MomentNotifyResult struct {
	ErrorCode            uint32   `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MomentNotifyResult) Reset()         { *m = MomentNotifyResult{} }
func (m *MomentNotifyResult) String() string { return proto.CompactTextString(m) }
func (*MomentNotifyResult) ProtoMessage()    {}
func (*MomentNotifyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{9}
}
func (m *MomentNotifyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MomentNotifyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MomentNotifyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MomentNotifyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MomentNotifyResult.Merge(m, src)
}
func (m *MomentNotifyResult) XXX_Size() int {
	return m.Size()
}
func (m *MomentNotifyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MomentNotifyResult.DiscardUnknown(m)
}

var xxx_messageInfo_MomentNotifyResult proto.InternalMessageInfo

func (m *MomentNotifyResult) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *MomentNotifyResult) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

//根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
type CheckIsMuteContactReq struct {
	SelfId               int32    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckIsMuteContactReq) Reset()         { *m = CheckIsMuteContactReq{} }
func (m *CheckIsMuteContactReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsMuteContactReq) ProtoMessage()    {}
func (*CheckIsMuteContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{10}
}
func (m *CheckIsMuteContactReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIsMuteContactReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIsMuteContactReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIsMuteContactReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIsMuteContactReq.Merge(m, src)
}
func (m *CheckIsMuteContactReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckIsMuteContactReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIsMuteContactReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIsMuteContactReq proto.InternalMessageInfo

func (m *CheckIsMuteContactReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckIsMuteContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CheckIsMuteContactResult struct {
	ErrorCode            CheckIsMuteContactResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=imapigateway.CheckIsMuteContactResult_ResultCode" json:"ErrorCode,omitempty"`
	Result               bool                                `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CheckIsMuteContactResult) Reset()         { *m = CheckIsMuteContactResult{} }
func (m *CheckIsMuteContactResult) String() string { return proto.CompactTextString(m) }
func (*CheckIsMuteContactResult) ProtoMessage()    {}
func (*CheckIsMuteContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{11}
}
func (m *CheckIsMuteContactResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIsMuteContactResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIsMuteContactResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIsMuteContactResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIsMuteContactResult.Merge(m, src)
}
func (m *CheckIsMuteContactResult) XXX_Size() int {
	return m.Size()
}
func (m *CheckIsMuteContactResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIsMuteContactResult.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIsMuteContactResult proto.InternalMessageInfo

func (m *CheckIsMuteContactResult) GetErrorCode() CheckIsMuteContactResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return CheckIsMuteContactResult_Success
}

func (m *CheckIsMuteContactResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type MomentState struct {
	UserId               []int32  `protobuf:"varint,1,rep,packed,name=userId,proto3" json:"userId,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MomentState) Reset()         { *m = MomentState{} }
func (m *MomentState) String() string { return proto.CompactTextString(m) }
func (*MomentState) ProtoMessage()    {}
func (*MomentState) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{12}
}
func (m *MomentState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MomentState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MomentState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MomentState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MomentState.Merge(m, src)
}
func (m *MomentState) XXX_Size() int {
	return m.Size()
}
func (m *MomentState) XXX_DiscardUnknown() {
	xxx_messageInfo_MomentState.DiscardUnknown(m)
}

var xxx_messageInfo_MomentState proto.InternalMessageInfo

func (m *MomentState) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *MomentState) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ReqUpdateMoments struct {
	MomentStates         []*MomentState `protobuf:"bytes,1,rep,name=momentStates,proto3" json:"momentStates,omitempty"`
	SelfId               int32          `protobuf:"varint,2,opt,name=selfId,proto3" json:"selfId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReqUpdateMoments) Reset()         { *m = ReqUpdateMoments{} }
func (m *ReqUpdateMoments) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateMoments) ProtoMessage()    {}
func (*ReqUpdateMoments) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{13}
}
func (m *ReqUpdateMoments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpdateMoments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpdateMoments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpdateMoments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdateMoments.Merge(m, src)
}
func (m *ReqUpdateMoments) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpdateMoments) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdateMoments.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdateMoments proto.InternalMessageInfo

func (m *ReqUpdateMoments) GetMomentStates() []*MomentState {
	if m != nil {
		return m.MomentStates
	}
	return nil
}

func (m *ReqUpdateMoments) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

type ResUpdateMoments struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResUpdateMoments) Reset()         { *m = ResUpdateMoments{} }
func (m *ResUpdateMoments) String() string { return proto.CompactTextString(m) }
func (*ResUpdateMoments) ProtoMessage()    {}
func (*ResUpdateMoments) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{14}
}
func (m *ResUpdateMoments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResUpdateMoments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResUpdateMoments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResUpdateMoments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResUpdateMoments.Merge(m, src)
}
func (m *ResUpdateMoments) XXX_Size() int {
	return m.Size()
}
func (m *ResUpdateMoments) XXX_DiscardUnknown() {
	xxx_messageInfo_ResUpdateMoments.DiscardUnknown(m)
}

var xxx_messageInfo_ResUpdateMoments proto.InternalMessageInfo

func (m *ResUpdateMoments) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResUpdateMoments) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

//联系人的基本信息
type ContactInfo struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactId            int32    `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	FirstName            string   `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsSelfContacted      bool     `protobuf:"varint,5,opt,name=is_self_contacted,json=isSelfContacted,proto3" json:"is_self_contacted,omitempty"`
	SelfIsContacted      bool     `protobuf:"varint,6,opt,name=self_is_contacted,json=selfIsContacted,proto3" json:"self_is_contacted,omitempty"`
	StarMark             bool     `protobuf:"varint,7,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`
	HasPhone             bool     `protobuf:"varint,8,opt,name=has_phone,json=hasPhone,proto3" json:"has_phone,omitempty"`
	GroupId              int32    `protobuf:"varint,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	About                string   `protobuf:"bytes,10,opt,name=about,proto3" json:"about,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactInfo) Reset()         { *m = ContactInfo{} }
func (m *ContactInfo) String() string { return proto.CompactTextString(m) }
func (*ContactInfo) ProtoMessage()    {}
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{15}
}
func (m *ContactInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactInfo.Merge(m, src)
}
func (m *ContactInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContactInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContactInfo proto.InternalMessageInfo

func (m *ContactInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactInfo) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *ContactInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ContactInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ContactInfo) GetIsSelfContacted() bool {
	if m != nil {
		return m.IsSelfContacted
	}
	return false
}

func (m *ContactInfo) GetSelfIsContacted() bool {
	if m != nil {
		return m.SelfIsContacted
	}
	return false
}

func (m *ContactInfo) GetStarMark() bool {
	if m != nil {
		return m.StarMark
	}
	return false
}

func (m *ContactInfo) GetHasPhone() bool {
	if m != nil {
		return m.HasPhone
	}
	return false
}

func (m *ContactInfo) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ContactInfo) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

//获取用户联系人列表的请求
type ContatsGetContactsReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId                int64    `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Contacthash          string   `protobuf:"bytes,3,opt,name=contacthash,proto3" json:"contacthash,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContatsGetContactsReq) Reset()         { *m = ContatsGetContactsReq{} }
func (m *ContatsGetContactsReq) String() string { return proto.CompactTextString(m) }
func (*ContatsGetContactsReq) ProtoMessage()    {}
func (*ContatsGetContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{16}
}
func (m *ContatsGetContactsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContatsGetContactsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContatsGetContactsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContatsGetContactsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContatsGetContactsReq.Merge(m, src)
}
func (m *ContatsGetContactsReq) XXX_Size() int {
	return m.Size()
}
func (m *ContatsGetContactsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ContatsGetContactsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ContatsGetContactsReq proto.InternalMessageInfo

func (m *ContatsGetContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContatsGetContactsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContatsGetContactsReq) GetContacthash() string {
	if m != nil {
		return m.Contacthash
	}
	return ""
}

func (m *ContatsGetContactsReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//用户联系人列表获取的返回
type ContatsGetContactsResult struct {
	ContactArr           []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr,proto3" json:"contactArr,omitempty"`
	UserInfoArr          []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr,proto3" json:"userInfoArr,omitempty"`
	Errorcode            ReErrCode      `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ContatsGetContactsResult) Reset()         { *m = ContatsGetContactsResult{} }
func (m *ContatsGetContactsResult) String() string { return proto.CompactTextString(m) }
func (*ContatsGetContactsResult) ProtoMessage()    {}
func (*ContatsGetContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{17}
}
func (m *ContatsGetContactsResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContatsGetContactsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContatsGetContactsResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContatsGetContactsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContatsGetContactsResult.Merge(m, src)
}
func (m *ContatsGetContactsResult) XXX_Size() int {
	return m.Size()
}
func (m *ContatsGetContactsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ContatsGetContactsResult.DiscardUnknown(m)
}

var xxx_messageInfo_ContatsGetContactsResult proto.InternalMessageInfo

func (m *ContatsGetContactsResult) GetContactArr() []*ContactInfo {
	if m != nil {
		return m.ContactArr
	}
	return nil
}

func (m *ContatsGetContactsResult) GetUserInfoArr() []*UserInfo {
	if m != nil {
		return m.UserInfoArr
	}
	return nil
}

func (m *ContatsGetContactsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 积分业务通用协议请求
type ReqIntegralUniversalBusiness struct {
	Ip                   string    `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	ImUserId             int32     `protobuf:"varint,2,opt,name=imUserId,proto3" json:"imUserId,omitempty"`
	ImKeyId              uint64    `protobuf:"varint,3,opt,name=imKeyId,proto3" json:"imKeyId,omitempty"`
	BusinessId           int32     `protobuf:"varint,4,opt,name=businessId,proto3" json:"businessId,omitempty"`
	FromId               MsgFromID `protobuf:"varint,5,opt,name=fromId,proto3,enum=imapigateway.MsgFromID" json:"fromId,omitempty"`
	Data                 []byte    `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqIntegralUniversalBusiness) Reset()         { *m = ReqIntegralUniversalBusiness{} }
func (m *ReqIntegralUniversalBusiness) String() string { return proto.CompactTextString(m) }
func (*ReqIntegralUniversalBusiness) ProtoMessage()    {}
func (*ReqIntegralUniversalBusiness) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{18}
}
func (m *ReqIntegralUniversalBusiness) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqIntegralUniversalBusiness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqIntegralUniversalBusiness.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqIntegralUniversalBusiness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqIntegralUniversalBusiness.Merge(m, src)
}
func (m *ReqIntegralUniversalBusiness) XXX_Size() int {
	return m.Size()
}
func (m *ReqIntegralUniversalBusiness) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqIntegralUniversalBusiness.DiscardUnknown(m)
}

var xxx_messageInfo_ReqIntegralUniversalBusiness proto.InternalMessageInfo

func (m *ReqIntegralUniversalBusiness) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReqIntegralUniversalBusiness) GetImUserId() int32 {
	if m != nil {
		return m.ImUserId
	}
	return 0
}

func (m *ReqIntegralUniversalBusiness) GetImKeyId() uint64 {
	if m != nil {
		return m.ImKeyId
	}
	return 0
}

func (m *ReqIntegralUniversalBusiness) GetBusinessId() int32 {
	if m != nil {
		return m.BusinessId
	}
	return 0
}

func (m *ReqIntegralUniversalBusiness) GetFromId() MsgFromID {
	if m != nil {
		return m.FromId
	}
	return MsgFromID_MFI_UNKNOWN
}

func (m *ReqIntegralUniversalBusiness) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 积分业务通用协议响应
type ReplyIntegralUniversalBusiness struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyIntegralUniversalBusiness) Reset()         { *m = ReplyIntegralUniversalBusiness{} }
func (m *ReplyIntegralUniversalBusiness) String() string { return proto.CompactTextString(m) }
func (*ReplyIntegralUniversalBusiness) ProtoMessage()    {}
func (*ReplyIntegralUniversalBusiness) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{19}
}
func (m *ReplyIntegralUniversalBusiness) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyIntegralUniversalBusiness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyIntegralUniversalBusiness.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyIntegralUniversalBusiness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyIntegralUniversalBusiness.Merge(m, src)
}
func (m *ReplyIntegralUniversalBusiness) XXX_Size() int {
	return m.Size()
}
func (m *ReplyIntegralUniversalBusiness) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyIntegralUniversalBusiness.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyIntegralUniversalBusiness proto.InternalMessageInfo

func (m *ReplyIntegralUniversalBusiness) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 游戏规则获取借口
type OtherTransReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	KeyId                int64    `protobuf:"varint,2,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	IpAddr               string   `protobuf:"bytes,3,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	ReqMessagId          int64    `protobuf:"varint,4,opt,name=ReqMessagId,proto3" json:"ReqMessagId,omitempty"`
	ReqBytes             []byte   `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OtherTransReq) Reset()         { *m = OtherTransReq{} }
func (m *OtherTransReq) String() string { return proto.CompactTextString(m) }
func (*OtherTransReq) ProtoMessage()    {}
func (*OtherTransReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{20}
}
func (m *OtherTransReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OtherTransReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OtherTransReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OtherTransReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherTransReq.Merge(m, src)
}
func (m *OtherTransReq) XXX_Size() int {
	return m.Size()
}
func (m *OtherTransReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherTransReq.DiscardUnknown(m)
}

var xxx_messageInfo_OtherTransReq proto.InternalMessageInfo

func (m *OtherTransReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OtherTransReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *OtherTransReq) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *OtherTransReq) GetReqMessagId() int64 {
	if m != nil {
		return m.ReqMessagId
	}
	return 0
}

func (m *OtherTransReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 游戏规则响应
type OtherTransResp struct {
	RespBytes            []byte   `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OtherTransResp) Reset()         { *m = OtherTransResp{} }
func (m *OtherTransResp) String() string { return proto.CompactTextString(m) }
func (*OtherTransResp) ProtoMessage()    {}
func (*OtherTransResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{21}
}
func (m *OtherTransResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OtherTransResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OtherTransResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OtherTransResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherTransResp.Merge(m, src)
}
func (m *OtherTransResp) XXX_Size() int {
	return m.Size()
}
func (m *OtherTransResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherTransResp.DiscardUnknown(m)
}

var xxx_messageInfo_OtherTransResp proto.InternalMessageInfo

func (m *OtherTransResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 设置用户性别和生日
type SetUserDetailReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Flags                int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	FirstName            string   `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	Photo                string   `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	Sex                  int32    `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	Birthday             int32    `protobuf:"varint,6,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Extend               string   `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUserDetailReq) Reset()         { *m = SetUserDetailReq{} }
func (m *SetUserDetailReq) String() string { return proto.CompactTextString(m) }
func (*SetUserDetailReq) ProtoMessage()    {}
func (*SetUserDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{22}
}
func (m *SetUserDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUserDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUserDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUserDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserDetailReq.Merge(m, src)
}
func (m *SetUserDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *SetUserDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserDetailReq proto.InternalMessageInfo

func (m *SetUserDetailReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetUserDetailReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *SetUserDetailReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SetUserDetailReq) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SetUserDetailReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *SetUserDetailReq) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *SetUserDetailReq) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

// 设置用户性别和生日响应
type SetUserDetailResult struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUserDetailResult) Reset()         { *m = SetUserDetailResult{} }
func (m *SetUserDetailResult) String() string { return proto.CompactTextString(m) }
func (*SetUserDetailResult) ProtoMessage()    {}
func (*SetUserDetailResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{23}
}
func (m *SetUserDetailResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUserDetailResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUserDetailResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUserDetailResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserDetailResult.Merge(m, src)
}
func (m *SetUserDetailResult) XXX_Size() int {
	return m.Size()
}
func (m *SetUserDetailResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserDetailResult.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserDetailResult proto.InternalMessageInfo

func (m *SetUserDetailResult) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

//根据用户userName来获取用户基本信息
type GetUserByUsernameReq struct {
	SelfId               int32    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserByUsernameReq) Reset()         { *m = GetUserByUsernameReq{} }
func (m *GetUserByUsernameReq) String() string { return proto.CompactTextString(m) }
func (*GetUserByUsernameReq) ProtoMessage()    {}
func (*GetUserByUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{24}
}
func (m *GetUserByUsernameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserByUsernameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserByUsernameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserByUsernameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByUsernameReq.Merge(m, src)
}
func (m *GetUserByUsernameReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserByUsernameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByUsernameReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByUsernameReq proto.InternalMessageInfo

func (m *GetUserByUsernameReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserByUsernameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

//获取用户基本信息的返回结果
type GetUserInfoResult struct {
	Uinfo                *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetUserInfoResult) Reset()         { *m = GetUserInfoResult{} }
func (m *GetUserInfoResult) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoResult) ProtoMessage()    {}
func (*GetUserInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{25}
}
func (m *GetUserInfoResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserInfoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserInfoResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserInfoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserInfoResult.Merge(m, src)
}
func (m *GetUserInfoResult) XXX_Size() int {
	return m.Size()
}
func (m *GetUserInfoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserInfoResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserInfoResult proto.InternalMessageInfo

func (m *GetUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetUserInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// ####################################　红包游戏　######################################
// 发送红包游戏请求
type SendGameRedReq struct {
	FromKeyId            int64    `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId               uint32   `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req                  []byte   `protobuf:"bytes,3,opt,name=Req,proto3" json:"Req,omitempty"`
	RdpRsp               []byte   `protobuf:"bytes,4,opt,name=RdpRsp,proto3" json:"RdpRsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendGameRedReq) Reset()         { *m = SendGameRedReq{} }
func (m *SendGameRedReq) String() string { return proto.CompactTextString(m) }
func (*SendGameRedReq) ProtoMessage()    {}
func (*SendGameRedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{26}
}
func (m *SendGameRedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendGameRedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendGameRedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendGameRedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendGameRedReq.Merge(m, src)
}
func (m *SendGameRedReq) XXX_Size() int {
	return m.Size()
}
func (m *SendGameRedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendGameRedReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendGameRedReq proto.InternalMessageInfo

func (m *SendGameRedReq) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *SendGameRedReq) GetFromId() uint32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *SendGameRedReq) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *SendGameRedReq) GetRdpRsp() []byte {
	if m != nil {
		return m.RdpRsp
	}
	return nil
}

// 查询红包游戏请求
type QryGameRdpReq struct {
	FromKeyId            int64    `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId               uint32   `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req                  []byte   `protobuf:"bytes,4,opt,name=Req,proto3" json:"Req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryGameRdpReq) Reset()         { *m = QryGameRdpReq{} }
func (m *QryGameRdpReq) String() string { return proto.CompactTextString(m) }
func (*QryGameRdpReq) ProtoMessage()    {}
func (*QryGameRdpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{27}
}
func (m *QryGameRdpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QryGameRdpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QryGameRdpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QryGameRdpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryGameRdpReq.Merge(m, src)
}
func (m *QryGameRdpReq) XXX_Size() int {
	return m.Size()
}
func (m *QryGameRdpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryGameRdpReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryGameRdpReq proto.InternalMessageInfo

func (m *QryGameRdpReq) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *QryGameRdpReq) GetFromId() uint32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *QryGameRdpReq) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

// 领取红包游戏请求
type RcvGameRedReq struct {
	FromKeyId            int64    `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId               uint32   `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req                  []byte   `protobuf:"bytes,3,opt,name=Req,proto3" json:"Req,omitempty"`
	RdpRsp               []byte   `protobuf:"bytes,4,opt,name=RdpRsp,proto3" json:"RdpRsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcvGameRedReq) Reset()         { *m = RcvGameRedReq{} }
func (m *RcvGameRedReq) String() string { return proto.CompactTextString(m) }
func (*RcvGameRedReq) ProtoMessage()    {}
func (*RcvGameRedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{28}
}
func (m *RcvGameRedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RcvGameRedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RcvGameRedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RcvGameRedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcvGameRedReq.Merge(m, src)
}
func (m *RcvGameRedReq) XXX_Size() int {
	return m.Size()
}
func (m *RcvGameRedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RcvGameRedReq.DiscardUnknown(m)
}

var xxx_messageInfo_RcvGameRedReq proto.InternalMessageInfo

func (m *RcvGameRedReq) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *RcvGameRedReq) GetFromId() uint32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *RcvGameRedReq) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *RcvGameRedReq) GetRdpRsp() []byte {
	if m != nil {
		return m.RdpRsp
	}
	return nil
}

// 红包游戏响应
type GameRedResp struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameRedResp) Reset()         { *m = GameRedResp{} }
func (m *GameRedResp) String() string { return proto.CompactTextString(m) }
func (*GameRedResp) ProtoMessage()    {}
func (*GameRedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{29}
}
func (m *GameRedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRedResp.Merge(m, src)
}
func (m *GameRedResp) XXX_Size() int {
	return m.Size()
}
func (m *GameRedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRedResp.DiscardUnknown(m)
}

var xxx_messageInfo_GameRedResp proto.InternalMessageInfo

func (m *GameRedResp) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GameRedResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GameRedResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

//################################# 红包相关协议转发　###############################
//发送红包请求
type SendRDPReq struct {
	Debug                *Debug   `protobuf:"bytes,1,opt,name=Debug,proto3" json:"Debug,omitempty"`
	ReqMessageId         int64    `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes             []byte   `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
	RedMessageId         int32    `protobuf:"varint,4,opt,name=red_messageId,json=redMessageId,proto3" json:"red_messageId,omitempty"`
	RedChanelId          int32    `protobuf:"varint,5,opt,name=red_chanelId,json=redChanelId,proto3" json:"red_chanelId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRDPReq) Reset()         { *m = SendRDPReq{} }
func (m *SendRDPReq) String() string { return proto.CompactTextString(m) }
func (*SendRDPReq) ProtoMessage()    {}
func (*SendRDPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{30}
}
func (m *SendRDPReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendRDPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendRDPReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendRDPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRDPReq.Merge(m, src)
}
func (m *SendRDPReq) XXX_Size() int {
	return m.Size()
}
func (m *SendRDPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRDPReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendRDPReq proto.InternalMessageInfo

func (m *SendRDPReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SendRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *SendRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

func (m *SendRDPReq) GetRedMessageId() int32 {
	if m != nil {
		return m.RedMessageId
	}
	return 0
}

func (m *SendRDPReq) GetRedChanelId() int32 {
	if m != nil {
		return m.RedChanelId
	}
	return 0
}

//发送红包/转账返回
type SendRDPResp struct {
	RespBytes            []byte   `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRDPResp) Reset()         { *m = SendRDPResp{} }
func (m *SendRDPResp) String() string { return proto.CompactTextString(m) }
func (*SendRDPResp) ProtoMessage()    {}
func (*SendRDPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{31}
}
func (m *SendRDPResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendRDPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendRDPResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendRDPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRDPResp.Merge(m, src)
}
func (m *SendRDPResp) XXX_Size() int {
	return m.Size()
}
func (m *SendRDPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRDPResp.DiscardUnknown(m)
}

var xxx_messageInfo_SendRDPResp proto.InternalMessageInfo

func (m *SendRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

func (m *SendRDPResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//查看红包/转账请求
type CheckRDPReq struct {
	Debug                *Debug   `protobuf:"bytes,1,opt,name=Debug,proto3" json:"Debug,omitempty"`
	ReqMessageId         int64    `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes             []byte   `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckRDPReq) Reset()         { *m = CheckRDPReq{} }
func (m *CheckRDPReq) String() string { return proto.CompactTextString(m) }
func (*CheckRDPReq) ProtoMessage()    {}
func (*CheckRDPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{32}
}
func (m *CheckRDPReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckRDPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckRDPReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckRDPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckRDPReq.Merge(m, src)
}
func (m *CheckRDPReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckRDPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckRDPReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckRDPReq proto.InternalMessageInfo

func (m *CheckRDPReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CheckRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *CheckRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

//查看红包/转账返回
type CheckRDPResp struct {
	RespBytes            []byte   `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckRDPResp) Reset()         { *m = CheckRDPResp{} }
func (m *CheckRDPResp) String() string { return proto.CompactTextString(m) }
func (*CheckRDPResp) ProtoMessage()    {}
func (*CheckRDPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{33}
}
func (m *CheckRDPResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckRDPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckRDPResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckRDPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckRDPResp.Merge(m, src)
}
func (m *CheckRDPResp) XXX_Size() int {
	return m.Size()
}
func (m *CheckRDPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckRDPResp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckRDPResp proto.InternalMessageInfo

func (m *CheckRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

func (m *CheckRDPResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//接收红包/转账请求
type ReceiveRDPReq struct {
	Debug                *Debug   `protobuf:"bytes,1,opt,name=Debug,proto3" json:"Debug,omitempty"`
	ReqMessageId         int64    `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes             []byte   `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveRDPReq) Reset()         { *m = ReceiveRDPReq{} }
func (m *ReceiveRDPReq) String() string { return proto.CompactTextString(m) }
func (*ReceiveRDPReq) ProtoMessage()    {}
func (*ReceiveRDPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{34}
}
func (m *ReceiveRDPReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiveRDPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiveRDPReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiveRDPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveRDPReq.Merge(m, src)
}
func (m *ReceiveRDPReq) XXX_Size() int {
	return m.Size()
}
func (m *ReceiveRDPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveRDPReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveRDPReq proto.InternalMessageInfo

func (m *ReceiveRDPReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReceiveRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *ReceiveRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

//接收红包/转账返回
type ReceiveRDPResp struct {
	RespBytes            []byte   `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveRDPResp) Reset()         { *m = ReceiveRDPResp{} }
func (m *ReceiveRDPResp) String() string { return proto.CompactTextString(m) }
func (*ReceiveRDPResp) ProtoMessage()    {}
func (*ReceiveRDPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{35}
}
func (m *ReceiveRDPResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiveRDPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiveRDPResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiveRDPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveRDPResp.Merge(m, src)
}
func (m *ReceiveRDPResp) XXX_Size() int {
	return m.Size()
}
func (m *ReceiveRDPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveRDPResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveRDPResp proto.InternalMessageInfo

func (m *ReceiveRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

func (m *ReceiveRDPResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//################################ 编辑超级群群说明信息 editAbout ######################
// 返回参数
type ReplyEditChannelAbout struct {
	Succeed              bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyEditChannelAbout) Reset()         { *m = ReplyEditChannelAbout{} }
func (m *ReplyEditChannelAbout) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChannelAbout) ProtoMessage()    {}
func (*ReplyEditChannelAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{36}
}
func (m *ReplyEditChannelAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyEditChannelAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyEditChannelAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyEditChannelAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyEditChannelAbout.Merge(m, src)
}
func (m *ReplyEditChannelAbout) XXX_Size() int {
	return m.Size()
}
func (m *ReplyEditChannelAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyEditChannelAbout.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyEditChannelAbout proto.InternalMessageInfo

func (m *ReplyEditChannelAbout) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *ReplyEditChannelAbout) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//ack to the title editing
type ReplyEditChannelTitle struct {
	Reply                []byte   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyEditChannelTitle) Reset()         { *m = ReplyEditChannelTitle{} }
func (m *ReplyEditChannelTitle) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChannelTitle) ProtoMessage()    {}
func (*ReplyEditChannelTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{37}
}
func (m *ReplyEditChannelTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyEditChannelTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyEditChannelTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyEditChannelTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyEditChannelTitle.Merge(m, src)
}
func (m *ReplyEditChannelTitle) XXX_Size() int {
	return m.Size()
}
func (m *ReplyEditChannelTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyEditChannelTitle.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyEditChannelTitle proto.InternalMessageInfo

func (m *ReplyEditChannelTitle) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyEditChannelTitle) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//机器人基础信息更改
type BotUpdateInfo struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotInfoVersion       int32    `protobuf:"varint,2,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory       bool     `protobuf:"varint,3,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChat            bool     `protobuf:"varint,4,opt,name=bot_no_chat,json=botNoChat,proto3" json:"bot_no_chat,omitempty"`
	Debug                *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BotUpdateInfo) Reset()         { *m = BotUpdateInfo{} }
func (m *BotUpdateInfo) String() string { return proto.CompactTextString(m) }
func (*BotUpdateInfo) ProtoMessage()    {}
func (*BotUpdateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{38}
}
func (m *BotUpdateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotUpdateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotUpdateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotUpdateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotUpdateInfo.Merge(m, src)
}
func (m *BotUpdateInfo) XXX_Size() int {
	return m.Size()
}
func (m *BotUpdateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BotUpdateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BotUpdateInfo proto.InternalMessageInfo

func (m *BotUpdateInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BotUpdateInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *BotUpdateInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *BotUpdateInfo) GetBotNoChat() bool {
	if m != nil {
		return m.BotNoChat
	}
	return false
}

func (m *BotUpdateInfo) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//机器人更改信息的返回结果
type BotUpdateInfoResult struct {
	Errorcode            ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BotUpdateInfoResult) Reset()         { *m = BotUpdateInfoResult{} }
func (m *BotUpdateInfoResult) String() string { return proto.CompactTextString(m) }
func (*BotUpdateInfoResult) ProtoMessage()    {}
func (*BotUpdateInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{39}
}
func (m *BotUpdateInfoResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotUpdateInfoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotUpdateInfoResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotUpdateInfoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotUpdateInfoResult.Merge(m, src)
}
func (m *BotUpdateInfoResult) XXX_Size() int {
	return m.Size()
}
func (m *BotUpdateInfoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BotUpdateInfoResult.DiscardUnknown(m)
}

var xxx_messageInfo_BotUpdateInfoResult proto.InternalMessageInfo

func (m *BotUpdateInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 返回参数
type ReplyUpdatePinnedChannelMessage struct {
	Reply                []byte   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyUpdatePinnedChannelMessage) Reset()         { *m = ReplyUpdatePinnedChannelMessage{} }
func (m *ReplyUpdatePinnedChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdatePinnedChannelMessage) ProtoMessage()    {}
func (*ReplyUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{40}
}
func (m *ReplyUpdatePinnedChannelMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyUpdatePinnedChannelMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyUpdatePinnedChannelMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyUpdatePinnedChannelMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyUpdatePinnedChannelMessage.Merge(m, src)
}
func (m *ReplyUpdatePinnedChannelMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReplyUpdatePinnedChannelMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyUpdatePinnedChannelMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyUpdatePinnedChannelMessage proto.InternalMessageInfo

func (m *ReplyUpdatePinnedChannelMessage) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyUpdatePinnedChannelMessage) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 推出超级群返回
type ReplyLeaveChannel struct {
	Reply                []byte   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyLeaveChannel) Reset()         { *m = ReplyLeaveChannel{} }
func (m *ReplyLeaveChannel) String() string { return proto.CompactTextString(m) }
func (*ReplyLeaveChannel) ProtoMessage()    {}
func (*ReplyLeaveChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{41}
}
func (m *ReplyLeaveChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyLeaveChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyLeaveChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyLeaveChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyLeaveChannel.Merge(m, src)
}
func (m *ReplyLeaveChannel) XXX_Size() int {
	return m.Size()
}
func (m *ReplyLeaveChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyLeaveChannel.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyLeaveChannel proto.InternalMessageInfo

func (m *ReplyLeaveChannel) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyLeaveChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetAllChats struct {
	Fromid               int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetAllChats) Reset()         { *m = ReqGetAllChats{} }
func (m *ReqGetAllChats) String() string { return proto.CompactTextString(m) }
func (*ReqGetAllChats) ProtoMessage()    {}
func (*ReqGetAllChats) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{42}
}
func (m *ReqGetAllChats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetAllChats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetAllChats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetAllChats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetAllChats.Merge(m, src)
}
func (m *ReqGetAllChats) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetAllChats) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetAllChats.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetAllChats proto.InternalMessageInfo

func (m *ReqGetAllChats) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqGetAllChats) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetAllChats struct {
	Chats                []int32  `protobuf:"varint,1,rep,packed,name=chats,proto3" json:"chats,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetAllChats) Reset()         { *m = ReplyGetAllChats{} }
func (m *ReplyGetAllChats) String() string { return proto.CompactTextString(m) }
func (*ReplyGetAllChats) ProtoMessage()    {}
func (*ReplyGetAllChats) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{43}
}
func (m *ReplyGetAllChats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyGetAllChats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyGetAllChats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyGetAllChats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetAllChats.Merge(m, src)
}
func (m *ReplyGetAllChats) XXX_Size() int {
	return m.Size()
}
func (m *ReplyGetAllChats) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetAllChats.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetAllChats proto.InternalMessageInfo

func (m *ReplyGetAllChats) GetChats() []int32 {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *ReplyGetAllChats) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

//#####################超级群get diff###################
type ReqGetchannelDifference struct {
	FromId               int32    `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId            int64    `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Flags                int32    `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Force                bool     `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	ChannelId            int32    `protobuf:"varint,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Pts                  int32    `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit                int32    `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Range_MinId          int32    `protobuf:"varint,8,opt,name=range_MinId,json=rangeMinId,proto3" json:"range_MinId,omitempty"`
	Range_MaxId          int32    `protobuf:"varint,9,opt,name=range_MaxId,json=rangeMaxId,proto3" json:"range_MaxId,omitempty"`
	Device               int32    `protobuf:"varint,10,opt,name=device,proto3" json:"device,omitempty"`
	Debug                *Debug   `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetchannelDifference) Reset()         { *m = ReqGetchannelDifference{} }
func (m *ReqGetchannelDifference) String() string { return proto.CompactTextString(m) }
func (*ReqGetchannelDifference) ProtoMessage()    {}
func (*ReqGetchannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{44}
}
func (m *ReqGetchannelDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetchannelDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetchannelDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetchannelDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetchannelDifference.Merge(m, src)
}
func (m *ReqGetchannelDifference) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetchannelDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetchannelDifference.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetchannelDifference proto.InternalMessageInfo

func (m *ReqGetchannelDifference) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqGetchannelDifference) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ReqGetchannelDifference) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqGetchannelDifference) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetchannelDifference) GetRange_MinId() int32 {
	if m != nil {
		return m.Range_MinId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetRange_MaxId() int32 {
	if m != nil {
		return m.Range_MaxId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetDevice() int32 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *ReqGetchannelDifference) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelDiffCommon struct {
	Difference           []byte   `protobuf:"bytes,1,opt,name=difference,proto3" json:"difference,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyChannelDiffCommon) Reset()         { *m = ReplyChannelDiffCommon{} }
func (m *ReplyChannelDiffCommon) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelDiffCommon) ProtoMessage()    {}
func (*ReplyChannelDiffCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{45}
}
func (m *ReplyChannelDiffCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyChannelDiffCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyChannelDiffCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyChannelDiffCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyChannelDiffCommon.Merge(m, src)
}
func (m *ReplyChannelDiffCommon) XXX_Size() int {
	return m.Size()
}
func (m *ReplyChannelDiffCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyChannelDiffCommon.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyChannelDiffCommon proto.InternalMessageInfo

func (m *ReplyChannelDiffCommon) GetDifference() []byte {
	if m != nil {
		return m.Difference
	}
	return nil
}

func (m *ReplyChannelDiffCommon) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//获取fullchannel
type ReqFullchannel struct {
	FromId               int32    `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId            int32    `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash           int64    `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFullchannel) Reset()         { *m = ReqFullchannel{} }
func (m *ReqFullchannel) String() string { return proto.CompactTextString(m) }
func (*ReqFullchannel) ProtoMessage()    {}
func (*ReqFullchannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{46}
}
func (m *ReqFullchannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFullchannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFullchannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFullchannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFullchannel.Merge(m, src)
}
func (m *ReqFullchannel) XXX_Size() int {
	return m.Size()
}
func (m *ReqFullchannel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFullchannel.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFullchannel proto.InternalMessageInfo

func (m *ReqFullchannel) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqFullchannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFullchannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqFullchannel) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//返回fullchannel
type ReplyFullChannel struct {
	Updates              []byte   `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyFullChannel) Reset()         { *m = ReplyFullChannel{} }
func (m *ReplyFullChannel) String() string { return proto.CompactTextString(m) }
func (*ReplyFullChannel) ProtoMessage()    {}
func (*ReplyFullChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{47}
}
func (m *ReplyFullChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyFullChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyFullChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyFullChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyFullChannel.Merge(m, src)
}
func (m *ReplyFullChannel) XXX_Size() int {
	return m.Size()
}
func (m *ReplyFullChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyFullChannel.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyFullChannel proto.InternalMessageInfo

func (m *ReplyFullChannel) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyFullChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//############################# 删除消息 ####################
type ReqDeleteMessages struct {
	Fromid               int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid            uint64   `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags                int32    `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Revoke               bool     `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Id                   []int32  `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	Channelid            int32    `protobuf:"varint,6,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqDeleteMessages) Reset()         { *m = ReqDeleteMessages{} }
func (m *ReqDeleteMessages) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteMessages) ProtoMessage()    {}
func (*ReqDeleteMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{48}
}
func (m *ReqDeleteMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqDeleteMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqDeleteMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqDeleteMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqDeleteMessages.Merge(m, src)
}
func (m *ReqDeleteMessages) XXX_Size() int {
	return m.Size()
}
func (m *ReqDeleteMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqDeleteMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ReqDeleteMessages proto.InternalMessageInfo

func (m *ReqDeleteMessages) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDeleteMessages) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteMessages) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqDeleteMessages) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

func (m *ReqDeleteMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReqDeleteMessages) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *ReqDeleteMessages) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteMessages struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyDeleteMessages) Reset()         { *m = ReplyDeleteMessages{} }
func (m *ReplyDeleteMessages) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteMessages) ProtoMessage()    {}
func (*ReplyDeleteMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{49}
}
func (m *ReplyDeleteMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyDeleteMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyDeleteMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyDeleteMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyDeleteMessages.Merge(m, src)
}
func (m *ReplyDeleteMessages) XXX_Size() int {
	return m.Size()
}
func (m *ReplyDeleteMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyDeleteMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyDeleteMessages proto.InternalMessageInfo

func (m *ReplyDeleteMessages) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDeleteMessages) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

//注册指定用户的请求
type RegisterUserInfoReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash           int64    `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	FirstName            string   `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName             string   `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot                bool     `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion       int32    `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory       bool     `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats           bool     `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	CountryCode          string   `protobuf:"bytes,10,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	LocalPhone           string   `protobuf:"bytes,11,opt,name=LocalPhone,proto3" json:"LocalPhone,omitempty"`
	Dc                   int32    `protobuf:"varint,12,opt,name=dc,proto3" json:"dc,omitempty"`
	GroupNow             int32    `protobuf:"varint,13,opt,name=GroupNow,proto3" json:"GroupNow,omitempty"`
	Debug                *Debug   `protobuf:"bytes,14,opt,name=debug,proto3" json:"debug,omitempty"`
	Sex                  int32    `protobuf:"varint,15,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Birthday             int32    `protobuf:"varint,16,opt,name=birthday,proto3" json:"birthday,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterUserInfoReq) Reset()         { *m = RegisterUserInfoReq{} }
func (m *RegisterUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*RegisterUserInfoReq) ProtoMessage()    {}
func (*RegisterUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{50}
}
func (m *RegisterUserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterUserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterUserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterUserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterUserInfoReq.Merge(m, src)
}
func (m *RegisterUserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterUserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterUserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterUserInfoReq proto.InternalMessageInfo

func (m *RegisterUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RegisterUserInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RegisterUserInfoReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *RegisterUserInfoReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisterUserInfoReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegisterUserInfoReq) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *RegisterUserInfoReq) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *RegisterUserInfoReq) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *RegisterUserInfoReq) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *RegisterUserInfoReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *RegisterUserInfoReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *RegisterUserInfoReq) GetDc() int32 {
	if m != nil {
		return m.Dc
	}
	return 0
}

func (m *RegisterUserInfoReq) GetGroupNow() int32 {
	if m != nil {
		return m.GroupNow
	}
	return 0
}

func (m *RegisterUserInfoReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *RegisterUserInfoReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RegisterUserInfoReq) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

//获取fullchannel
type ReqGetFullChannel struct {
	FromId               int32    `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId            int32    `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash           int64    `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetFullChannel) Reset()         { *m = ReqGetFullChannel{} }
func (m *ReqGetFullChannel) String() string { return proto.CompactTextString(m) }
func (*ReqGetFullChannel) ProtoMessage()    {}
func (*ReqGetFullChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{51}
}
func (m *ReqGetFullChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetFullChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetFullChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetFullChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetFullChannel.Merge(m, src)
}
func (m *ReqGetFullChannel) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetFullChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetFullChannel.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetFullChannel proto.InternalMessageInfo

func (m *ReqGetFullChannel) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetFullChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetFullChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqGetFullChannel) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//获取participants
type ReqGetParticipants struct {
	OffSet               int32    `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType            int32    `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId            int32    `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId               int32    `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q                    string   `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash                 int32    `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug                *Debug   `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetParticipants) Reset()         { *m = ReqGetParticipants{} }
func (m *ReqGetParticipants) String() string { return proto.CompactTextString(m) }
func (*ReqGetParticipants) ProtoMessage()    {}
func (*ReqGetParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{52}
}
func (m *ReqGetParticipants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetParticipants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetParticipants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetParticipants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetParticipants.Merge(m, src)
}
func (m *ReqGetParticipants) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetParticipants) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetParticipants.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetParticipants proto.InternalMessageInfo

func (m *ReqGetParticipants) GetOffSet() int32 {
	if m != nil {
		return m.OffSet
	}
	return 0
}

func (m *ReqGetParticipants) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetParticipants) GetPartiType() int32 {
	if m != nil {
		return m.PartiType
	}
	return 0
}

func (m *ReqGetParticipants) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetParticipants) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetParticipants) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqGetParticipants) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *ReqGetParticipants) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	//    InputChannel channel = 4;
	ChannelId            int32    `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id                   int32    `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid            int64    `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUpdatePinnedChannelMessage) Reset()         { *m = ReqUpdatePinnedChannelMessage{} }
func (m *ReqUpdatePinnedChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReqUpdatePinnedChannelMessage) ProtoMessage()    {}
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{53}
}
func (m *ReqUpdatePinnedChannelMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpdatePinnedChannelMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpdatePinnedChannelMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpdatePinnedChannelMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdatePinnedChannelMessage.Merge(m, src)
}
func (m *ReqUpdatePinnedChannelMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpdatePinnedChannelMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdatePinnedChannelMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdatePinnedChannelMessage proto.InternalMessageInfo

func (m *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqEditChannelAbout struct {
	FromId               int32    `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId            int64    `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId            int32    `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About                string   `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash           int64    `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug                *Debug   `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqEditChannelAbout) Reset()         { *m = ReqEditChannelAbout{} }
func (m *ReqEditChannelAbout) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelAbout) ProtoMessage()    {}
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{54}
}
func (m *ReqEditChannelAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqEditChannelAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqEditChannelAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqEditChannelAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqEditChannelAbout.Merge(m, src)
}
func (m *ReqEditChannelAbout) XXX_Size() int {
	return m.Size()
}
func (m *ReqEditChannelAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqEditChannelAbout.DiscardUnknown(m)
}

var xxx_messageInfo_ReqEditChannelAbout proto.InternalMessageInfo

func (m *ReqEditChannelAbout) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ReqEditChannelAbout) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditChannelAbout) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// edit title
type ReqEditChannelTitle struct {
	ChannelId            int32    `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId               int32    `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid            int64    `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqEditChannelTitle) Reset()         { *m = ReqEditChannelTitle{} }
func (m *ReqEditChannelTitle) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelTitle) ProtoMessage()    {}
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{55}
}
func (m *ReqEditChannelTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqEditChannelTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqEditChannelTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqEditChannelTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqEditChannelTitle.Merge(m, src)
}
func (m *ReqEditChannelTitle) XXX_Size() int {
	return m.Size()
}
func (m *ReqEditChannelTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqEditChannelTitle.DiscardUnknown(m)
}

var xxx_messageInfo_ReqEditChannelTitle proto.InternalMessageInfo

func (m *ReqEditChannelTitle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqEditChannelTitle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChannelTitle) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelData struct {
	Reply                []byte   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ChannelId            int32    `protobuf:"varint,4,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	FromId               int32    `protobuf:"varint,5,opt,name=FromId,proto3" json:"FromId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyChannelData) Reset()         { *m = ReplyChannelData{} }
func (m *ReplyChannelData) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelData) ProtoMessage()    {}
func (*ReplyChannelData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{56}
}
func (m *ReplyChannelData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyChannelData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyChannelData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyChannelData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyChannelData.Merge(m, src)
}
func (m *ReplyChannelData) XXX_Size() int {
	return m.Size()
}
func (m *ReplyChannelData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyChannelData.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyChannelData proto.InternalMessageInfo

func (m *ReplyChannelData) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyChannelData) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ReplyChannelData) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReplyChannelData) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

type ReqDelManualBlockList struct {
	UnBlockUser          *BlockUser `protobuf:"bytes,1,opt,name=UnBlockUser,proto3" json:"UnBlockUser,omitempty"`
	BotId                int32      `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug                *Debug     `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReqDelManualBlockList) Reset()         { *m = ReqDelManualBlockList{} }
func (m *ReqDelManualBlockList) String() string { return proto.CompactTextString(m) }
func (*ReqDelManualBlockList) ProtoMessage()    {}
func (*ReqDelManualBlockList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{57}
}
func (m *ReqDelManualBlockList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqDelManualBlockList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqDelManualBlockList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqDelManualBlockList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqDelManualBlockList.Merge(m, src)
}
func (m *ReqDelManualBlockList) XXX_Size() int {
	return m.Size()
}
func (m *ReqDelManualBlockList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqDelManualBlockList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqDelManualBlockList proto.InternalMessageInfo

func (m *ReqDelManualBlockList) GetUnBlockUser() *BlockUser {
	if m != nil {
		return m.UnBlockUser
	}
	return nil
}

func (m *ReqDelManualBlockList) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *ReqDelManualBlockList) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqSetManualBlockList struct {
	BlockUser            *BlockUser `protobuf:"bytes,1,opt,name=BlockUser,proto3" json:"BlockUser,omitempty"`
	BotId                int32      `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug                *Debug     `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReqSetManualBlockList) Reset()         { *m = ReqSetManualBlockList{} }
func (m *ReqSetManualBlockList) String() string { return proto.CompactTextString(m) }
func (*ReqSetManualBlockList) ProtoMessage()    {}
func (*ReqSetManualBlockList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{58}
}
func (m *ReqSetManualBlockList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSetManualBlockList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSetManualBlockList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSetManualBlockList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSetManualBlockList.Merge(m, src)
}
func (m *ReqSetManualBlockList) XXX_Size() int {
	return m.Size()
}
func (m *ReqSetManualBlockList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSetManualBlockList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSetManualBlockList proto.InternalMessageInfo

func (m *ReqSetManualBlockList) GetBlockUser() *BlockUser {
	if m != nil {
		return m.BlockUser
	}
	return nil
}

func (m *ReqSetManualBlockList) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *ReqSetManualBlockList) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//禁言某用戶
type BlockUser struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	BlockTime            int64    `protobuf:"varint,2,opt,name=blockTime,proto3" json:"blockTime,omitempty"`
	GroupId              int64    `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockUser) Reset()         { *m = BlockUser{} }
func (m *BlockUser) String() string { return proto.CompactTextString(m) }
func (*BlockUser) ProtoMessage()    {}
func (*BlockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{59}
}
func (m *BlockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockUser.Merge(m, src)
}
func (m *BlockUser) XXX_Size() int {
	return m.Size()
}
func (m *BlockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockUser.DiscardUnknown(m)
}

var xxx_messageInfo_BlockUser proto.InternalMessageInfo

func (m *BlockUser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BlockUser) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *BlockUser) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type ManualBlockReplyData struct {
	ReplyData            []byte   `protobuf:"bytes,1,opt,name=replyData,proto3" json:"replyData,omitempty"`
	Reply                bool     `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode            int32    `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManualBlockReplyData) Reset()         { *m = ManualBlockReplyData{} }
func (m *ManualBlockReplyData) String() string { return proto.CompactTextString(m) }
func (*ManualBlockReplyData) ProtoMessage()    {}
func (*ManualBlockReplyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{60}
}
func (m *ManualBlockReplyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManualBlockReplyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManualBlockReplyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManualBlockReplyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManualBlockReplyData.Merge(m, src)
}
func (m *ManualBlockReplyData) XXX_Size() int {
	return m.Size()
}
func (m *ManualBlockReplyData) XXX_DiscardUnknown() {
	xxx_messageInfo_ManualBlockReplyData.DiscardUnknown(m)
}

var xxx_messageInfo_ManualBlockReplyData proto.InternalMessageInfo

func (m *ManualBlockReplyData) GetReplyData() []byte {
	if m != nil {
		return m.ReplyData
	}
	return nil
}

func (m *ManualBlockReplyData) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func (m *ManualBlockReplyData) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//存储sticker 集合概要 Documents请求
type StoreShopStickerSetDocumentsReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Documents            []int32  `protobuf:"varint,2,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreShopStickerSetDocumentsReq) Reset()         { *m = StoreShopStickerSetDocumentsReq{} }
func (m *StoreShopStickerSetDocumentsReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetDocumentsReq) ProtoMessage()    {}
func (*StoreShopStickerSetDocumentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{61}
}
func (m *StoreShopStickerSetDocumentsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreShopStickerSetDocumentsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreShopStickerSetDocumentsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreShopStickerSetDocumentsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreShopStickerSetDocumentsReq.Merge(m, src)
}
func (m *StoreShopStickerSetDocumentsReq) XXX_Size() int {
	return m.Size()
}
func (m *StoreShopStickerSetDocumentsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreShopStickerSetDocumentsReq.DiscardUnknown(m)
}

var xxx_messageInfo_StoreShopStickerSetDocumentsReq proto.InternalMessageInfo

func (m *StoreShopStickerSetDocumentsReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreShopStickerSetDocumentsReq) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *StoreShopStickerSetDocumentsReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//存储sticker 集合概要 Documents返回结果
type StoreShopStickerSetDocumentsResult struct {
	Errorcode            ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StoreShopStickerSetDocumentsResult) Reset()         { *m = StoreShopStickerSetDocumentsResult{} }
func (m *StoreShopStickerSetDocumentsResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetDocumentsResult) ProtoMessage()    {}
func (*StoreShopStickerSetDocumentsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{62}
}
func (m *StoreShopStickerSetDocumentsResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreShopStickerSetDocumentsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreShopStickerSetDocumentsResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreShopStickerSetDocumentsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreShopStickerSetDocumentsResult.Merge(m, src)
}
func (m *StoreShopStickerSetDocumentsResult) XXX_Size() int {
	return m.Size()
}
func (m *StoreShopStickerSetDocumentsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreShopStickerSetDocumentsResult.DiscardUnknown(m)
}

var xxx_messageInfo_StoreShopStickerSetDocumentsResult proto.InternalMessageInfo

func (m *StoreShopStickerSetDocumentsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//结构体AuthorStickerSet
type AuthorStickerSet struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId         int64    `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	ShortName            string   `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived             bool     `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed            bool     `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled             bool     `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered              int32    `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Created              int32    `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated              int32    `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorStickerSet) Reset()         { *m = AuthorStickerSet{} }
func (m *AuthorStickerSet) String() string { return proto.CompactTextString(m) }
func (*AuthorStickerSet) ProtoMessage()    {}
func (*AuthorStickerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{63}
}
func (m *AuthorStickerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorStickerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorStickerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorStickerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorStickerSet.Merge(m, src)
}
func (m *AuthorStickerSet) XXX_Size() int {
	return m.Size()
}
func (m *AuthorStickerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorStickerSet.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorStickerSet proto.InternalMessageInfo

func (m *AuthorStickerSet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthorStickerSet) GetStickersetId() int64 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *AuthorStickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AuthorStickerSet) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *AuthorStickerSet) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *AuthorStickerSet) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *AuthorStickerSet) GetOrdered() int32 {
	if m != nil {
		return m.Ordered
	}
	return 0
}

func (m *AuthorStickerSet) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *AuthorStickerSet) GetUpdated() int32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

//获取作者所有sticker
type GetAuthorAllStickerSetReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAuthorAllStickerSetReq) Reset()         { *m = GetAuthorAllStickerSetReq{} }
func (m *GetAuthorAllStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetReq) ProtoMessage()    {}
func (*GetAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{64}
}
func (m *GetAuthorAllStickerSetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuthorAllStickerSetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuthorAllStickerSetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuthorAllStickerSetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuthorAllStickerSetReq.Merge(m, src)
}
func (m *GetAuthorAllStickerSetReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAuthorAllStickerSetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuthorAllStickerSetReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuthorAllStickerSetReq proto.InternalMessageInfo

func (m *GetAuthorAllStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//获取作者所有sticker返回
type GetAuthorAllStickerSetResult struct {
	ErrorCode            ReErrCode           `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=imapigateway.ReErrCode" json:"ErrorCode,omitempty"`
	Sets                 []*AuthorStickerSet `protobuf:"bytes,2,rep,name=sets,proto3" json:"sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetAuthorAllStickerSetResult) Reset()         { *m = GetAuthorAllStickerSetResult{} }
func (m *GetAuthorAllStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetResult) ProtoMessage()    {}
func (*GetAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{65}
}
func (m *GetAuthorAllStickerSetResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuthorAllStickerSetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuthorAllStickerSetResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuthorAllStickerSetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuthorAllStickerSetResult.Merge(m, src)
}
func (m *GetAuthorAllStickerSetResult) XXX_Size() int {
	return m.Size()
}
func (m *GetAuthorAllStickerSetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuthorAllStickerSetResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuthorAllStickerSetResult proto.InternalMessageInfo

func (m *GetAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *GetAuthorAllStickerSetResult) GetSets() []*AuthorStickerSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

//删除单个sticker
type DeleteStickerPackDocumentReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StickersetId         int64    `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteStickerPackDocumentReq) Reset()         { *m = DeleteStickerPackDocumentReq{} }
func (m *DeleteStickerPackDocumentReq) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocumentReq) ProtoMessage()    {}
func (*DeleteStickerPackDocumentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{66}
}
func (m *DeleteStickerPackDocumentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStickerPackDocumentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStickerPackDocumentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStickerPackDocumentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStickerPackDocumentReq.Merge(m, src)
}
func (m *DeleteStickerPackDocumentReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStickerPackDocumentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStickerPackDocumentReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStickerPackDocumentReq proto.InternalMessageInfo

func (m *DeleteStickerPackDocumentReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteStickerPackDocumentReq) GetStickersetId() int64 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

//删除单个sticker返回
type DeleteStickerPackDocumentResult struct {
	Errorcode            ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteStickerPackDocumentResult) Reset()         { *m = DeleteStickerPackDocumentResult{} }
func (m *DeleteStickerPackDocumentResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocumentResult) ProtoMessage()    {}
func (*DeleteStickerPackDocumentResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{67}
}
func (m *DeleteStickerPackDocumentResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStickerPackDocumentResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStickerPackDocumentResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStickerPackDocumentResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStickerPackDocumentResult.Merge(m, src)
}
func (m *DeleteStickerPackDocumentResult) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStickerPackDocumentResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStickerPackDocumentResult.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStickerPackDocumentResult proto.InternalMessageInfo

func (m *DeleteStickerPackDocumentResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//获取指定的sticker集合的请求
type GetStickerSetInfoReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IsId                 bool     `protobuf:"varint,3,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStickerSetInfoReq) Reset()         { *m = GetStickerSetInfoReq{} }
func (m *GetStickerSetInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetInfoReq) ProtoMessage()    {}
func (*GetStickerSetInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{68}
}
func (m *GetStickerSetInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStickerSetInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStickerSetInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStickerSetInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStickerSetInfoReq.Merge(m, src)
}
func (m *GetStickerSetInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStickerSetInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStickerSetInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStickerSetInfoReq proto.InternalMessageInfo

func (m *GetStickerSetInfoReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetStickerSetInfoReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *GetStickerSetInfoReq) GetIsId() bool {
	if m != nil {
		return m.IsId
	}
	return false
}

func (m *GetStickerSetInfoReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//sticker set 的基础信息
type StickerSetInfo struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash           int64    `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free                 bool     `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official             bool     `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks                bool     `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title                string   `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName            string   `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count                int32    `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash                 int64    `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon             string   `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents            []int32  `protobuf:"varint,11,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StickerSetInfo) Reset()         { *m = StickerSetInfo{} }
func (m *StickerSetInfo) String() string { return proto.CompactTextString(m) }
func (*StickerSetInfo) ProtoMessage()    {}
func (*StickerSetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{69}
}
func (m *StickerSetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerSetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerSetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerSetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerSetInfo.Merge(m, src)
}
func (m *StickerSetInfo) XXX_Size() int {
	return m.Size()
}
func (m *StickerSetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerSetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StickerSetInfo proto.InternalMessageInfo

func (m *StickerSetInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerSetInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerSetInfo) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *StickerSetInfo) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StickerSetInfo) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StickerSetInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StickerSetInfo) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StickerSetInfo) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StickerSetInfo) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StickerSetInfo) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StickerSetInfo) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

////获取指定的sticker集合的返回
type GetStickerSetInfoResult struct {
	StickerSetInfo       *StickerSetInfo `protobuf:"bytes,1,opt,name=stickerSetInfo,proto3" json:"stickerSetInfo,omitempty"`
	Errorcode            ReErrCode       `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetStickerSetInfoResult) Reset()         { *m = GetStickerSetInfoResult{} }
func (m *GetStickerSetInfoResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetInfoResult) ProtoMessage()    {}
func (*GetStickerSetInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{70}
}
func (m *GetStickerSetInfoResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStickerSetInfoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStickerSetInfoResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStickerSetInfoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStickerSetInfoResult.Merge(m, src)
}
func (m *GetStickerSetInfoResult) XXX_Size() int {
	return m.Size()
}
func (m *GetStickerSetInfoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStickerSetInfoResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetStickerSetInfoResult proto.InternalMessageInfo

func (m *GetStickerSetInfoResult) GetStickerSetInfo() *StickerSetInfo {
	if m != nil {
		return m.StickerSetInfo
	}
	return nil
}

func (m *GetStickerSetInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//删除sticker商城的请求
type DeleteStickerSetReq struct {
	StickerId            int32    `protobuf:"varint,1,opt,name=stickerId,proto3" json:"stickerId,omitempty"`
	Debug                *Debug   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId               int32    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteStickerSetReq) Reset()         { *m = DeleteStickerSetReq{} }
func (m *DeleteStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerSetReq) ProtoMessage()    {}
func (*DeleteStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{71}
}
func (m *DeleteStickerSetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStickerSetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStickerSetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStickerSetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStickerSetReq.Merge(m, src)
}
func (m *DeleteStickerSetReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStickerSetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStickerSetReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStickerSetReq proto.InternalMessageInfo

func (m *DeleteStickerSetReq) GetStickerId() int32 {
	if m != nil {
		return m.StickerId
	}
	return 0
}

func (m *DeleteStickerSetReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *DeleteStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//删除sticker商城的返回
type DeleteStickerSetResult struct {
	Errorcode            ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteStickerSetResult) Reset()         { *m = DeleteStickerSetResult{} }
func (m *DeleteStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerSetResult) ProtoMessage()    {}
func (*DeleteStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{72}
}
func (m *DeleteStickerSetResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStickerSetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStickerSetResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStickerSetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStickerSetResult.Merge(m, src)
}
func (m *DeleteStickerSetResult) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStickerSetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStickerSetResult.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStickerSetResult proto.InternalMessageInfo

func (m *DeleteStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//用户安装sticker集合的请求
type StoreUserStickerSetReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId         int32    `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed            bool     `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled             bool     `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order                int32    `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Archived             bool     `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Debug                *Debug   `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreUserStickerSetReq) Reset()         { *m = StoreUserStickerSetReq{} }
func (m *StoreUserStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetReq) ProtoMessage()    {}
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{73}
}
func (m *StoreUserStickerSetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreUserStickerSetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreUserStickerSetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreUserStickerSetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreUserStickerSetReq.Merge(m, src)
}
func (m *StoreUserStickerSetReq) XXX_Size() int {
	return m.Size()
}
func (m *StoreUserStickerSetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreUserStickerSetReq.DiscardUnknown(m)
}

var xxx_messageInfo_StoreUserStickerSetReq proto.InternalMessageInfo

func (m *StoreUserStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *StoreUserStickerSetReq) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *StoreUserStickerSetReq) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *StoreUserStickerSetReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//用户安装sticker集合的返回
type StoreUserStickerSetResult struct {
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StoreUserStickerSetResult) Reset()         { *m = StoreUserStickerSetResult{} }
func (m *StoreUserStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetResult) ProtoMessage()    {}
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{74}
}
func (m *StoreUserStickerSetResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreUserStickerSetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreUserStickerSetResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreUserStickerSetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreUserStickerSetResult.Merge(m, src)
}
func (m *StoreUserStickerSetResult) XXX_Size() int {
	return m.Size()
}
func (m *StoreUserStickerSetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreUserStickerSetResult.DiscardUnknown(m)
}

var xxx_messageInfo_StoreUserStickerSetResult proto.InternalMessageInfo

func (m *StoreUserStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//存储sticker文档的请求
type StoreStickerPackDcReq struct {
	Stickpackbase        *StickerPackDocumentBase `protobuf:"bytes,1,opt,name=stickpackbase,proto3" json:"stickpackbase,omitempty"`
	Debug                *Debug                   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *StoreStickerPackDcReq) Reset()         { *m = StoreStickerPackDcReq{} }
func (m *StoreStickerPackDcReq) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcReq) ProtoMessage()    {}
func (*StoreStickerPackDcReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{75}
}
func (m *StoreStickerPackDcReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreStickerPackDcReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreStickerPackDcReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreStickerPackDcReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreStickerPackDcReq.Merge(m, src)
}
func (m *StoreStickerPackDcReq) XXX_Size() int {
	return m.Size()
}
func (m *StoreStickerPackDcReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreStickerPackDcReq.DiscardUnknown(m)
}

var xxx_messageInfo_StoreStickerPackDcReq proto.InternalMessageInfo

func (m *StoreStickerPackDcReq) GetStickpackbase() *StickerPackDocumentBase {
	if m != nil {
		return m.Stickpackbase
	}
	return nil
}

func (m *StoreStickerPackDcReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//存储sticker文档的返回
type StoreStickerPackDcResult struct {
	Id                   int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StoreStickerPackDcResult) Reset()         { *m = StoreStickerPackDcResult{} }
func (m *StoreStickerPackDcResult) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcResult) ProtoMessage()    {}
func (*StoreStickerPackDcResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{76}
}
func (m *StoreStickerPackDcResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreStickerPackDcResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreStickerPackDcResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreStickerPackDcResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreStickerPackDcResult.Merge(m, src)
}
func (m *StoreStickerPackDcResult) XXX_Size() int {
	return m.Size()
}
func (m *StoreStickerPackDcResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreStickerPackDcResult.DiscardUnknown(m)
}

var xxx_messageInfo_StoreStickerPackDcResult proto.InternalMessageInfo

func (m *StoreStickerPackDcResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreStickerPackDcResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//存储sticker 集合概要的请求参数
type StoreShopStickerSetReq struct {
	AccessHash           int64    `protobuf:"varint,1,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free                 bool     `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Official             bool     `protobuf:"varint,3,opt,name=official,proto3" json:"official,omitempty"`
	Masks                bool     `protobuf:"varint,4,opt,name=masks,proto3" json:"masks,omitempty"`
	Title                string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName            string   `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count                int32    `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Hash                 int64    `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon             string   `protobuf:"bytes,9,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents            []int32  `protobuf:"varint,10,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug                *Debug   `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId               int32    `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreShopStickerSetReq) Reset()         { *m = StoreShopStickerSetReq{} }
func (m *StoreShopStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetReq) ProtoMessage()    {}
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{77}
}
func (m *StoreShopStickerSetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreShopStickerSetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreShopStickerSetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreShopStickerSetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreShopStickerSetReq.Merge(m, src)
}
func (m *StoreShopStickerSetReq) XXX_Size() int {
	return m.Size()
}
func (m *StoreShopStickerSetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreShopStickerSetReq.DiscardUnknown(m)
}

var xxx_messageInfo_StoreShopStickerSetReq proto.InternalMessageInfo

func (m *StoreShopStickerSetReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *StoreShopStickerSetReq) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StoreShopStickerSetReq) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StoreShopStickerSetReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//存储sticker 集合概要的返回
type StoreShopStickerSetResult struct {
	Id                   int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StoreShopStickerSetResult) Reset()         { *m = StoreShopStickerSetResult{} }
func (m *StoreShopStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetResult) ProtoMessage()    {}
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{78}
}
func (m *StoreShopStickerSetResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreShopStickerSetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreShopStickerSetResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreShopStickerSetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreShopStickerSetResult.Merge(m, src)
}
func (m *StoreShopStickerSetResult) XXX_Size() int {
	return m.Size()
}
func (m *StoreShopStickerSetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreShopStickerSetResult.DiscardUnknown(m)
}

var xxx_messageInfo_StoreShopStickerSetResult proto.InternalMessageInfo

func (m *StoreShopStickerSetResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreShopStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// ResizeRequest 重设图片大小请求
type ResizeRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Width                uint32   `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResizeRequest) Reset()         { *m = ResizeRequest{} }
func (m *ResizeRequest) String() string { return proto.CompactTextString(m) }
func (*ResizeRequest) ProtoMessage()    {}
func (*ResizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{79}
}
func (m *ResizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizeRequest.Merge(m, src)
}
func (m *ResizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResizeRequest proto.InternalMessageInfo

func (m *ResizeRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ResizeRequest) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ResizeRequest) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// ResizeReply 重设图片大小响应
type ResizeReply struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"`
	Data                 []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ResizeReply) Reset()         { *m = ResizeReply{} }
func (m *ResizeReply) String() string { return proto.CompactTextString(m) }
func (*ResizeReply) ProtoMessage()    {}
func (*ResizeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{80}
}
func (m *ResizeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResizeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResizeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResizeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizeReply.Merge(m, src)
}
func (m *ResizeReply) XXX_Size() int {
	return m.Size()
}
func (m *ResizeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResizeReply proto.InternalMessageInfo

func (m *ResizeReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *ResizeReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ConstraintRequest 约束图片大小请求
type ConstraintRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxSize              uint32   `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	OutputWebp           bool     `protobuf:"varint,3,opt,name=output_webp,json=outputWebp,proto3" json:"output_webp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConstraintRequest) Reset()         { *m = ConstraintRequest{} }
func (m *ConstraintRequest) String() string { return proto.CompactTextString(m) }
func (*ConstraintRequest) ProtoMessage()    {}
func (*ConstraintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{81}
}
func (m *ConstraintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstraintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConstraintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConstraintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstraintRequest.Merge(m, src)
}
func (m *ConstraintRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConstraintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstraintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConstraintRequest proto.InternalMessageInfo

func (m *ConstraintRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConstraintRequest) GetMaxSize() uint32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *ConstraintRequest) GetOutputWebp() bool {
	if m != nil {
		return m.OutputWebp
	}
	return false
}

// ConstraintReply 约束图片大小响应
type ConstraintReply struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"`
	Data                 []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Width                uint32     `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32     `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	OriginWidth          uint32     `protobuf:"varint,5,opt,name=origin_width,json=originWidth,proto3" json:"origin_width,omitempty"`
	OriginHeight         uint32     `protobuf:"varint,6,opt,name=origin_height,json=originHeight,proto3" json:"origin_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConstraintReply) Reset()         { *m = ConstraintReply{} }
func (m *ConstraintReply) String() string { return proto.CompactTextString(m) }
func (*ConstraintReply) ProtoMessage()    {}
func (*ConstraintReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{82}
}
func (m *ConstraintReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstraintReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConstraintReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConstraintReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstraintReply.Merge(m, src)
}
func (m *ConstraintReply) XXX_Size() int {
	return m.Size()
}
func (m *ConstraintReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstraintReply.DiscardUnknown(m)
}

var xxx_messageInfo_ConstraintReply proto.InternalMessageInfo

func (m *ConstraintReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *ConstraintReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConstraintReply) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ConstraintReply) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ConstraintReply) GetOriginWidth() uint32 {
	if m != nil {
		return m.OriginWidth
	}
	return 0
}

func (m *ConstraintReply) GetOriginHeight() uint32 {
	if m != nil {
		return m.OriginHeight
	}
	return 0
}

// CompressImageRequest 压缩图片请求
type CompressImageRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Quality              uint32   `protobuf:"varint,2,opt,name=quality,proto3" json:"quality,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompressImageRequest) Reset()         { *m = CompressImageRequest{} }
func (m *CompressImageRequest) String() string { return proto.CompactTextString(m) }
func (*CompressImageRequest) ProtoMessage()    {}
func (*CompressImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{83}
}
func (m *CompressImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompressImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompressImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompressImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompressImageRequest.Merge(m, src)
}
func (m *CompressImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompressImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompressImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompressImageRequest proto.InternalMessageInfo

func (m *CompressImageRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CompressImageRequest) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

// CompressImageReply 压缩图片响应
type CompressImageReply struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"`
	Data                 []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CompressImageReply) Reset()         { *m = CompressImageReply{} }
func (m *CompressImageReply) String() string { return proto.CompactTextString(m) }
func (*CompressImageReply) ProtoMessage()    {}
func (*CompressImageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{84}
}
func (m *CompressImageReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompressImageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompressImageReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompressImageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompressImageReply.Merge(m, src)
}
func (m *CompressImageReply) XXX_Size() int {
	return m.Size()
}
func (m *CompressImageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CompressImageReply.DiscardUnknown(m)
}

var xxx_messageInfo_CompressImageReply proto.InternalMessageInfo

func (m *CompressImageReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *CompressImageReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// VideoPreviewRequest 获取视频预览请求
type VideoPreviewRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxSize              uint32   `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoPreviewRequest) Reset()         { *m = VideoPreviewRequest{} }
func (m *VideoPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*VideoPreviewRequest) ProtoMessage()    {}
func (*VideoPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{85}
}
func (m *VideoPreviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoPreviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoPreviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoPreviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoPreviewRequest.Merge(m, src)
}
func (m *VideoPreviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *VideoPreviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoPreviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VideoPreviewRequest proto.InternalMessageInfo

func (m *VideoPreviewRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VideoPreviewRequest) GetMaxSize() uint32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

// VideoPreviewReply 获取视频预览响应
type VideoPreviewReply struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"`
	Duration             uint32     `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Preview              []byte     `protobuf:"bytes,3,opt,name=preview,proto3" json:"preview,omitempty"`
	Width                uint32     `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32     `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VideoPreviewReply) Reset()         { *m = VideoPreviewReply{} }
func (m *VideoPreviewReply) String() string { return proto.CompactTextString(m) }
func (*VideoPreviewReply) ProtoMessage()    {}
func (*VideoPreviewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{86}
}
func (m *VideoPreviewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoPreviewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoPreviewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoPreviewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoPreviewReply.Merge(m, src)
}
func (m *VideoPreviewReply) XXX_Size() int {
	return m.Size()
}
func (m *VideoPreviewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoPreviewReply.DiscardUnknown(m)
}

var xxx_messageInfo_VideoPreviewReply proto.InternalMessageInfo

func (m *VideoPreviewReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *VideoPreviewReply) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *VideoPreviewReply) GetPreview() []byte {
	if m != nil {
		return m.Preview
	}
	return nil
}

func (m *VideoPreviewReply) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *VideoPreviewReply) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// AudioPreviewRequest 获取音频预览请求
type AudioPreviewRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxSize              uint32   `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AudioPreviewRequest) Reset()         { *m = AudioPreviewRequest{} }
func (m *AudioPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*AudioPreviewRequest) ProtoMessage()    {}
func (*AudioPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{87}
}
func (m *AudioPreviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioPreviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioPreviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioPreviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioPreviewRequest.Merge(m, src)
}
func (m *AudioPreviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *AudioPreviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioPreviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AudioPreviewRequest proto.InternalMessageInfo

func (m *AudioPreviewRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AudioPreviewRequest) GetMaxSize() uint32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

// AudioPreviewReply 获取音频预览响应
type AudioPreviewReply struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"`
	Duration             uint32     `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Cover                []byte     `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	Title                string     `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Artist               string     `protobuf:"bytes,5,opt,name=artist,proto3" json:"artist,omitempty"`
	Width                uint32     `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32     `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AudioPreviewReply) Reset()         { *m = AudioPreviewReply{} }
func (m *AudioPreviewReply) String() string { return proto.CompactTextString(m) }
func (*AudioPreviewReply) ProtoMessage()    {}
func (*AudioPreviewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{88}
}
func (m *AudioPreviewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioPreviewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioPreviewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioPreviewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioPreviewReply.Merge(m, src)
}
func (m *AudioPreviewReply) XXX_Size() int {
	return m.Size()
}
func (m *AudioPreviewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioPreviewReply.DiscardUnknown(m)
}

var xxx_messageInfo_AudioPreviewReply proto.InternalMessageInfo

func (m *AudioPreviewReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *AudioPreviewReply) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AudioPreviewReply) GetCover() []byte {
	if m != nil {
		return m.Cover
	}
	return nil
}

func (m *AudioPreviewReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AudioPreviewReply) GetArtist() string {
	if m != nil {
		return m.Artist
	}
	return ""
}

func (m *AudioPreviewReply) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *AudioPreviewReply) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

//###################################  pbmessageserver.pb.go  #############################
//获取participants
type ReqParticipants struct {
	OffSet               int32    `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType            int32    `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId            int32    `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId               int32    `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q                    string   `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash                 int32    `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug                *Debug   `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqParticipants) Reset()         { *m = ReqParticipants{} }
func (m *ReqParticipants) String() string { return proto.CompactTextString(m) }
func (*ReqParticipants) ProtoMessage()    {}
func (*ReqParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{89}
}
func (m *ReqParticipants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqParticipants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqParticipants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqParticipants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqParticipants.Merge(m, src)
}
func (m *ReqParticipants) XXX_Size() int {
	return m.Size()
}
func (m *ReqParticipants) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqParticipants.DiscardUnknown(m)
}

var xxx_messageInfo_ReqParticipants proto.InternalMessageInfo

func (m *ReqParticipants) GetOffSet() int32 {
	if m != nil {
		return m.OffSet
	}
	return 0
}

func (m *ReqParticipants) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqParticipants) GetPartiType() int32 {
	if m != nil {
		return m.PartiType
	}
	return 0
}

func (m *ReqParticipants) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqParticipants) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqParticipants) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqParticipants) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *ReqParticipants) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//返回participants
type ReplyParticipants struct {
	Updates              []byte   `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyParticipants) Reset()         { *m = ReplyParticipants{} }
func (m *ReplyParticipants) String() string { return proto.CompactTextString(m) }
func (*ReplyParticipants) ProtoMessage()    {}
func (*ReplyParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{90}
}
func (m *ReplyParticipants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyParticipants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyParticipants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyParticipants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyParticipants.Merge(m, src)
}
func (m *ReplyParticipants) XXX_Size() int {
	return m.Size()
}
func (m *ReplyParticipants) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyParticipants.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyParticipants proto.InternalMessageInfo

func (m *ReplyParticipants) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyParticipants) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqCreateChat struct {
	Chatid               int32    `protobuf:"varint,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Creator              int32    `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Users                []int32  `protobuf:"varint,4,rep,packed,name=users,proto3" json:"users,omitempty"`
	FromKeyid            uint64   `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateChat) Reset()         { *m = ReqCreateChat{} }
func (m *ReqCreateChat) String() string { return proto.CompactTextString(m) }
func (*ReqCreateChat) ProtoMessage()    {}
func (*ReqCreateChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{91}
}
func (m *ReqCreateChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateChat.Merge(m, src)
}
func (m *ReqCreateChat) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateChat.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateChat proto.InternalMessageInfo

func (m *ReqCreateChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqCreateChat) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqCreateChat) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ReqCreateChat) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ReqCreateChat) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqCreateChat) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyCreateChat struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyCreateChat) Reset()         { *m = ReplyCreateChat{} }
func (m *ReplyCreateChat) String() string { return proto.CompactTextString(m) }
func (*ReplyCreateChat) ProtoMessage()    {}
func (*ReplyCreateChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{92}
}
func (m *ReplyCreateChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyCreateChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyCreateChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyCreateChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyCreateChat.Merge(m, src)
}
func (m *ReplyCreateChat) XXX_Size() int {
	return m.Size()
}
func (m *ReplyCreateChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyCreateChat.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyCreateChat proto.InternalMessageInfo

func (m *ReplyCreateChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyCreateChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReqMigrateChat struct {
	Fromid int32 `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid int32 `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	//    int32 channelid = 3; //升级后的超级群ID
	//    string title = 4; // 群标题
	//    repeated int32 members = 5; //现有用户
	//    string Phone = 6; //电话
	Fromkeyid uint64 `protobuf:"varint,3,opt,name=fromkeyid,proto3" json:"fromkeyid,omitempty"`
	//    bool isBroadCast = 8; //超级群还是频道
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqMigrateChat) Reset()         { *m = ReqMigrateChat{} }
func (m *ReqMigrateChat) String() string { return proto.CompactTextString(m) }
func (*ReqMigrateChat) ProtoMessage()    {}
func (*ReqMigrateChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{93}
}
func (m *ReqMigrateChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqMigrateChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqMigrateChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqMigrateChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqMigrateChat.Merge(m, src)
}
func (m *ReqMigrateChat) XXX_Size() int {
	return m.Size()
}
func (m *ReqMigrateChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqMigrateChat.DiscardUnknown(m)
}

var xxx_messageInfo_ReqMigrateChat proto.InternalMessageInfo

func (m *ReqMigrateChat) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqMigrateChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqMigrateChat) GetFromkeyid() uint64 {
	if m != nil {
		return m.Fromkeyid
	}
	return 0
}

func (m *ReqMigrateChat) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyMigrateChat struct {
	//    int32 msgid = 1; // 消息id
	//    int64 randomid = 2; // 消息随机id
	//    int32 date = 3; // 消息时间
	//    int32 pts = 4; // 消息pts
	//    int32 channelmsgid = 5; //频道的消息ID
	//    int32 channelpts = 6; //频道的PTS
	Result               []byte   `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,8,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyMigrateChat) Reset()         { *m = ReplyMigrateChat{} }
func (m *ReplyMigrateChat) String() string { return proto.CompactTextString(m) }
func (*ReplyMigrateChat) ProtoMessage()    {}
func (*ReplyMigrateChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{94}
}
func (m *ReplyMigrateChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyMigrateChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyMigrateChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyMigrateChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyMigrateChat.Merge(m, src)
}
func (m *ReplyMigrateChat) XXX_Size() int {
	return m.Size()
}
func (m *ReplyMigrateChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyMigrateChat.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyMigrateChat proto.InternalMessageInfo

func (m *ReplyMigrateChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyMigrateChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

//邀请用户进入超级群
type ReqJoinChannel struct {
	ChannelId            int32    `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId               int32    `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid            int64    `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash           int64    `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	ByLink               bool     `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`
	Invitor              int32    `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	InviteType           int32    `protobuf:"varint,9,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"`
	Debug                *Debug   `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqJoinChannel) Reset()         { *m = ReqJoinChannel{} }
func (m *ReqJoinChannel) String() string { return proto.CompactTextString(m) }
func (*ReqJoinChannel) ProtoMessage()    {}
func (*ReqJoinChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{95}
}
func (m *ReqJoinChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqJoinChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqJoinChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqJoinChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqJoinChannel.Merge(m, src)
}
func (m *ReqJoinChannel) XXX_Size() int {
	return m.Size()
}
func (m *ReqJoinChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqJoinChannel.DiscardUnknown(m)
}

var xxx_messageInfo_ReqJoinChannel proto.InternalMessageInfo

func (m *ReqJoinChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqJoinChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqJoinChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqJoinChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqJoinChannel) GetByLink() bool {
	if m != nil {
		return m.ByLink
	}
	return false
}

func (m *ReqJoinChannel) GetInvitor() int32 {
	if m != nil {
		return m.Invitor
	}
	return 0
}

func (m *ReqJoinChannel) GetInviteType() int32 {
	if m != nil {
		return m.InviteType
	}
	return 0
}

func (m *ReqJoinChannel) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//邀请操作的ACK
type ReplyJoinChannel struct {
	Reply                []byte   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyJoinChannel) Reset()         { *m = ReplyJoinChannel{} }
func (m *ReplyJoinChannel) String() string { return proto.CompactTextString(m) }
func (*ReplyJoinChannel) ProtoMessage()    {}
func (*ReplyJoinChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{96}
}
func (m *ReplyJoinChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyJoinChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyJoinChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyJoinChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyJoinChannel.Merge(m, src)
}
func (m *ReplyJoinChannel) XXX_Size() int {
	return m.Size()
}
func (m *ReplyJoinChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyJoinChannel.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyJoinChannel proto.InternalMessageInfo

func (m *ReplyJoinChannel) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyJoinChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//转移群主
type ReqChangeGroupAndChannelCrator struct {
	GroupId              int32    `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	FromId               int32    `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	OperatorId           int32    `protobuf:"varint,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	IsChat               bool     `protobuf:"varint,4,opt,name=IsChat,proto3" json:"IsChat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqChangeGroupAndChannelCrator) Reset()         { *m = ReqChangeGroupAndChannelCrator{} }
func (m *ReqChangeGroupAndChannelCrator) String() string { return proto.CompactTextString(m) }
func (*ReqChangeGroupAndChannelCrator) ProtoMessage()    {}
func (*ReqChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{97}
}
func (m *ReqChangeGroupAndChannelCrator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqChangeGroupAndChannelCrator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqChangeGroupAndChannelCrator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqChangeGroupAndChannelCrator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChangeGroupAndChannelCrator.Merge(m, src)
}
func (m *ReqChangeGroupAndChannelCrator) XXX_Size() int {
	return m.Size()
}
func (m *ReqChangeGroupAndChannelCrator) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChangeGroupAndChannelCrator.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChangeGroupAndChannelCrator proto.InternalMessageInfo

func (m *ReqChangeGroupAndChannelCrator) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetIsChat() bool {
	if m != nil {
		return m.IsChat
	}
	return false
}

//回复转移群主
type ReplyChangeGroupAndChannelCrator struct {
	Valid                bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyChangeGroupAndChannelCrator) Reset()         { *m = ReplyChangeGroupAndChannelCrator{} }
func (m *ReplyChangeGroupAndChannelCrator) String() string { return proto.CompactTextString(m) }
func (*ReplyChangeGroupAndChannelCrator) ProtoMessage()    {}
func (*ReplyChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{98}
}
func (m *ReplyChangeGroupAndChannelCrator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyChangeGroupAndChannelCrator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyChangeGroupAndChannelCrator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyChangeGroupAndChannelCrator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyChangeGroupAndChannelCrator.Merge(m, src)
}
func (m *ReplyChangeGroupAndChannelCrator) XXX_Size() int {
	return m.Size()
}
func (m *ReplyChangeGroupAndChannelCrator) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyChangeGroupAndChannelCrator.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyChangeGroupAndChannelCrator proto.InternalMessageInfo

func (m *ReplyChangeGroupAndChannelCrator) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ReplyChangeGroupAndChannelCrator) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 机器人调用接口
type ReqBotCallMessageMedia struct {
	FromBotId            int32    `protobuf:"varint,1,opt,name=fromBotId,proto3" json:"fromBotId,omitempty"`
	MsgTxt               string   `protobuf:"bytes,2,opt,name=MsgTxt,proto3" json:"MsgTxt,omitempty"`
	Request              []byte   `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Layer                int32    `protobuf:"varint,4,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug                *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBotCallMessageMedia) Reset()         { *m = ReqBotCallMessageMedia{} }
func (m *ReqBotCallMessageMedia) String() string { return proto.CompactTextString(m) }
func (*ReqBotCallMessageMedia) ProtoMessage()    {}
func (*ReqBotCallMessageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{99}
}
func (m *ReqBotCallMessageMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBotCallMessageMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBotCallMessageMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBotCallMessageMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBotCallMessageMedia.Merge(m, src)
}
func (m *ReqBotCallMessageMedia) XXX_Size() int {
	return m.Size()
}
func (m *ReqBotCallMessageMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBotCallMessageMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBotCallMessageMedia proto.InternalMessageInfo

func (m *ReqBotCallMessageMedia) GetFromBotId() int32 {
	if m != nil {
		return m.FromBotId
	}
	return 0
}

func (m *ReqBotCallMessageMedia) GetMsgTxt() string {
	if m != nil {
		return m.MsgTxt
	}
	return ""
}

func (m *ReqBotCallMessageMedia) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ReqBotCallMessageMedia) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqBotCallMessageMedia) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取dialog接口
type RequestDialog struct {
	Userid               int32    `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Flags                int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	OffsetDate           int32    `protobuf:"varint,3,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId             int32    `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer           []byte   `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit                int32    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug                *Debug   `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestDialog) Reset()         { *m = RequestDialog{} }
func (m *RequestDialog) String() string { return proto.CompactTextString(m) }
func (*RequestDialog) ProtoMessage()    {}
func (*RequestDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{100}
}
func (m *RequestDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDialog.Merge(m, src)
}
func (m *RequestDialog) XXX_Size() int {
	return m.Size()
}
func (m *RequestDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDialog.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDialog proto.InternalMessageInfo

func (m *RequestDialog) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *RequestDialog) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *RequestDialog) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *RequestDialog) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *RequestDialog) GetOffsetPeer() []byte {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *RequestDialog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestDialog) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回dialog
type ReplyDialog struct {
	//    repeated DialogSlice dialog = 1;
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyDialog) Reset()         { *m = ReplyDialog{} }
func (m *ReplyDialog) String() string { return proto.CompactTextString(m) }
func (*ReplyDialog) ProtoMessage()    {}
func (*ReplyDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{101}
}
func (m *ReplyDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyDialog.Merge(m, src)
}
func (m *ReplyDialog) XXX_Size() int {
	return m.Size()
}
func (m *ReplyDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyDialog.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyDialog proto.InternalMessageInfo

func (m *ReplyDialog) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDialog) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 用户分数
type UserScore struct {
	Userid               int32    `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserScore) Reset()         { *m = UserScore{} }
func (m *UserScore) String() string { return proto.CompactTextString(m) }
func (*UserScore) ProtoMessage()    {}
func (*UserScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{102}
}
func (m *UserScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserScore.Merge(m, src)
}
func (m *UserScore) XXX_Size() int {
	return m.Size()
}
func (m *UserScore) XXX_DiscardUnknown() {
	xxx_messageInfo_UserScore.DiscardUnknown(m)
}

var xxx_messageInfo_UserScore proto.InternalMessageInfo

func (m *UserScore) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UserScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// 调用设置分数
type ReqSetGameScore struct {
	Userid               int32        `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Scores               []*UserScore `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	Force                bool         `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	DisableEditMessage   bool         `protobuf:"varint,4,opt,name=disable_edit_message,json=disableEditMessage,proto3" json:"disable_edit_message,omitempty"`
	ChatId               int32        `protobuf:"varint,5,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ChatType             int32        `protobuf:"varint,6,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	MessageId            int32        `protobuf:"varint,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	InlineMessageId      string       `protobuf:"bytes,8,opt,name=inline_message_id,json=inlineMessageId,proto3" json:"inline_message_id,omitempty"`
	Botid                int32        `protobuf:"varint,9,opt,name=botid,proto3" json:"botid,omitempty"`
	Debug                *Debug       `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqSetGameScore) Reset()         { *m = ReqSetGameScore{} }
func (m *ReqSetGameScore) String() string { return proto.CompactTextString(m) }
func (*ReqSetGameScore) ProtoMessage()    {}
func (*ReqSetGameScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{103}
}
func (m *ReqSetGameScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSetGameScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSetGameScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSetGameScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSetGameScore.Merge(m, src)
}
func (m *ReqSetGameScore) XXX_Size() int {
	return m.Size()
}
func (m *ReqSetGameScore) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSetGameScore.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSetGameScore proto.InternalMessageInfo

func (m *ReqSetGameScore) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqSetGameScore) GetScores() []*UserScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *ReqSetGameScore) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ReqSetGameScore) GetDisableEditMessage() bool {
	if m != nil {
		return m.DisableEditMessage
	}
	return false
}

func (m *ReqSetGameScore) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqSetGameScore) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *ReqSetGameScore) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ReqSetGameScore) GetInlineMessageId() string {
	if m != nil {
		return m.InlineMessageId
	}
	return ""
}

func (m *ReqSetGameScore) GetBotid() int32 {
	if m != nil {
		return m.Botid
	}
	return 0
}

func (m *ReqSetGameScore) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置分数返回
type ReplySetGameScore struct {
	Succeed              bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Errorcode            int32    `protobuf:"varint,3,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplySetGameScore) Reset()         { *m = ReplySetGameScore{} }
func (m *ReplySetGameScore) String() string { return proto.CompactTextString(m) }
func (*ReplySetGameScore) ProtoMessage()    {}
func (*ReplySetGameScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{104}
}
func (m *ReplySetGameScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplySetGameScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplySetGameScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplySetGameScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplySetGameScore.Merge(m, src)
}
func (m *ReplySetGameScore) XXX_Size() int {
	return m.Size()
}
func (m *ReplySetGameScore) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplySetGameScore.DiscardUnknown(m)
}

var xxx_messageInfo_ReplySetGameScore proto.InternalMessageInfo

func (m *ReplySetGameScore) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *ReplySetGameScore) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ReplySetGameScore) GetErrorcode() int32 {
	if m != nil {
		return m.Errorcode
	}
	return 0
}

type ReplyBanChannelUser struct {
	Updates              []byte   `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyBanChannelUser) Reset()         { *m = ReplyBanChannelUser{} }
func (m *ReplyBanChannelUser) String() string { return proto.CompactTextString(m) }
func (*ReplyBanChannelUser) ProtoMessage()    {}
func (*ReplyBanChannelUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{105}
}
func (m *ReplyBanChannelUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyBanChannelUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyBanChannelUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyBanChannelUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyBanChannelUser.Merge(m, src)
}
func (m *ReplyBanChannelUser) XXX_Size() int {
	return m.Size()
}
func (m *ReplyBanChannelUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyBanChannelUser.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyBanChannelUser proto.InternalMessageInfo

func (m *ReplyBanChannelUser) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyBanChannelUser) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqBanChannelUser struct {
	FromId               int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId            int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId            int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId         int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash           int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate             int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights  *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights,proto3" json:"channelBannedRights,omitempty"`
	Debug                *Debug               `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReqBanChannelUser) Reset()         { *m = ReqBanChannelUser{} }
func (m *ReqBanChannelUser) String() string { return proto.CompactTextString(m) }
func (*ReqBanChannelUser) ProtoMessage()    {}
func (*ReqBanChannelUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{106}
}
func (m *ReqBanChannelUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBanChannelUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBanChannelUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBanChannelUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBanChannelUser.Merge(m, src)
}
func (m *ReqBanChannelUser) XXX_Size() int {
	return m.Size()
}
func (m *ReqBanChannelUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBanChannelUser.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBanChannelUser proto.InternalMessageInfo

func (m *ReqBanChannelUser) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqBanChannelUser) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqBanChannelUser) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqBanChannelUser) GetBannedUserId() int32 {
	if m != nil {
		return m.BannedUserId
	}
	return 0
}

func (m *ReqBanChannelUser) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqBanChannelUser) GetUtilDate() int32 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

func (m *ReqBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if m != nil {
		return m.ChannelBannedRights
	}
	return nil
}

func (m *ReqBanChannelUser) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelBannedRights struct {
	Flags                int32    `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages         bool     `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages         bool     `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia            bool     `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers         bool     `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs             bool     `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames            bool     `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline           bool     `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks           bool     `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate            int32    `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelBannedRights) Reset()         { *m = ChannelBannedRights{} }
func (m *ChannelBannedRights) String() string { return proto.CompactTextString(m) }
func (*ChannelBannedRights) ProtoMessage()    {}
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{107}
}
func (m *ChannelBannedRights) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelBannedRights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelBannedRights.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelBannedRights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelBannedRights.Merge(m, src)
}
func (m *ChannelBannedRights) XXX_Size() int {
	return m.Size()
}
func (m *ChannelBannedRights) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelBannedRights.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelBannedRights proto.InternalMessageInfo

func (m *ChannelBannedRights) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChannelBannedRights) GetViewMessages() bool {
	if m != nil {
		return m.ViewMessages
	}
	return false
}

func (m *ChannelBannedRights) GetSendMessages() bool {
	if m != nil {
		return m.SendMessages
	}
	return false
}

func (m *ChannelBannedRights) GetSendMedia() bool {
	if m != nil {
		return m.SendMedia
	}
	return false
}

func (m *ChannelBannedRights) GetSendStickers() bool {
	if m != nil {
		return m.SendStickers
	}
	return false
}

func (m *ChannelBannedRights) GetSendGifs() bool {
	if m != nil {
		return m.SendGifs
	}
	return false
}

func (m *ChannelBannedRights) GetSendGames() bool {
	if m != nil {
		return m.SendGames
	}
	return false
}

func (m *ChannelBannedRights) GetSendInline() bool {
	if m != nil {
		return m.SendInline
	}
	return false
}

func (m *ChannelBannedRights) GetEmbedLinks() bool {
	if m != nil {
		return m.EmbedLinks
	}
	return false
}

func (m *ChannelBannedRights) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

//请求给定channel
type ReqGetChannels struct {
	ChannelIds           []int32  `protobuf:"varint,1,rep,packed,name=channelIds,proto3" json:"channelIds,omitempty"`
	FromId               int32    `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetChannels) Reset()         { *m = ReqGetChannels{} }
func (m *ReqGetChannels) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannels) ProtoMessage()    {}
func (*ReqGetChannels) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{108}
}
func (m *ReqGetChannels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetChannels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetChannels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetChannels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetChannels.Merge(m, src)
}
func (m *ReqGetChannels) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetChannels) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetChannels.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetChannels proto.InternalMessageInfo

func (m *ReqGetChannels) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *ReqGetChannels) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannels) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//返回get channles
type ReplyGetChannels struct {
	Reply                []byte   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetChannels) Reset()         { *m = ReplyGetChannels{} }
func (m *ReplyGetChannels) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannels) ProtoMessage()    {}
func (*ReplyGetChannels) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{109}
}
func (m *ReplyGetChannels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyGetChannels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyGetChannels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyGetChannels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetChannels.Merge(m, src)
}
func (m *ReplyGetChannels) XXX_Size() int {
	return m.Size()
}
func (m *ReplyGetChannels) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetChannels.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetChannels proto.InternalMessageInfo

func (m *ReplyGetChannels) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyGetChannels) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqDeleteChatUser struct {
	Fromid               int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid               int32    `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Userid               int32    `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	FromKeyid            uint64   `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqDeleteChatUser) Reset()         { *m = ReqDeleteChatUser{} }
func (m *ReqDeleteChatUser) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChatUser) ProtoMessage()    {}
func (*ReqDeleteChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{110}
}
func (m *ReqDeleteChatUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqDeleteChatUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqDeleteChatUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqDeleteChatUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqDeleteChatUser.Merge(m, src)
}
func (m *ReqDeleteChatUser) XXX_Size() int {
	return m.Size()
}
func (m *ReqDeleteChatUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqDeleteChatUser.DiscardUnknown(m)
}

var xxx_messageInfo_ReqDeleteChatUser proto.InternalMessageInfo

func (m *ReqDeleteChatUser) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteChatUser struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyDeleteChatUser) Reset()         { *m = ReplyDeleteChatUser{} }
func (m *ReplyDeleteChatUser) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChatUser) ProtoMessage()    {}
func (*ReplyDeleteChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{111}
}
func (m *ReplyDeleteChatUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyDeleteChatUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyDeleteChatUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyDeleteChatUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyDeleteChatUser.Merge(m, src)
}
func (m *ReplyDeleteChatUser) XXX_Size() int {
	return m.Size()
}
func (m *ReplyDeleteChatUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyDeleteChatUser.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyDeleteChatUser proto.InternalMessageInfo

func (m *ReplyDeleteChatUser) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDeleteChatUser) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ChannelInactiveUser struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Time                 int32    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	TimeStr              string   `protobuf:"bytes,4,opt,name=timeStr,proto3" json:"timeStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelInactiveUser) Reset()         { *m = ChannelInactiveUser{} }
func (m *ChannelInactiveUser) String() string { return proto.CompactTextString(m) }
func (*ChannelInactiveUser) ProtoMessage()    {}
func (*ChannelInactiveUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{112}
}
func (m *ChannelInactiveUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelInactiveUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelInactiveUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelInactiveUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInactiveUser.Merge(m, src)
}
func (m *ChannelInactiveUser) XXX_Size() int {
	return m.Size()
}
func (m *ChannelInactiveUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInactiveUser.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInactiveUser proto.InternalMessageInfo

func (m *ChannelInactiveUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelInactiveUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelInactiveUser) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ChannelInactiveUser) GetTimeStr() string {
	if m != nil {
		return m.TimeStr
	}
	return ""
}

type GetChannelInactiveUsersReq struct {
	ChannelId            int32    `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Userid               int32    `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChannelInactiveUsersReq) Reset()         { *m = GetChannelInactiveUsersReq{} }
func (m *GetChannelInactiveUsersReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelInactiveUsersReq) ProtoMessage()    {}
func (*GetChannelInactiveUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{113}
}
func (m *GetChannelInactiveUsersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelInactiveUsersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelInactiveUsersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChannelInactiveUsersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelInactiveUsersReq.Merge(m, src)
}
func (m *GetChannelInactiveUsersReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelInactiveUsersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelInactiveUsersReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelInactiveUsersReq proto.InternalMessageInfo

func (m *GetChannelInactiveUsersReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelInactiveUsersReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetChannelInactiveUsersReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

type GetChannelInactiveUsersResult struct {
	Users                []*ChannelInactiveUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Count                int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Errcode              int32                  `protobuf:"varint,3,opt,name=errcode,proto3" json:"errcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetChannelInactiveUsersResult) Reset()         { *m = GetChannelInactiveUsersResult{} }
func (m *GetChannelInactiveUsersResult) String() string { return proto.CompactTextString(m) }
func (*GetChannelInactiveUsersResult) ProtoMessage()    {}
func (*GetChannelInactiveUsersResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{114}
}
func (m *GetChannelInactiveUsersResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelInactiveUsersResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelInactiveUsersResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChannelInactiveUsersResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelInactiveUsersResult.Merge(m, src)
}
func (m *GetChannelInactiveUsersResult) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelInactiveUsersResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelInactiveUsersResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelInactiveUsersResult proto.InternalMessageInfo

func (m *GetChannelInactiveUsersResult) GetUsers() []*ChannelInactiveUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetChannelInactiveUsersResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetChannelInactiveUsersResult) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

// 机器人调用接口-Inline
type ReqBotInlineCall struct {
	Debug                *Debug   `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotId                int32    `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	MessageId            uint64   `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId                uint64   `protobuf:"varint,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SessionId            uint64   `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Data                 []byte   `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Id                   string   `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBotInlineCall) Reset()         { *m = ReqBotInlineCall{} }
func (m *ReqBotInlineCall) String() string { return proto.CompactTextString(m) }
func (*ReqBotInlineCall) ProtoMessage()    {}
func (*ReqBotInlineCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{115}
}
func (m *ReqBotInlineCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBotInlineCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBotInlineCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBotInlineCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBotInlineCall.Merge(m, src)
}
func (m *ReqBotInlineCall) XXX_Size() int {
	return m.Size()
}
func (m *ReqBotInlineCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBotInlineCall.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBotInlineCall proto.InternalMessageInfo

func (m *ReqBotInlineCall) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqBotInlineCall) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqBotInlineCall) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *ReqBotInlineCall) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ReqBotInlineCall) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqBotInlineCall) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ReqBotInlineCall) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqBotInlineCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// 机器人返回接口-Inline
type ReplyBotInlineCall struct {
	ErrCode              int32       `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	Message              string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Inlinecall           *InlineCall `protobuf:"bytes,3,opt,name=inlinecall,proto3" json:"inlinecall,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReplyBotInlineCall) Reset()         { *m = ReplyBotInlineCall{} }
func (m *ReplyBotInlineCall) String() string { return proto.CompactTextString(m) }
func (*ReplyBotInlineCall) ProtoMessage()    {}
func (*ReplyBotInlineCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{116}
}
func (m *ReplyBotInlineCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyBotInlineCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyBotInlineCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyBotInlineCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyBotInlineCall.Merge(m, src)
}
func (m *ReplyBotInlineCall) XXX_Size() int {
	return m.Size()
}
func (m *ReplyBotInlineCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyBotInlineCall.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyBotInlineCall proto.InternalMessageInfo

func (m *ReplyBotInlineCall) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyBotInlineCall) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplyBotInlineCall) GetInlinecall() *InlineCall {
	if m != nil {
		return m.Inlinecall
	}
	return nil
}

type InlineCall struct {
	MsgId                int32    `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	FromId               int32    `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	ChatId               int32    `protobuf:"varint,3,opt,name=ChatId,proto3" json:"ChatId,omitempty"`
	ChatType             int32    `protobuf:"varint,4,opt,name=ChatType,proto3" json:"ChatType,omitempty"`
	BotId                int32    `protobuf:"varint,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InlineCall) Reset()         { *m = InlineCall{} }
func (m *InlineCall) String() string { return proto.CompactTextString(m) }
func (*InlineCall) ProtoMessage()    {}
func (*InlineCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{117}
}
func (m *InlineCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InlineCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InlineCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineCall.Merge(m, src)
}
func (m *InlineCall) XXX_Size() int {
	return m.Size()
}
func (m *InlineCall) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineCall.DiscardUnknown(m)
}

var xxx_messageInfo_InlineCall proto.InternalMessageInfo

func (m *InlineCall) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *InlineCall) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *InlineCall) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *InlineCall) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *InlineCall) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

// 发送给对方所有端
type ReqSendUserMsg struct {
	Fromid               int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyId            int64    `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Toid                 int32    `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Debug                *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSendUserMsg) Reset()         { *m = ReqSendUserMsg{} }
func (m *ReqSendUserMsg) String() string { return proto.CompactTextString(m) }
func (*ReqSendUserMsg) ProtoMessage()    {}
func (*ReqSendUserMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{118}
}
func (m *ReqSendUserMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSendUserMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSendUserMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSendUserMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSendUserMsg.Merge(m, src)
}
func (m *ReqSendUserMsg) XXX_Size() int {
	return m.Size()
}
func (m *ReqSendUserMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSendUserMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSendUserMsg proto.InternalMessageInfo

func (m *ReqSendUserMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendUserMsg) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqSendUserMsg) GetToid() int32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *ReqSendUserMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqSendUserMsg) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 置顶对话框返回
type ReplyBool struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyBool) Reset()         { *m = ReplyBool{} }
func (m *ReplyBool) String() string { return proto.CompactTextString(m) }
func (*ReplyBool) ProtoMessage()    {}
func (*ReplyBool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{119}
}
func (m *ReplyBool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyBool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyBool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyBool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyBool.Merge(m, src)
}
func (m *ReplyBool) XXX_Size() int {
	return m.Size()
}
func (m *ReplyBool) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyBool.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyBool proto.InternalMessageInfo

func (m *ReplyBool) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ReplyBool) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 机器人调用接口
type ReqBotCall struct {
	FrombotId            int32    `protobuf:"varint,1,opt,name=frombotId,proto3" json:"frombotId,omitempty"`
	Request              []byte   `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Layer                int32    `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBotCall) Reset()         { *m = ReqBotCall{} }
func (m *ReqBotCall) String() string { return proto.CompactTextString(m) }
func (*ReqBotCall) ProtoMessage()    {}
func (*ReqBotCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{120}
}
func (m *ReqBotCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBotCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBotCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBotCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBotCall.Merge(m, src)
}
func (m *ReqBotCall) XXX_Size() int {
	return m.Size()
}
func (m *ReqBotCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBotCall.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBotCall proto.InternalMessageInfo

func (m *ReqBotCall) GetFrombotId() int32 {
	if m != nil {
		return m.FrombotId
	}
	return 0
}

func (m *ReqBotCall) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ReqBotCall) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqBotCall) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 机器人返回接口
type ReplyBotCall struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyBotCall) Reset()         { *m = ReplyBotCall{} }
func (m *ReplyBotCall) String() string { return proto.CompactTextString(m) }
func (*ReplyBotCall) ProtoMessage()    {}
func (*ReplyBotCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{121}
}
func (m *ReplyBotCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyBotCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyBotCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyBotCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyBotCall.Merge(m, src)
}
func (m *ReplyBotCall) XXX_Size() int {
	return m.Size()
}
func (m *ReplyBotCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyBotCall.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyBotCall proto.InternalMessageInfo

func (m *ReplyBotCall) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyBotCall) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReqGetMessageByUserIdUuid struct {
	UserId               int32    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Uuid                 int64    `protobuf:"varint,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetMessageByUserIdUuid) Reset()         { *m = ReqGetMessageByUserIdUuid{} }
func (m *ReqGetMessageByUserIdUuid) String() string { return proto.CompactTextString(m) }
func (*ReqGetMessageByUserIdUuid) ProtoMessage()    {}
func (*ReqGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{122}
}
func (m *ReqGetMessageByUserIdUuid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetMessageByUserIdUuid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetMessageByUserIdUuid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetMessageByUserIdUuid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetMessageByUserIdUuid.Merge(m, src)
}
func (m *ReqGetMessageByUserIdUuid) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetMessageByUserIdUuid) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetMessageByUserIdUuid.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetMessageByUserIdUuid proto.InternalMessageInfo

func (m *ReqGetMessageByUserIdUuid) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetMessageByUserIdUuid) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *ReqGetMessageByUserIdUuid) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdUuid struct {
	UserMessage          *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetMessageByUserIdUuid) Reset()         { *m = ReplyGetMessageByUserIdUuid{} }
func (m *ReplyGetMessageByUserIdUuid) String() string { return proto.CompactTextString(m) }
func (*ReplyGetMessageByUserIdUuid) ProtoMessage()    {}
func (*ReplyGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{123}
}
func (m *ReplyGetMessageByUserIdUuid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyGetMessageByUserIdUuid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyGetMessageByUserIdUuid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyGetMessageByUserIdUuid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetMessageByUserIdUuid.Merge(m, src)
}
func (m *ReplyGetMessageByUserIdUuid) XXX_Size() int {
	return m.Size()
}
func (m *ReplyGetMessageByUserIdUuid) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetMessageByUserIdUuid.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetMessageByUserIdUuid proto.InternalMessageInfo

func (m *ReplyGetMessageByUserIdUuid) GetUserMessage() *UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetMessageByUserIdUuid) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetChannelMessageByChannelIdMsgId struct {
	ChannelId            int32    `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId                int32    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Reset()         { *m = ReqGetChannelMessageByChannelIdMsgId{} }
func (m *ReqGetChannelMessageByChannelIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessageByChannelIdMsgId) ProtoMessage()    {}
func (*ReqGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{124}
}
func (m *ReqGetChannelMessageByChannelIdMsgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetChannelMessageByChannelIdMsgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetChannelMessageByChannelIdMsgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetChannelMessageByChannelIdMsgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetChannelMessageByChannelIdMsgId.Merge(m, src)
}
func (m *ReqGetChannelMessageByChannelIdMsgId) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetChannelMessageByChannelIdMsgId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetChannelMessageByChannelIdMsgId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetChannelMessageByChannelIdMsgId proto.InternalMessageInfo

func (m *ReqGetChannelMessageByChannelIdMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMessageByChannelIdMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetChannelMessageByChannelIdMsgId) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMessageByChannelIdMsgId struct {
	UserMessage          *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Reset() {
	*m = ReplyGetChannelMessageByChannelIdMsgId{}
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMessageByChannelIdMsgId) ProtoMessage()    {}
func (*ReplyGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{125}
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyGetChannelMessageByChannelIdMsgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetChannelMessageByChannelIdMsgId.Merge(m, src)
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) XXX_Size() int {
	return m.Size()
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetChannelMessageByChannelIdMsgId.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetChannelMessageByChannelIdMsgId proto.InternalMessageInfo

func (m *ReplyGetChannelMessageByChannelIdMsgId) GetUserMessage() *UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetMessageByUserIdMsgId struct {
	UserId               int32    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId                int32    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetMessageByUserIdMsgId) Reset()         { *m = ReqGetMessageByUserIdMsgId{} }
func (m *ReqGetMessageByUserIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqGetMessageByUserIdMsgId) ProtoMessage()    {}
func (*ReqGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{126}
}
func (m *ReqGetMessageByUserIdMsgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetMessageByUserIdMsgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetMessageByUserIdMsgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetMessageByUserIdMsgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetMessageByUserIdMsgId.Merge(m, src)
}
func (m *ReqGetMessageByUserIdMsgId) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetMessageByUserIdMsgId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetMessageByUserIdMsgId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetMessageByUserIdMsgId proto.InternalMessageInfo

func (m *ReqGetMessageByUserIdMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetMessageByUserIdMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetMessageByUserIdMsgId) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdMsgId struct {
	UserMessage          *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetMessageByUserIdMsgId) Reset()         { *m = ReplyGetMessageByUserIdMsgId{} }
func (m *ReplyGetMessageByUserIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetMessageByUserIdMsgId) ProtoMessage()    {}
func (*ReplyGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{127}
}
func (m *ReplyGetMessageByUserIdMsgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyGetMessageByUserIdMsgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyGetMessageByUserIdMsgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyGetMessageByUserIdMsgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetMessageByUserIdMsgId.Merge(m, src)
}
func (m *ReplyGetMessageByUserIdMsgId) XXX_Size() int {
	return m.Size()
}
func (m *ReplyGetMessageByUserIdMsgId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetMessageByUserIdMsgId.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetMessageByUserIdMsgId proto.InternalMessageInfo

func (m *ReplyGetMessageByUserIdMsgId) GetUserMessage() *UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetMessageByUserIdMsgId) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//###################################  storage_proto.pb.go  #############################
// 网关上传文件描述信息请求
type MsgFileDescReq struct {
	Fid                  uint64   `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash           uint64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgFileDescReq) Reset()         { *m = MsgFileDescReq{} }
func (m *MsgFileDescReq) String() string { return proto.CompactTextString(m) }
func (*MsgFileDescReq) ProtoMessage()    {}
func (*MsgFileDescReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{128}
}
func (m *MsgFileDescReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFileDescReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFileDescReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFileDescReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFileDescReq.Merge(m, src)
}
func (m *MsgFileDescReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgFileDescReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFileDescReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFileDescReq proto.InternalMessageInfo

func (m *MsgFileDescReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *MsgFileDescReq) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *MsgFileDescReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 网关上传文件描述信息响应
type MsgFileDescResp struct {
	Result               ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MsgFileDescResp) Reset()         { *m = MsgFileDescResp{} }
func (m *MsgFileDescResp) String() string { return proto.CompactTextString(m) }
func (*MsgFileDescResp) ProtoMessage()    {}
func (*MsgFileDescResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{129}
}
func (m *MsgFileDescResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFileDescResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFileDescResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFileDescResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFileDescResp.Merge(m, src)
}
func (m *MsgFileDescResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgFileDescResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFileDescResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFileDescResp proto.InternalMessageInfo

func (m *MsgFileDescResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

// 服务上传下载限制请求
type MsgServiceLimitReq struct {
	Reserved             uint32   `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgServiceLimitReq) Reset()         { *m = MsgServiceLimitReq{} }
func (m *MsgServiceLimitReq) String() string { return proto.CompactTextString(m) }
func (*MsgServiceLimitReq) ProtoMessage()    {}
func (*MsgServiceLimitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{130}
}
func (m *MsgServiceLimitReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgServiceLimitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgServiceLimitReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgServiceLimitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgServiceLimitReq.Merge(m, src)
}
func (m *MsgServiceLimitReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgServiceLimitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgServiceLimitReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgServiceLimitReq proto.InternalMessageInfo

func (m *MsgServiceLimitReq) GetReserved() uint32 {
	if m != nil {
		return m.Reserved
	}
	return 0
}

// 服务上传下载限制响应(单位：Byte)
type MsgServiceLimitResp struct {
	Usfsl                uint32   `protobuf:"varint,1,opt,name=usfsl,proto3" json:"usfsl,omitempty"`
	Ubfssl               uint32   `protobuf:"varint,2,opt,name=ubfssl,proto3" json:"ubfssl,omitempty"`
	Dssl                 uint32   `protobuf:"varint,3,opt,name=dssl,proto3" json:"dssl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgServiceLimitResp) Reset()         { *m = MsgServiceLimitResp{} }
func (m *MsgServiceLimitResp) String() string { return proto.CompactTextString(m) }
func (*MsgServiceLimitResp) ProtoMessage()    {}
func (*MsgServiceLimitResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{131}
}
func (m *MsgServiceLimitResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgServiceLimitResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgServiceLimitResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgServiceLimitResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgServiceLimitResp.Merge(m, src)
}
func (m *MsgServiceLimitResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgServiceLimitResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgServiceLimitResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgServiceLimitResp proto.InternalMessageInfo

func (m *MsgServiceLimitResp) GetUsfsl() uint32 {
	if m != nil {
		return m.Usfsl
	}
	return 0
}

func (m *MsgServiceLimitResp) GetUbfssl() uint32 {
	if m != nil {
		return m.Ubfssl
	}
	return 0
}

func (m *MsgServiceLimitResp) GetDssl() uint32 {
	if m != nil {
		return m.Dssl
	}
	return 0
}

// 网关取Fid请求
type MsgGetFidReq struct {
	Keyid                uint64   `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Fileid               int64    `protobuf:"varint,2,opt,name=fileid,proto3" json:"fileid,omitempty"`
	FileType             uint32   `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Md5                  string   `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`
	PartTotal            uint32   `protobuf:"varint,5,opt,name=part_total,json=partTotal,proto3" json:"part_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgGetFidReq) Reset()         { *m = MsgGetFidReq{} }
func (m *MsgGetFidReq) String() string { return proto.CompactTextString(m) }
func (*MsgGetFidReq) ProtoMessage()    {}
func (*MsgGetFidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{132}
}
func (m *MsgGetFidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetFidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetFidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetFidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetFidReq.Merge(m, src)
}
func (m *MsgGetFidReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetFidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetFidReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetFidReq proto.InternalMessageInfo

func (m *MsgGetFidReq) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *MsgGetFidReq) GetFileid() int64 {
	if m != nil {
		return m.Fileid
	}
	return 0
}

func (m *MsgGetFidReq) GetFileType() uint32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *MsgGetFidReq) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *MsgGetFidReq) GetPartTotal() uint32 {
	if m != nil {
		return m.PartTotal
	}
	return 0
}

// 网关取Fid响应
type MsgGetFidResp struct {
	Fid                  uint64         `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash           uint64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FileSize             uint64         `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Result               ERpcResultCode `protobuf:"varint,4,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MsgGetFidResp) Reset()         { *m = MsgGetFidResp{} }
func (m *MsgGetFidResp) String() string { return proto.CompactTextString(m) }
func (*MsgGetFidResp) ProtoMessage()    {}
func (*MsgGetFidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{133}
}
func (m *MsgGetFidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetFidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetFidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetFidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetFidResp.Merge(m, src)
}
func (m *MsgGetFidResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetFidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetFidResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetFidResp proto.InternalMessageInfo

func (m *MsgGetFidResp) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *MsgGetFidResp) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *MsgGetFidResp) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *MsgGetFidResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

// 网关上传文件请求
type MsgFilePartsReq struct {
	Keyid                uint64   `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Fileid               int64    `protobuf:"varint,2,opt,name=fileid,proto3" json:"fileid,omitempty"`
	PartId               uint32   `protobuf:"varint,3,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	FileType             uint32   `protobuf:"varint,4,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	PartTotal            uint32   `protobuf:"varint,5,opt,name=part_total,json=partTotal,proto3" json:"part_total,omitempty"`
	Data                 []byte   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgFilePartsReq) Reset()         { *m = MsgFilePartsReq{} }
func (m *MsgFilePartsReq) String() string { return proto.CompactTextString(m) }
func (*MsgFilePartsReq) ProtoMessage()    {}
func (*MsgFilePartsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{134}
}
func (m *MsgFilePartsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFilePartsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFilePartsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFilePartsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFilePartsReq.Merge(m, src)
}
func (m *MsgFilePartsReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgFilePartsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFilePartsReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFilePartsReq proto.InternalMessageInfo

func (m *MsgFilePartsReq) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *MsgFilePartsReq) GetFileid() int64 {
	if m != nil {
		return m.Fileid
	}
	return 0
}

func (m *MsgFilePartsReq) GetPartId() uint32 {
	if m != nil {
		return m.PartId
	}
	return 0
}

func (m *MsgFilePartsReq) GetFileType() uint32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *MsgFilePartsReq) GetPartTotal() uint32 {
	if m != nil {
		return m.PartTotal
	}
	return 0
}

func (m *MsgFilePartsReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 下载文件请求
type MsgDownloadFileReq struct {
	Fid                  uint64   `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash           uint64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Offset               uint32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Length               uint32   `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgDownloadFileReq) Reset()         { *m = MsgDownloadFileReq{} }
func (m *MsgDownloadFileReq) String() string { return proto.CompactTextString(m) }
func (*MsgDownloadFileReq) ProtoMessage()    {}
func (*MsgDownloadFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{135}
}
func (m *MsgDownloadFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDownloadFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDownloadFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDownloadFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDownloadFileReq.Merge(m, src)
}
func (m *MsgDownloadFileReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgDownloadFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDownloadFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDownloadFileReq proto.InternalMessageInfo

func (m *MsgDownloadFileReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *MsgDownloadFileReq) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *MsgDownloadFileReq) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MsgDownloadFileReq) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

// 下载文件响应参数1
type DownloadFileRespPara1 struct {
	Fid                  uint64   `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Offset               uint32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	FileName             string   `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadFileRespPara1) Reset()         { *m = DownloadFileRespPara1{} }
func (m *DownloadFileRespPara1) String() string { return proto.CompactTextString(m) }
func (*DownloadFileRespPara1) ProtoMessage()    {}
func (*DownloadFileRespPara1) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{136}
}
func (m *DownloadFileRespPara1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadFileRespPara1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadFileRespPara1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadFileRespPara1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileRespPara1.Merge(m, src)
}
func (m *DownloadFileRespPara1) XXX_Size() int {
	return m.Size()
}
func (m *DownloadFileRespPara1) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileRespPara1.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileRespPara1 proto.InternalMessageInfo

func (m *DownloadFileRespPara1) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *DownloadFileRespPara1) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DownloadFileRespPara1) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

// 下载文件响应参数2
type DownloadFileRespPara2 struct {
	Length               uint32   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadFileRespPara2) Reset()         { *m = DownloadFileRespPara2{} }
func (m *DownloadFileRespPara2) String() string { return proto.CompactTextString(m) }
func (*DownloadFileRespPara2) ProtoMessage()    {}
func (*DownloadFileRespPara2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{137}
}
func (m *DownloadFileRespPara2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadFileRespPara2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadFileRespPara2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadFileRespPara2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileRespPara2.Merge(m, src)
}
func (m *DownloadFileRespPara2) XXX_Size() int {
	return m.Size()
}
func (m *DownloadFileRespPara2) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileRespPara2.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileRespPara2 proto.InternalMessageInfo

func (m *DownloadFileRespPara2) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *DownloadFileRespPara2) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 下载文件响应
type MsgDownloadFileResp struct {
	Result               ERpcResultCode         `protobuf:"varint,1,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"`
	Para1                *DownloadFileRespPara1 `protobuf:"bytes,2,opt,name=para1,proto3" json:"para1,omitempty"`
	Para2                *DownloadFileRespPara2 `protobuf:"bytes,3,opt,name=para2,proto3" json:"para2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MsgDownloadFileResp) Reset()         { *m = MsgDownloadFileResp{} }
func (m *MsgDownloadFileResp) String() string { return proto.CompactTextString(m) }
func (*MsgDownloadFileResp) ProtoMessage()    {}
func (*MsgDownloadFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{138}
}
func (m *MsgDownloadFileResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDownloadFileResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDownloadFileResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDownloadFileResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDownloadFileResp.Merge(m, src)
}
func (m *MsgDownloadFileResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgDownloadFileResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDownloadFileResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDownloadFileResp proto.InternalMessageInfo

func (m *MsgDownloadFileResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

func (m *MsgDownloadFileResp) GetPara1() *DownloadFileRespPara1 {
	if m != nil {
		return m.Para1
	}
	return nil
}

func (m *MsgDownloadFileResp) GetPara2() *DownloadFileRespPara2 {
	if m != nil {
		return m.Para2
	}
	return nil
}

// 查询对象信息请求
type MsgQueryObjInfoReq struct {
	Fid                  uint64   `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgQueryObjInfoReq) Reset()         { *m = MsgQueryObjInfoReq{} }
func (m *MsgQueryObjInfoReq) String() string { return proto.CompactTextString(m) }
func (*MsgQueryObjInfoReq) ProtoMessage()    {}
func (*MsgQueryObjInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{139}
}
func (m *MsgQueryObjInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQueryObjInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQueryObjInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQueryObjInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQueryObjInfoReq.Merge(m, src)
}
func (m *MsgQueryObjInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgQueryObjInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQueryObjInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQueryObjInfoReq proto.InternalMessageInfo

func (m *MsgQueryObjInfoReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

// 查询对象信息响应参数
type QueryObjInfoRespPara struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size_                uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	AccessHash           uint64   `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryObjInfoRespPara) Reset()         { *m = QueryObjInfoRespPara{} }
func (m *QueryObjInfoRespPara) String() string { return proto.CompactTextString(m) }
func (*QueryObjInfoRespPara) ProtoMessage()    {}
func (*QueryObjInfoRespPara) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{140}
}
func (m *QueryObjInfoRespPara) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObjInfoRespPara) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObjInfoRespPara.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObjInfoRespPara) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObjInfoRespPara.Merge(m, src)
}
func (m *QueryObjInfoRespPara) XXX_Size() int {
	return m.Size()
}
func (m *QueryObjInfoRespPara) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObjInfoRespPara.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObjInfoRespPara proto.InternalMessageInfo

func (m *QueryObjInfoRespPara) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryObjInfoRespPara) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *QueryObjInfoRespPara) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// 查询对象信息响应
type MsgQueryObjInfoResp struct {
	Para                 *QueryObjInfoRespPara `protobuf:"bytes,1,opt,name=para,proto3" json:"para,omitempty"`
	Result               ERpcResultCode        `protobuf:"varint,2,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MsgQueryObjInfoResp) Reset()         { *m = MsgQueryObjInfoResp{} }
func (m *MsgQueryObjInfoResp) String() string { return proto.CompactTextString(m) }
func (*MsgQueryObjInfoResp) ProtoMessage()    {}
func (*MsgQueryObjInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{141}
}
func (m *MsgQueryObjInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQueryObjInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQueryObjInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQueryObjInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQueryObjInfoResp.Merge(m, src)
}
func (m *MsgQueryObjInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgQueryObjInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQueryObjInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQueryObjInfoResp proto.InternalMessageInfo

func (m *MsgQueryObjInfoResp) GetPara() *QueryObjInfoRespPara {
	if m != nil {
		return m.Para
	}
	return nil
}

func (m *MsgQueryObjInfoResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

// 网关获取文件描述信息请求
type MsgGetFileDescReq struct {
	Fid                  uint64   `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash           uint64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgGetFileDescReq) Reset()         { *m = MsgGetFileDescReq{} }
func (m *MsgGetFileDescReq) String() string { return proto.CompactTextString(m) }
func (*MsgGetFileDescReq) ProtoMessage()    {}
func (*MsgGetFileDescReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{142}
}
func (m *MsgGetFileDescReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetFileDescReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetFileDescReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetFileDescReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetFileDescReq.Merge(m, src)
}
func (m *MsgGetFileDescReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetFileDescReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetFileDescReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetFileDescReq proto.InternalMessageInfo

func (m *MsgGetFileDescReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *MsgGetFileDescReq) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// 网关获取文件描述信息响应
type MsgGetFileDescResp struct {
	Result               ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"`
	Data                 []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MsgGetFileDescResp) Reset()         { *m = MsgGetFileDescResp{} }
func (m *MsgGetFileDescResp) String() string { return proto.CompactTextString(m) }
func (*MsgGetFileDescResp) ProtoMessage()    {}
func (*MsgGetFileDescResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{143}
}
func (m *MsgGetFileDescResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetFileDescResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetFileDescResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetFileDescResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetFileDescResp.Merge(m, src)
}
func (m *MsgGetFileDescResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetFileDescResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetFileDescResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetFileDescResp proto.InternalMessageInfo

func (m *MsgGetFileDescResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

func (m *MsgGetFileDescResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

//###################################  channelservice.pb.go  #############################
//获取channel信息  不带user信息
type GetChannelInfoReq struct {
	ChannelId            int32    `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash           int64    `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog                 *Debug   `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChannelInfoReq) Reset()         { *m = GetChannelInfoReq{} }
func (m *GetChannelInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelInfoReq) ProtoMessage()    {}
func (*GetChannelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{144}
}
func (m *GetChannelInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChannelInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelInfoReq.Merge(m, src)
}
func (m *GetChannelInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelInfoReq proto.InternalMessageInfo

func (m *GetChannelInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetChannelInfoReq) GetDlog() *Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

//群基础信息
type GetChannelInfoResp struct {
	BaseInfo             *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	Resultcode           ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=imapigateway.ChatResultCode" json:"resultcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetChannelInfoResp) Reset()         { *m = GetChannelInfoResp{} }
func (m *GetChannelInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelInfoResp) ProtoMessage()    {}
func (*GetChannelInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{145}
}
func (m *GetChannelInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChannelInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelInfoResp.Merge(m, src)
}
func (m *GetChannelInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelInfoResp proto.InternalMessageInfo

func (m *GetChannelInfoResp) GetBaseInfo() *ChannelInfoBase {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *GetChannelInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

//###################################  botserver.pb.go  #############################
type ReqGetAdminGroups struct {
	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	//int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
	Debug                *Debug   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetAdminGroups) Reset()         { *m = ReqGetAdminGroups{} }
func (m *ReqGetAdminGroups) String() string { return proto.CompactTextString(m) }
func (*ReqGetAdminGroups) ProtoMessage()    {}
func (*ReqGetAdminGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{146}
}
func (m *ReqGetAdminGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetAdminGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetAdminGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetAdminGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetAdminGroups.Merge(m, src)
}
func (m *ReqGetAdminGroups) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetAdminGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetAdminGroups.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetAdminGroups proto.InternalMessageInfo

func (m *ReqGetAdminGroups) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqGetAdminGroups) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetGroups struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PeerFilter           int32    `protobuf:"varint,2,opt,name=PeerFilter,proto3" json:"PeerFilter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetGroups) Reset()         { *m = ReqGetGroups{} }
func (m *ReqGetGroups) String() string { return proto.CompactTextString(m) }
func (*ReqGetGroups) ProtoMessage()    {}
func (*ReqGetGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{147}
}
func (m *ReqGetGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetGroups.Merge(m, src)
}
func (m *ReqGetGroups) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetGroups.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetGroups proto.InternalMessageInfo

func (m *ReqGetGroups) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqGetGroups) GetPeerFilter() int32 {
	if m != nil {
		return m.PeerFilter
	}
	return 0
}

type Peer struct {
	PeerID               int32    `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerName             string   `protobuf:"bytes,2,opt,name=PeerName,proto3" json:"PeerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{148}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return m.Size()
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetPeerID() int32 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *Peer) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

type ReplyGetGroups struct {
	Groups               []*Peer  `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	SuperGroups          []*Peer  `protobuf:"bytes,2,rep,name=SuperGroups,proto3" json:"SuperGroups,omitempty"`
	Channels             []*Peer  `protobuf:"bytes,3,rep,name=Channels,proto3" json:"Channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetGroups) Reset()         { *m = ReplyGetGroups{} }
func (m *ReplyGetGroups) String() string { return proto.CompactTextString(m) }
func (*ReplyGetGroups) ProtoMessage()    {}
func (*ReplyGetGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{149}
}
func (m *ReplyGetGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyGetGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyGetGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyGetGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetGroups.Merge(m, src)
}
func (m *ReplyGetGroups) XXX_Size() int {
	return m.Size()
}
func (m *ReplyGetGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetGroups.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetGroups proto.InternalMessageInfo

func (m *ReplyGetGroups) GetGroups() []*Peer {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ReplyGetGroups) GetSuperGroups() []*Peer {
	if m != nil {
		return m.SuperGroups
	}
	return nil
}

func (m *ReplyGetGroups) GetChannels() []*Peer {
	if m != nil {
		return m.Channels
	}
	return nil
}

type ReqDeleteMessage struct {
	ChatType             ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imapigateway.ChatType" json:"ChatType,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId               int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MsgId                []int32  `protobuf:"varint,4,rep,packed,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Debug                *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqDeleteMessage) Reset()         { *m = ReqDeleteMessage{} }
func (m *ReqDeleteMessage) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteMessage) ProtoMessage()    {}
func (*ReqDeleteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{150}
}
func (m *ReqDeleteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqDeleteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqDeleteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqDeleteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqDeleteMessage.Merge(m, src)
}
func (m *ReqDeleteMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqDeleteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqDeleteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqDeleteMessage proto.InternalMessageInfo

func (m *ReqDeleteMessage) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqDeleteMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteMessage) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqDeleteMessage) GetMsgId() []int32 {
	if m != nil {
		return m.MsgId
	}
	return nil
}

func (m *ReqDeleteMessage) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqSendChatAction struct {
	ChatType             ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imapigateway.ChatType" json:"ChatType,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId               int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ActionData           []byte   `protobuf:"bytes,4,opt,name=actionData,proto3" json:"actionData,omitempty"`
	Debug                *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSendChatAction) Reset()         { *m = ReqSendChatAction{} }
func (m *ReqSendChatAction) String() string { return proto.CompactTextString(m) }
func (*ReqSendChatAction) ProtoMessage()    {}
func (*ReqSendChatAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{151}
}
func (m *ReqSendChatAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSendChatAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSendChatAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSendChatAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSendChatAction.Merge(m, src)
}
func (m *ReqSendChatAction) XXX_Size() int {
	return m.Size()
}
func (m *ReqSendChatAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSendChatAction.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSendChatAction proto.InternalMessageInfo

func (m *ReqSendChatAction) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqSendChatAction) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqSendChatAction) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqSendChatAction) GetActionData() []byte {
	if m != nil {
		return m.ActionData
	}
	return nil
}

func (m *ReqSendChatAction) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqData struct {
	ChatType             ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imapigateway.ChatType" json:"ChatType,omitempty"`
	ReqData              []byte   `protobuf:"bytes,2,opt,name=reqData,proto3" json:"reqData,omitempty"`
	BotId                int32    `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqData) Reset()         { *m = ReqData{} }
func (m *ReqData) String() string { return proto.CompactTextString(m) }
func (*ReqData) ProtoMessage()    {}
func (*ReqData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{152}
}
func (m *ReqData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqData.Merge(m, src)
}
func (m *ReqData) XXX_Size() int {
	return m.Size()
}
func (m *ReqData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqData.DiscardUnknown(m)
}

var xxx_messageInfo_ReqData proto.InternalMessageInfo

func (m *ReqData) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqData) GetReqData() []byte {
	if m != nil {
		return m.ReqData
	}
	return nil
}

func (m *ReqData) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

type ReplyData struct {
	Reply                []byte   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyData) Reset()         { *m = ReplyData{} }
func (m *ReplyData) String() string { return proto.CompactTextString(m) }
func (*ReplyData) ProtoMessage()    {}
func (*ReplyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{153}
}
func (m *ReplyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyData.Merge(m, src)
}
func (m *ReplyData) XXX_Size() int {
	return m.Size()
}
func (m *ReplyData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyData.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyData proto.InternalMessageInfo

func (m *ReplyData) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyData) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReqGetChatMembersCount struct {
	ChatType             ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imapigateway.ChatType" json:"ChatType,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId               int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetChatMembersCount) Reset()         { *m = ReqGetChatMembersCount{} }
func (m *ReqGetChatMembersCount) String() string { return proto.CompactTextString(m) }
func (*ReqGetChatMembersCount) ProtoMessage()    {}
func (*ReqGetChatMembersCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{154}
}
func (m *ReqGetChatMembersCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetChatMembersCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetChatMembersCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetChatMembersCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetChatMembersCount.Merge(m, src)
}
func (m *ReqGetChatMembersCount) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetChatMembersCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetChatMembersCount.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetChatMembersCount proto.InternalMessageInfo

func (m *ReqGetChatMembersCount) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqGetChatMembersCount) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChatMembersCount) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqGetChatMembersCount) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChatMembersCount struct {
	ChatMembersCount     int32    `protobuf:"varint,1,opt,name=ChatMembersCount,proto3" json:"ChatMembersCount,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetChatMembersCount) Reset()         { *m = ReplyGetChatMembersCount{} }
func (m *ReplyGetChatMembersCount) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChatMembersCount) ProtoMessage()    {}
func (*ReplyGetChatMembersCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{155}
}
func (m *ReplyGetChatMembersCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyGetChatMembersCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyGetChatMembersCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyGetChatMembersCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetChatMembersCount.Merge(m, src)
}
func (m *ReplyGetChatMembersCount) XXX_Size() int {
	return m.Size()
}
func (m *ReplyGetChatMembersCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetChatMembersCount.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetChatMembersCount proto.InternalMessageInfo

func (m *ReplyGetChatMembersCount) GetChatMembersCount() int32 {
	if m != nil {
		return m.ChatMembersCount
	}
	return 0
}

func (m *ReplyGetChatMembersCount) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

//通过群Id 用户Id 获取群基本信息
type GetChatInfoReq struct {
	ChatId               int32    `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RobotGet             bool     `protobuf:"varint,3,opt,name=robot_get,json=robotGet,proto3" json:"robot_get,omitempty"`
	Dlog                 *Debug   `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChatInfoReq) Reset()         { *m = GetChatInfoReq{} }
func (m *GetChatInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetChatInfoReq) ProtoMessage()    {}
func (*GetChatInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{156}
}
func (m *GetChatInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChatInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChatInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChatInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChatInfoReq.Merge(m, src)
}
func (m *GetChatInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChatInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChatInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChatInfoReq proto.InternalMessageInfo

func (m *GetChatInfoReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChatInfoReq) GetRobotGet() bool {
	if m != nil {
		return m.RobotGet
	}
	return false
}

func (m *GetChatInfoReq) GetDlog() *Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

//获取用户信息、群、超级群信息的请求
type GetUsersChatsReq struct {
	Userid               int32    `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Users                []int32  `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`
	Chatid               []int32  `protobuf:"varint,3,rep,packed,name=chatid,proto3" json:"chatid,omitempty"`
	Channelid            []int32  `protobuf:"varint,4,rep,packed,name=channelid,proto3" json:"channelid,omitempty"`
	ProtocolLayer        int32    `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"`
	Dlog                 *Debug   `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUsersChatsReq) Reset()         { *m = GetUsersChatsReq{} }
func (m *GetUsersChatsReq) String() string { return proto.CompactTextString(m) }
func (*GetUsersChatsReq) ProtoMessage()    {}
func (*GetUsersChatsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{157}
}
func (m *GetUsersChatsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersChatsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersChatsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersChatsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersChatsReq.Merge(m, src)
}
func (m *GetUsersChatsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersChatsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersChatsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersChatsReq proto.InternalMessageInfo

func (m *GetUsersChatsReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *GetUsersChatsReq) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersChatsReq) GetChatid() []int32 {
	if m != nil {
		return m.Chatid
	}
	return nil
}

func (m *GetUsersChatsReq) GetChannelid() []int32 {
	if m != nil {
		return m.Channelid
	}
	return nil
}

func (m *GetUsersChatsReq) GetProtocolLayer() int32 {
	if m != nil {
		return m.ProtocolLayer
	}
	return 0
}

func (m *GetUsersChatsReq) GetDlog() *Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

//获取用户信息、群、超级群信息的返回
type GetUsersChatsResult struct {
	//repeated ChannelInfoBase channels = 1;
	//repeated GetChatInfoResp chats = 3;
	Channels             [][]byte       `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	Users                *UserInfoArray `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
	Chats                [][]byte       `protobuf:"bytes,3,rep,name=chats,proto3" json:"chats,omitempty"`
	NoChats              []int32        `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats,proto3" json:"no_chats,omitempty"`
	NoChans              []int32        `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans,proto3" json:"no_chans,omitempty"`
	Resultcode           ChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=imapigateway.ChatResultCode" json:"resultcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetUsersChatsResult) Reset()         { *m = GetUsersChatsResult{} }
func (m *GetUsersChatsResult) String() string { return proto.CompactTextString(m) }
func (*GetUsersChatsResult) ProtoMessage()    {}
func (*GetUsersChatsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{158}
}
func (m *GetUsersChatsResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersChatsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersChatsResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersChatsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersChatsResult.Merge(m, src)
}
func (m *GetUsersChatsResult) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersChatsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersChatsResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersChatsResult proto.InternalMessageInfo

func (m *GetUsersChatsResult) GetChannels() [][]byte {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GetUsersChatsResult) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersChatsResult) GetChats() [][]byte {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *GetUsersChatsResult) GetNoChats() []int32 {
	if m != nil {
		return m.NoChats
	}
	return nil
}

func (m *GetUsersChatsResult) GetNoChans() []int32 {
	if m != nil {
		return m.NoChans
	}
	return nil
}

func (m *GetUsersChatsResult) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

//根据用户id获取用户ID
type GetUserInfoByIdReq struct {
	SelfId               int32    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserInfoByIdReq) Reset()         { *m = GetUserInfoByIdReq{} }
func (m *GetUserInfoByIdReq) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoByIdReq) ProtoMessage()    {}
func (*GetUserInfoByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{159}
}
func (m *GetUserInfoByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserInfoByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserInfoByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserInfoByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserInfoByIdReq.Merge(m, src)
}
func (m *GetUserInfoByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserInfoByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserInfoByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserInfoByIdReq proto.InternalMessageInfo

func (m *GetUserInfoByIdReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserInfoByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserInfoByIdReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetUserInfoByIdArrReq struct {
	SelfId               int32    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserIds              []int32  `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserInfoByIdArrReq) Reset()         { *m = GetUserInfoByIdArrReq{} }
func (m *GetUserInfoByIdArrReq) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoByIdArrReq) ProtoMessage()    {}
func (*GetUserInfoByIdArrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{160}
}
func (m *GetUserInfoByIdArrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserInfoByIdArrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserInfoByIdArrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserInfoByIdArrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserInfoByIdArrReq.Merge(m, src)
}
func (m *GetUserInfoByIdArrReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserInfoByIdArrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserInfoByIdArrReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserInfoByIdArrReq proto.InternalMessageInfo

func (m *GetUserInfoByIdArrReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserInfoByIdArrReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *GetUserInfoByIdArrReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//更新用户信息
type UpdateUserProfileReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Flags                int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	FirstName            string   `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About                string   `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Debug                *Debug   `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateUserProfileReq) Reset()         { *m = UpdateUserProfileReq{} }
func (m *UpdateUserProfileReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileReq) ProtoMessage()    {}
func (*UpdateUserProfileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{161}
}
func (m *UpdateUserProfileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserProfileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserProfileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserProfileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserProfileReq.Merge(m, src)
}
func (m *UpdateUserProfileReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserProfileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserProfileReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserProfileReq proto.InternalMessageInfo

func (m *UpdateUserProfileReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserProfileReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateUserProfileReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateUserProfileReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateUserProfileReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UpdateUserProfileReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//更新用户昵称等的返回结果
type UpdateUserProfileResult struct {
	Uinfo                *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateUserProfileResult) Reset()         { *m = UpdateUserProfileResult{} }
func (m *UpdateUserProfileResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileResult) ProtoMessage()    {}
func (*UpdateUserProfileResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{162}
}
func (m *UpdateUserProfileResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserProfileResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserProfileResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserProfileResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserProfileResult.Merge(m, src)
}
func (m *UpdateUserProfileResult) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserProfileResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserProfileResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserProfileResult proto.InternalMessageInfo

func (m *UpdateUserProfileResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateUserProfileResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//根据用户电话号码来获取用户信息
type GetUserByphone struct {
	Phone                string   `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug                *Debug   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserByphone) Reset()         { *m = GetUserByphone{} }
func (m *GetUserByphone) String() string { return proto.CompactTextString(m) }
func (*GetUserByphone) ProtoMessage()    {}
func (*GetUserByphone) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{163}
}
func (m *GetUserByphone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserByphone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserByphone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserByphone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByphone.Merge(m, src)
}
func (m *GetUserByphone) XXX_Size() int {
	return m.Size()
}
func (m *GetUserByphone) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByphone.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByphone proto.InternalMessageInfo

func (m *GetUserByphone) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetUserByphone) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotInfoSuppReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Placeholder          string   `protobuf:"bytes,2,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	Geo                  bool     `protobuf:"varint,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBotInfoSuppReq) Reset()         { *m = UpdateBotInfoSuppReq{} }
func (m *UpdateBotInfoSuppReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInfoSuppReq) ProtoMessage()    {}
func (*UpdateBotInfoSuppReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{164}
}
func (m *UpdateBotInfoSuppReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBotInfoSuppReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBotInfoSuppReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBotInfoSuppReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBotInfoSuppReq.Merge(m, src)
}
func (m *UpdateBotInfoSuppReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBotInfoSuppReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBotInfoSuppReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBotInfoSuppReq proto.InternalMessageInfo

func (m *UpdateBotInfoSuppReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateBotInfoSuppReq) GetPlaceholder() string {
	if m != nil {
		return m.Placeholder
	}
	return ""
}

func (m *UpdateBotInfoSuppReq) GetGeo() bool {
	if m != nil {
		return m.Geo
	}
	return false
}

func (m *UpdateBotInfoSuppReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotInfoSuppResult struct {
	Errorcode            ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateBotInfoSuppResult) Reset()         { *m = UpdateBotInfoSuppResult{} }
func (m *UpdateBotInfoSuppResult) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInfoSuppResult) ProtoMessage()    {}
func (*UpdateBotInfoSuppResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{165}
}
func (m *UpdateBotInfoSuppResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBotInfoSuppResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBotInfoSuppResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBotInfoSuppResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBotInfoSuppResult.Merge(m, src)
}
func (m *UpdateBotInfoSuppResult) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBotInfoSuppResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBotInfoSuppResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBotInfoSuppResult proto.InternalMessageInfo

func (m *UpdateBotInfoSuppResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//更新机器人头像请求
type UpdateBotPicRequest struct {
	BotId                int32    `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Photo                []byte   `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBotPicRequest) Reset()         { *m = UpdateBotPicRequest{} }
func (m *UpdateBotPicRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBotPicRequest) ProtoMessage()    {}
func (*UpdateBotPicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{166}
}
func (m *UpdateBotPicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBotPicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBotPicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBotPicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBotPicRequest.Merge(m, src)
}
func (m *UpdateBotPicRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBotPicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBotPicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBotPicRequest proto.InternalMessageInfo

func (m *UpdateBotPicRequest) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *UpdateBotPicRequest) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UpdateBotPicRequest) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotPicResult struct {
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateBotPicResult) Reset()         { *m = UpdateBotPicResult{} }
func (m *UpdateBotPicResult) String() string { return proto.CompactTextString(m) }
func (*UpdateBotPicResult) ProtoMessage()    {}
func (*UpdateBotPicResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{167}
}
func (m *UpdateBotPicResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBotPicResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBotPicResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBotPicResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBotPicResult.Merge(m, src)
}
func (m *UpdateBotPicResult) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBotPicResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBotPicResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBotPicResult proto.InternalMessageInfo

func (m *UpdateBotPicResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//更新用户的username的请求
type UpdateuserNameReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	KeyId                int64    `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateuserNameReq) Reset()         { *m = UpdateuserNameReq{} }
func (m *UpdateuserNameReq) String() string { return proto.CompactTextString(m) }
func (*UpdateuserNameReq) ProtoMessage()    {}
func (*UpdateuserNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{168}
}
func (m *UpdateuserNameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateuserNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateuserNameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateuserNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateuserNameReq.Merge(m, src)
}
func (m *UpdateuserNameReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateuserNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateuserNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateuserNameReq proto.InternalMessageInfo

func (m *UpdateuserNameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateuserNameReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateuserNameReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdateuserNameReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

//更新用户的username的返回结果
type UpdateuserNameResult struct {
	Uinfo                *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateuserNameResult) Reset()         { *m = UpdateuserNameResult{} }
func (m *UpdateuserNameResult) String() string { return proto.CompactTextString(m) }
func (*UpdateuserNameResult) ProtoMessage()    {}
func (*UpdateuserNameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{169}
}
func (m *UpdateuserNameResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateuserNameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateuserNameResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateuserNameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateuserNameResult.Merge(m, src)
}
func (m *UpdateuserNameResult) XXX_Size() int {
	return m.Size()
}
func (m *UpdateuserNameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateuserNameResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateuserNameResult proto.InternalMessageInfo

func (m *UpdateuserNameResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateuserNameResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//注册指定用户的请求
type RegisterUserInfoResult struct {
	Uinfo                *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RegisterUserInfoResult) Reset()         { *m = RegisterUserInfoResult{} }
func (m *RegisterUserInfoResult) String() string { return proto.CompactTextString(m) }
func (*RegisterUserInfoResult) ProtoMessage()    {}
func (*RegisterUserInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{170}
}
func (m *RegisterUserInfoResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterUserInfoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterUserInfoResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterUserInfoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterUserInfoResult.Merge(m, src)
}
func (m *RegisterUserInfoResult) XXX_Size() int {
	return m.Size()
}
func (m *RegisterUserInfoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterUserInfoResult.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterUserInfoResult proto.InternalMessageInfo

func (m *RegisterUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *RegisterUserInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//删除账号的请求
type DeleteAccountByIdReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DelId                int32    `protobuf:"varint,2,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccountByIdReq) Reset()         { *m = DeleteAccountByIdReq{} }
func (m *DeleteAccountByIdReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountByIdReq) ProtoMessage()    {}
func (*DeleteAccountByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{171}
}
func (m *DeleteAccountByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAccountByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAccountByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAccountByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccountByIdReq.Merge(m, src)
}
func (m *DeleteAccountByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAccountByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccountByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccountByIdReq proto.InternalMessageInfo

func (m *DeleteAccountByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteAccountByIdReq) GetDelId() int32 {
	if m != nil {
		return m.DelId
	}
	return 0
}

func (m *DeleteAccountByIdReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//删除账号的返回结果
type DelAccountResult struct {
	Errorcode            ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DelAccountResult) Reset()         { *m = DelAccountResult{} }
func (m *DelAccountResult) String() string { return proto.CompactTextString(m) }
func (*DelAccountResult) ProtoMessage()    {}
func (*DelAccountResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{172}
}
func (m *DelAccountResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelAccountResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelAccountResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelAccountResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelAccountResult.Merge(m, src)
}
func (m *DelAccountResult) XXX_Size() int {
	return m.Size()
}
func (m *DelAccountResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DelAccountResult.DiscardUnknown(m)
}

var xxx_messageInfo_DelAccountResult proto.InternalMessageInfo

func (m *DelAccountResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//用户注册的请求结构
type SignUpReq struct {
	PhoneNumber          string   `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	PhoneCodeHash        string   `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode            string   `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"`
	KeyId                int64    `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	FirstName            string   `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName             string   `protobuf:"bytes,7,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot                bool     `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion       int32    `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory       bool     `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats           bool     `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId                 int32    `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug                *Debug   `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode          string   `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone           string   `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignUpReq) Reset()         { *m = SignUpReq{} }
func (m *SignUpReq) String() string { return proto.CompactTextString(m) }
func (*SignUpReq) ProtoMessage()    {}
func (*SignUpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{173}
}
func (m *SignUpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignUpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignUpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignUpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignUpReq.Merge(m, src)
}
func (m *SignUpReq) XXX_Size() int {
	return m.Size()
}
func (m *SignUpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SignUpReq.DiscardUnknown(m)
}

var xxx_messageInfo_SignUpReq proto.InternalMessageInfo

func (m *SignUpReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SignUpReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *SignUpReq) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *SignUpReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SignUpReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SignUpReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *SignUpReq) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *SignUpReq) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *SignUpReq) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *SignUpReq) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *SignUpReq) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *SignUpReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SignUpReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SignUpReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

type AuthSignUpResult struct {
	Code                 AuthSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=imapigateway.AuthSignUpResult_ResultCode" json:"code,omitempty"`
	UserInfo             *UserInfo                   `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AuthSignUpResult) Reset()         { *m = AuthSignUpResult{} }
func (m *AuthSignUpResult) String() string { return proto.CompactTextString(m) }
func (*AuthSignUpResult) ProtoMessage()    {}
func (*AuthSignUpResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{174}
}
func (m *AuthSignUpResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthSignUpResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthSignUpResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthSignUpResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthSignUpResult.Merge(m, src)
}
func (m *AuthSignUpResult) XXX_Size() int {
	return m.Size()
}
func (m *AuthSignUpResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthSignUpResult.DiscardUnknown(m)
}

var xxx_messageInfo_AuthSignUpResult proto.InternalMessageInfo

func (m *AuthSignUpResult) GetCode() AuthSignUpResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return AuthSignUpResult_Success
}

func (m *AuthSignUpResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

//getfull user的请求
type GetFullUserReq struct {
	SelfId               int32    `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash           int64    `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFullUserReq) Reset()         { *m = GetFullUserReq{} }
func (m *GetFullUserReq) String() string { return proto.CompactTextString(m) }
func (*GetFullUserReq) ProtoMessage()    {}
func (*GetFullUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{175}
}
func (m *GetFullUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFullUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFullUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFullUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFullUserReq.Merge(m, src)
}
func (m *GetFullUserReq) XXX_Size() int {
	return m.Size()
}
func (m *GetFullUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFullUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetFullUserReq proto.InternalMessageInfo

func (m *GetFullUserReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetFullUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFullUserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetFullUserReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//getfull user的请求
type GetFullUserResult struct {
	Uinfo                *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`
	Isblocked            bool      `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`
	PhoneCallsPrivate    bool      `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`
	PhoneCallsAvailable  bool      `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"`
	About                string    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	CommonChat           int32     `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`
	Extend               string    `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`
	Errorcode            ReErrCode `protobuf:"varint,8,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetFullUserResult) Reset()         { *m = GetFullUserResult{} }
func (m *GetFullUserResult) String() string { return proto.CompactTextString(m) }
func (*GetFullUserResult) ProtoMessage()    {}
func (*GetFullUserResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{176}
}
func (m *GetFullUserResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFullUserResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFullUserResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFullUserResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFullUserResult.Merge(m, src)
}
func (m *GetFullUserResult) XXX_Size() int {
	return m.Size()
}
func (m *GetFullUserResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFullUserResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetFullUserResult proto.InternalMessageInfo

func (m *GetFullUserResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetFullUserResult) GetIsblocked() bool {
	if m != nil {
		return m.Isblocked
	}
	return false
}

func (m *GetFullUserResult) GetPhoneCallsPrivate() bool {
	if m != nil {
		return m.PhoneCallsPrivate
	}
	return false
}

func (m *GetFullUserResult) GetPhoneCallsAvailable() bool {
	if m != nil {
		return m.PhoneCallsAvailable
	}
	return false
}

func (m *GetFullUserResult) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *GetFullUserResult) GetCommonChat() int32 {
	if m != nil {
		return m.CommonChat
	}
	return 0
}

func (m *GetFullUserResult) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

func (m *GetFullUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

//根据用户userName来获取用户基本信息
type GetUserByUsername struct {
	SelfId               int32    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserByUsername) Reset()         { *m = GetUserByUsername{} }
func (m *GetUserByUsername) String() string { return proto.CompactTextString(m) }
func (*GetUserByUsername) ProtoMessage()    {}
func (*GetUserByUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{177}
}
func (m *GetUserByUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserByUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserByUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserByUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByUsername.Merge(m, src)
}
func (m *GetUserByUsername) XXX_Size() int {
	return m.Size()
}
func (m *GetUserByUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByUsername.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByUsername proto.InternalMessageInfo

func (m *GetUserByUsername) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserByUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUserByUsername) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//获取群的完整信息
type ReqGetFullChat struct {
	Fromid               int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid               int32    `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetFullChat) Reset()         { *m = ReqGetFullChat{} }
func (m *ReqGetFullChat) String() string { return proto.CompactTextString(m) }
func (*ReqGetFullChat) ProtoMessage()    {}
func (*ReqGetFullChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{178}
}
func (m *ReqGetFullChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGetFullChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGetFullChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGetFullChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetFullChat.Merge(m, src)
}
func (m *ReqGetFullChat) XXX_Size() int {
	return m.Size()
}
func (m *ReqGetFullChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetFullChat.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetFullChat proto.InternalMessageInfo

func (m *ReqGetFullChat) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqGetFullChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqGetFullChat) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetFullChat struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetFullChat) Reset()         { *m = ReplyGetFullChat{} }
func (m *ReplyGetFullChat) String() string { return proto.CompactTextString(m) }
func (*ReplyGetFullChat) ProtoMessage()    {}
func (*ReplyGetFullChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{179}
}
func (m *ReplyGetFullChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyGetFullChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyGetFullChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyGetFullChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetFullChat.Merge(m, src)
}
func (m *ReplyGetFullChat) XXX_Size() int {
	return m.Size()
}
func (m *ReplyGetFullChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetFullChat.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetFullChat proto.InternalMessageInfo

func (m *ReplyGetFullChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyGetFullChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 退出超级群
type ReqLeaveChannel struct {
	ChannelId            int32    `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid            int64    `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqLeaveChannel) Reset()         { *m = ReqLeaveChannel{} }
func (m *ReqLeaveChannel) String() string { return proto.CompactTextString(m) }
func (*ReqLeaveChannel) ProtoMessage()    {}
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{180}
}
func (m *ReqLeaveChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqLeaveChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqLeaveChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqLeaveChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLeaveChannel.Merge(m, src)
}
func (m *ReqLeaveChannel) XXX_Size() int {
	return m.Size()
}
func (m *ReqLeaveChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLeaveChannel.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLeaveChannel proto.InternalMessageInfo

func (m *ReqLeaveChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqLeaveChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLeaveChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqLeaveChannel) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//发送媒体
type ReqSendMedia struct {
	Fromid               int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Flags                int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent               bool     `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background           bool     `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft           bool     `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer                 []byte   `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId         int32    `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media                []byte   `protobuf:"bytes,8,opt,name=media,proto3" json:"media,omitempty"`
	MultiMedia           [][]byte `protobuf:"bytes,9,rep,name=multi_media,json=multiMedia,proto3" json:"multi_media,omitempty"`
	RandomId             int64    `protobuf:"varint,10,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup          []byte   `protobuf:"bytes,11,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Newfileid            int64    `protobuf:"varint,12,opt,name=newfileid,proto3" json:"newfileid,omitempty"`
	FromkeyId            uint64   `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"`
	Chatmeber            []int32  `protobuf:"varint,14,rep,packed,name=chatmeber,proto3" json:"chatmeber,omitempty"`
	Debug                *Debug   `protobuf:"bytes,15,opt,name=debug,proto3" json:"debug,omitempty"`
	ViaBotId             int32    `protobuf:"varint,16,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSendMedia) Reset()         { *m = ReqSendMedia{} }
func (m *ReqSendMedia) String() string { return proto.CompactTextString(m) }
func (*ReqSendMedia) ProtoMessage()    {}
func (*ReqSendMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{181}
}
func (m *ReqSendMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSendMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSendMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSendMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSendMedia.Merge(m, src)
}
func (m *ReqSendMedia) XXX_Size() int {
	return m.Size()
}
func (m *ReqSendMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSendMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSendMedia proto.InternalMessageInfo

func (m *ReqSendMedia) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendMedia) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqSendMedia) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqSendMedia) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *ReqSendMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *ReqSendMedia) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqSendMedia) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *ReqSendMedia) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ReqSendMedia) GetMultiMedia() [][]byte {
	if m != nil {
		return m.MultiMedia
	}
	return nil
}

func (m *ReqSendMedia) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *ReqSendMedia) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *ReqSendMedia) GetNewfileid() int64 {
	if m != nil {
		return m.Newfileid
	}
	return 0
}

func (m *ReqSendMedia) GetFromkeyId() uint64 {
	if m != nil {
		return m.FromkeyId
	}
	return 0
}

func (m *ReqSendMedia) GetChatmeber() []int32 {
	if m != nil {
		return m.Chatmeber
	}
	return nil
}

func (m *ReqSendMedia) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqSendMedia) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

// 状态返回
type ReplyResult struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyResult) Reset()         { *m = ReplyResult{} }
func (m *ReplyResult) String() string { return proto.CompactTextString(m) }
func (*ReplyResult) ProtoMessage()    {}
func (*ReplyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{182}
}
func (m *ReplyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyResult.Merge(m, src)
}
func (m *ReplyResult) XXX_Size() int {
	return m.Size()
}
func (m *ReplyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyResult proto.InternalMessageInfo

func (m *ReplyResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyResult) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

//编辑群名字
type ReqEditChatTitle struct {
	Fromid               int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid               int32    `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FromKeyid            uint64   `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug                *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqEditChatTitle) Reset()         { *m = ReqEditChatTitle{} }
func (m *ReqEditChatTitle) String() string { return proto.CompactTextString(m) }
func (*ReqEditChatTitle) ProtoMessage()    {}
func (*ReqEditChatTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{183}
}
func (m *ReqEditChatTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqEditChatTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqEditChatTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqEditChatTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqEditChatTitle.Merge(m, src)
}
func (m *ReqEditChatTitle) XXX_Size() int {
	return m.Size()
}
func (m *ReqEditChatTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqEditChatTitle.DiscardUnknown(m)
}

var xxx_messageInfo_ReqEditChatTitle proto.InternalMessageInfo

func (m *ReqEditChatTitle) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqEditChatTitle) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqEditChatTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqEditChatTitle) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChatTitle) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyEditChatTitle struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                int32    `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyEditChatTitle) Reset()         { *m = ReplyEditChatTitle{} }
func (m *ReplyEditChatTitle) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChatTitle) ProtoMessage()    {}
func (*ReplyEditChatTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{184}
}
func (m *ReplyEditChatTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyEditChatTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyEditChatTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyEditChatTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyEditChatTitle.Merge(m, src)
}
func (m *ReplyEditChatTitle) XXX_Size() int {
	return m.Size()
}
func (m *ReplyEditChatTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyEditChatTitle.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyEditChatTitle proto.InternalMessageInfo

func (m *ReplyEditChatTitle) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyEditChatTitle) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

//获取一个sticker下面的所有贴图信息的请求
type GetStickerSetPackDcInfosReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Debug                *Debug   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStickerSetPackDcInfosReq) Reset()         { *m = GetStickerSetPackDcInfosReq{} }
func (m *GetStickerSetPackDcInfosReq) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetPackDcInfosReq) ProtoMessage()    {}
func (*GetStickerSetPackDcInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{185}
}
func (m *GetStickerSetPackDcInfosReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStickerSetPackDcInfosReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStickerSetPackDcInfosReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStickerSetPackDcInfosReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStickerSetPackDcInfosReq.Merge(m, src)
}
func (m *GetStickerSetPackDcInfosReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStickerSetPackDcInfosReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStickerSetPackDcInfosReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStickerSetPackDcInfosReq proto.InternalMessageInfo

func (m *GetStickerSetPackDcInfosReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetStickerSetPackDcInfosReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

//获取一个sticker下面的所有贴图信息的返回
type GetStickerSetPackDcInfosResult struct {
	StPDcInfo            []*StickerPackDocumentInfo `protobuf:"bytes,1,rep,name=StPDcInfo,proto3" json:"StPDcInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetStickerSetPackDcInfosResult) Reset()         { *m = GetStickerSetPackDcInfosResult{} }
func (m *GetStickerSetPackDcInfosResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetPackDcInfosResult) ProtoMessage()    {}
func (*GetStickerSetPackDcInfosResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{186}
}
func (m *GetStickerSetPackDcInfosResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStickerSetPackDcInfosResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStickerSetPackDcInfosResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStickerSetPackDcInfosResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStickerSetPackDcInfosResult.Merge(m, src)
}
func (m *GetStickerSetPackDcInfosResult) XXX_Size() int {
	return m.Size()
}
func (m *GetStickerSetPackDcInfosResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStickerSetPackDcInfosResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetStickerSetPackDcInfosResult proto.InternalMessageInfo

func (m *GetStickerSetPackDcInfosResult) GetStPDcInfo() []*StickerPackDocumentInfo {
	if m != nil {
		return m.StPDcInfo
	}
	return nil
}

//sticker集合里面具体内容
//存储单个sticker内容请求
type StickerPackDocumentBase struct {
	AttributesStikerSetId         int64    `protobuf:"varint,1,opt,name=attributes_stiker_set_id,json=attributesStikerSetId,proto3" json:"attributes_stiker_set_id,omitempty"`
	DocumentId                    uint64   `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                    int64    `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                      string   `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size_                         int32    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                         string   `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                          int32    `protobuf:"varint,7,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                          int32    `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW          int32    `protobuf:"varint,9,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH          int32    `protobuf:"varint,10,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStikerAlt           string   `protobuf:"bytes,11,opt,name=attributes_stiker_alt,json=attributesStikerAlt,proto3" json:"attributes_stiker_alt,omitempty"`
	AttributesStikerSetAccessHash int64    `protobuf:"varint,12,opt,name=attributes_stiker_set_access_hash,json=attributesStikerSetAccessHash,proto3" json:"attributes_stiker_set_access_hash,omitempty"`
	AttributesFileName            string   `protobuf:"bytes,13,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *StickerPackDocumentBase) Reset()         { *m = StickerPackDocumentBase{} }
func (m *StickerPackDocumentBase) String() string { return proto.CompactTextString(m) }
func (*StickerPackDocumentBase) ProtoMessage()    {}
func (*StickerPackDocumentBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{187}
}
func (m *StickerPackDocumentBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerPackDocumentBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerPackDocumentBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerPackDocumentBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerPackDocumentBase.Merge(m, src)
}
func (m *StickerPackDocumentBase) XXX_Size() int {
	return m.Size()
}
func (m *StickerPackDocumentBase) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerPackDocumentBase.DiscardUnknown(m)
}

var xxx_messageInfo_StickerPackDocumentBase proto.InternalMessageInfo

func (m *StickerPackDocumentBase) GetAttributesStikerSetId() int64 {
	if m != nil {
		return m.AttributesStikerSetId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetDocumentId() uint64 {
	if m != nil {
		return m.DocumentId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerPackDocumentBase) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *StickerPackDocumentBase) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *StickerPackDocumentBase) GetThumb() string {
	if m != nil {
		return m.Thumb
	}
	return ""
}

func (m *StickerPackDocumentBase) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesImageSizeW() int32 {
	if m != nil {
		return m.AttributesImageSizeW
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesImageSizeH() int32 {
	if m != nil {
		return m.AttributesImageSizeH
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesStikerAlt() string {
	if m != nil {
		return m.AttributesStikerAlt
	}
	return ""
}

func (m *StickerPackDocumentBase) GetAttributesStikerSetAccessHash() int64 {
	if m != nil {
		return m.AttributesStikerSetAccessHash
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesFileName() string {
	if m != nil {
		return m.AttributesFileName
	}
	return ""
}

type StickerPackDocumentInfo struct {
	Id                   int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoBase             *StickerPackDocumentBase `protobuf:"bytes,2,opt,name=infoBase,proto3" json:"infoBase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *StickerPackDocumentInfo) Reset()         { *m = StickerPackDocumentInfo{} }
func (m *StickerPackDocumentInfo) String() string { return proto.CompactTextString(m) }
func (*StickerPackDocumentInfo) ProtoMessage()    {}
func (*StickerPackDocumentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{188}
}
func (m *StickerPackDocumentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerPackDocumentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerPackDocumentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerPackDocumentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerPackDocumentInfo.Merge(m, src)
}
func (m *StickerPackDocumentInfo) XXX_Size() int {
	return m.Size()
}
func (m *StickerPackDocumentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerPackDocumentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StickerPackDocumentInfo proto.InternalMessageInfo

func (m *StickerPackDocumentInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerPackDocumentInfo) GetInfoBase() *StickerPackDocumentBase {
	if m != nil {
		return m.InfoBase
	}
	return nil
}

type GetUserInfoByIdArrResult struct {
	Uinfo                []*UserInfo `protobuf:"bytes,1,rep,name=Uinfo,proto3" json:"Uinfo,omitempty"`
	Errorcode            ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetUserInfoByIdArrResult) Reset()         { *m = GetUserInfoByIdArrResult{} }
func (m *GetUserInfoByIdArrResult) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoByIdArrResult) ProtoMessage()    {}
func (*GetUserInfoByIdArrResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{189}
}
func (m *GetUserInfoByIdArrResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserInfoByIdArrResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserInfoByIdArrResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserInfoByIdArrResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserInfoByIdArrResult.Merge(m, src)
}
func (m *GetUserInfoByIdArrResult) XXX_Size() int {
	return m.Size()
}
func (m *GetUserInfoByIdArrResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserInfoByIdArrResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserInfoByIdArrResult proto.InternalMessageInfo

func (m *GetUserInfoByIdArrResult) GetUinfo() []*UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetUserInfoByIdArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type SetBotVerifiedReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Verified             bool     `protobuf:"varint,2,opt,name=verified,proto3" json:"verified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBotVerifiedReq) Reset()         { *m = SetBotVerifiedReq{} }
func (m *SetBotVerifiedReq) String() string { return proto.CompactTextString(m) }
func (*SetBotVerifiedReq) ProtoMessage()    {}
func (*SetBotVerifiedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{190}
}
func (m *SetBotVerifiedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBotVerifiedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBotVerifiedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBotVerifiedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBotVerifiedReq.Merge(m, src)
}
func (m *SetBotVerifiedReq) XXX_Size() int {
	return m.Size()
}
func (m *SetBotVerifiedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBotVerifiedReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetBotVerifiedReq proto.InternalMessageInfo

func (m *SetBotVerifiedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetBotVerifiedReq) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type SetBotVerifiedReply struct {
	Errorcode            ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SetBotVerifiedReply) Reset()         { *m = SetBotVerifiedReply{} }
func (m *SetBotVerifiedReply) String() string { return proto.CompactTextString(m) }
func (*SetBotVerifiedReply) ProtoMessage()    {}
func (*SetBotVerifiedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{191}
}
func (m *SetBotVerifiedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBotVerifiedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBotVerifiedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBotVerifiedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBotVerifiedReply.Merge(m, src)
}
func (m *SetBotVerifiedReply) XXX_Size() int {
	return m.Size()
}
func (m *SetBotVerifiedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBotVerifiedReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetBotVerifiedReply proto.InternalMessageInfo

func (m *SetBotVerifiedReply) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type ContactsGetCommonContactsReq struct {
	UserIds              []int32  `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactsGetCommonContactsReq) Reset()         { *m = ContactsGetCommonContactsReq{} }
func (m *ContactsGetCommonContactsReq) String() string { return proto.CompactTextString(m) }
func (*ContactsGetCommonContactsReq) ProtoMessage()    {}
func (*ContactsGetCommonContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{192}
}
func (m *ContactsGetCommonContactsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsGetCommonContactsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsGetCommonContactsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsGetCommonContactsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsGetCommonContactsReq.Merge(m, src)
}
func (m *ContactsGetCommonContactsReq) XXX_Size() int {
	return m.Size()
}
func (m *ContactsGetCommonContactsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsGetCommonContactsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsGetCommonContactsReq proto.InternalMessageInfo

func (m *ContactsGetCommonContactsReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type ContactsGetCommonContactsResult struct {
	UserInfos            []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	Errorcode            ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ContactsGetCommonContactsResult) Reset()         { *m = ContactsGetCommonContactsResult{} }
func (m *ContactsGetCommonContactsResult) String() string { return proto.CompactTextString(m) }
func (*ContactsGetCommonContactsResult) ProtoMessage()    {}
func (*ContactsGetCommonContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5652c59339596b, []int{193}
}
func (m *ContactsGetCommonContactsResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsGetCommonContactsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsGetCommonContactsResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsGetCommonContactsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsGetCommonContactsResult.Merge(m, src)
}
func (m *ContactsGetCommonContactsResult) XXX_Size() int {
	return m.Size()
}
func (m *ContactsGetCommonContactsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsGetCommonContactsResult.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsGetCommonContactsResult proto.InternalMessageInfo

func (m *ContactsGetCommonContactsResult) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *ContactsGetCommonContactsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

func init() {
	proto.RegisterEnum("imapigateway.ChatType", ChatType_name, ChatType_value)
	proto.RegisterEnum("imapigateway.MsgFromID", MsgFromID_name, MsgFromID_value)
	proto.RegisterEnum("imapigateway.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("imapigateway.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("imapigateway.CheckIsMuteContactResult_ResultCode", CheckIsMuteContactResult_ResultCode_name, CheckIsMuteContactResult_ResultCode_value)
	proto.RegisterEnum("imapigateway.AuthSignUpResult_ResultCode", AuthSignUpResult_ResultCode_name, AuthSignUpResult_ResultCode_value)
	proto.RegisterType((*ReqMemberLevelCache)(nil), "imapigateway.ReqMemberLevelCache")
	proto.RegisterType((*ReplyMemberLevelCache)(nil), "imapigateway.ReplyMemberLevelCache")
	proto.RegisterType((*CheckIsSelfContactReq)(nil), "imapigateway.CheckIsSelfContactReq")
	proto.RegisterType((*CheckIsSelfContactResult)(nil), "imapigateway.CheckIsSelfContactResult")
	proto.RegisterType((*SearchUserByNicknameReq)(nil), "imapigateway.SearchUserByNicknameReq")
	proto.RegisterType((*SearchUserByNicknameResult)(nil), "imapigateway.SearchUserByNicknameResult")
	proto.RegisterType((*MomentNotifyData)(nil), "imapigateway.MomentNotifyData")
	proto.RegisterType((*Entity)(nil), "imapigateway.Entity")
	proto.RegisterType((*MomentNotifyReq)(nil), "imapigateway.MomentNotifyReq")
	proto.RegisterType((*MomentNotifyResult)(nil), "imapigateway.MomentNotifyResult")
	proto.RegisterType((*CheckIsMuteContactReq)(nil), "imapigateway.CheckIsMuteContactReq")
	proto.RegisterType((*CheckIsMuteContactResult)(nil), "imapigateway.CheckIsMuteContactResult")
	proto.RegisterType((*MomentState)(nil), "imapigateway.MomentState")
	proto.RegisterType((*ReqUpdateMoments)(nil), "imapigateway.ReqUpdateMoments")
	proto.RegisterType((*ResUpdateMoments)(nil), "imapigateway.ResUpdateMoments")
	proto.RegisterType((*ContactInfo)(nil), "imapigateway.contactInfo")
	proto.RegisterType((*ContatsGetContactsReq)(nil), "imapigateway.ContatsGetContactsReq")
	proto.RegisterType((*ContatsGetContactsResult)(nil), "imapigateway.ContatsGetContactsResult")
	proto.RegisterType((*ReqIntegralUniversalBusiness)(nil), "imapigateway.ReqIntegralUniversalBusiness")
	proto.RegisterType((*ReplyIntegralUniversalBusiness)(nil), "imapigateway.ReplyIntegralUniversalBusiness")
	proto.RegisterType((*OtherTransReq)(nil), "imapigateway.OtherTransReq")
	proto.RegisterType((*OtherTransResp)(nil), "imapigateway.OtherTransResp")
	proto.RegisterType((*SetUserDetailReq)(nil), "imapigateway.SetUserDetailReq")
	proto.RegisterType((*SetUserDetailResult)(nil), "imapigateway.SetUserDetailResult")
	proto.RegisterType((*GetUserByUsernameReq)(nil), "imapigateway.GetUserByUsernameReq")
	proto.RegisterType((*GetUserInfoResult)(nil), "imapigateway.GetUserInfoResult")
	proto.RegisterType((*SendGameRedReq)(nil), "imapigateway.SendGameRedReq")
	proto.RegisterType((*QryGameRdpReq)(nil), "imapigateway.QryGameRdpReq")
	proto.RegisterType((*RcvGameRedReq)(nil), "imapigateway.RcvGameRedReq")
	proto.RegisterType((*GameRedResp)(nil), "imapigateway.GameRedResp")
	proto.RegisterType((*SendRDPReq)(nil), "imapigateway.SendRDPReq")
	proto.RegisterType((*SendRDPResp)(nil), "imapigateway.SendRDPResp")
	proto.RegisterType((*CheckRDPReq)(nil), "imapigateway.CheckRDPReq")
	proto.RegisterType((*CheckRDPResp)(nil), "imapigateway.CheckRDPResp")
	proto.RegisterType((*ReceiveRDPReq)(nil), "imapigateway.ReceiveRDPReq")
	proto.RegisterType((*ReceiveRDPResp)(nil), "imapigateway.ReceiveRDPResp")
	proto.RegisterType((*ReplyEditChannelAbout)(nil), "imapigateway.ReplyEditChannelAbout")
	proto.RegisterType((*ReplyEditChannelTitle)(nil), "imapigateway.ReplyEditChannelTitle")
	proto.RegisterType((*BotUpdateInfo)(nil), "imapigateway.BotUpdateInfo")
	proto.RegisterType((*BotUpdateInfoResult)(nil), "imapigateway.BotUpdateInfoResult")
	proto.RegisterType((*ReplyUpdatePinnedChannelMessage)(nil), "imapigateway.ReplyUpdatePinnedChannelMessage")
	proto.RegisterType((*ReplyLeaveChannel)(nil), "imapigateway.ReplyLeaveChannel")
	proto.RegisterType((*ReqGetAllChats)(nil), "imapigateway.ReqGetAllChats")
	proto.RegisterType((*ReplyGetAllChats)(nil), "imapigateway.ReplyGetAllChats")
	proto.RegisterType((*ReqGetchannelDifference)(nil), "imapigateway.ReqGetchannelDifference")
	proto.RegisterType((*ReplyChannelDiffCommon)(nil), "imapigateway.ReplyChannelDiffCommon")
	proto.RegisterType((*ReqFullchannel)(nil), "imapigateway.ReqFullchannel")
	proto.RegisterType((*ReplyFullChannel)(nil), "imapigateway.ReplyFullChannel")
	proto.RegisterType((*ReqDeleteMessages)(nil), "imapigateway.ReqDeleteMessages")
	proto.RegisterType((*ReplyDeleteMessages)(nil), "imapigateway.ReplyDeleteMessages")
	proto.RegisterType((*RegisterUserInfoReq)(nil), "imapigateway.RegisterUserInfoReq")
	proto.RegisterType((*ReqGetFullChannel)(nil), "imapigateway.ReqGetFullChannel")
	proto.RegisterType((*ReqGetParticipants)(nil), "imapigateway.ReqGetParticipants")
	proto.RegisterType((*ReqUpdatePinnedChannelMessage)(nil), "imapigateway.ReqUpdatePinnedChannelMessage")
	proto.RegisterType((*ReqEditChannelAbout)(nil), "imapigateway.ReqEditChannelAbout")
	proto.RegisterType((*ReqEditChannelTitle)(nil), "imapigateway.ReqEditChannelTitle")
	proto.RegisterType((*ReplyChannelData)(nil), "imapigateway.ReplyChannelData")
	proto.RegisterType((*ReqDelManualBlockList)(nil), "imapigateway.ReqDelManualBlockList")
	proto.RegisterType((*ReqSetManualBlockList)(nil), "imapigateway.ReqSetManualBlockList")
	proto.RegisterType((*BlockUser)(nil), "imapigateway.BlockUser")
	proto.RegisterType((*ManualBlockReplyData)(nil), "imapigateway.ManualBlockReplyData")
	proto.RegisterType((*StoreShopStickerSetDocumentsReq)(nil), "imapigateway.StoreShopStickerSetDocumentsReq")
	proto.RegisterType((*StoreShopStickerSetDocumentsResult)(nil), "imapigateway.StoreShopStickerSetDocumentsResult")
	proto.RegisterType((*AuthorStickerSet)(nil), "imapigateway.AuthorStickerSet")
	proto.RegisterType((*GetAuthorAllStickerSetReq)(nil), "imapigateway.GetAuthorAllStickerSetReq")
	proto.RegisterType((*GetAuthorAllStickerSetResult)(nil), "imapigateway.GetAuthorAllStickerSetResult")
	proto.RegisterType((*DeleteStickerPackDocumentReq)(nil), "imapigateway.DeleteStickerPackDocumentReq")
	proto.RegisterType((*DeleteStickerPackDocumentResult)(nil), "imapigateway.DeleteStickerPackDocumentResult")
	proto.RegisterType((*GetStickerSetInfoReq)(nil), "imapigateway.GetStickerSetInfoReq")
	proto.RegisterType((*StickerSetInfo)(nil), "imapigateway.StickerSetInfo")
	proto.RegisterType((*GetStickerSetInfoResult)(nil), "imapigateway.GetStickerSetInfoResult")
	proto.RegisterType((*DeleteStickerSetReq)(nil), "imapigateway.DeleteStickerSetReq")
	proto.RegisterType((*DeleteStickerSetResult)(nil), "imapigateway.DeleteStickerSetResult")
	proto.RegisterType((*StoreUserStickerSetReq)(nil), "imapigateway.StoreUserStickerSetReq")
	proto.RegisterType((*StoreUserStickerSetResult)(nil), "imapigateway.StoreUserStickerSetResult")
	proto.RegisterType((*StoreStickerPackDcReq)(nil), "imapigateway.StoreStickerPackDcReq")
	proto.RegisterType((*StoreStickerPackDcResult)(nil), "imapigateway.StoreStickerPackDcResult")
	proto.RegisterType((*StoreShopStickerSetReq)(nil), "imapigateway.StoreShopStickerSetReq")
	proto.RegisterType((*StoreShopStickerSetResult)(nil), "imapigateway.StoreShopStickerSetResult")
	proto.RegisterType((*ResizeRequest)(nil), "imapigateway.ResizeRequest")
	proto.RegisterType((*ResizeReply)(nil), "imapigateway.ResizeReply")
	proto.RegisterType((*ConstraintRequest)(nil), "imapigateway.ConstraintRequest")
	proto.RegisterType((*ConstraintReply)(nil), "imapigateway.ConstraintReply")
	proto.RegisterType((*CompressImageRequest)(nil), "imapigateway.CompressImageRequest")
	proto.RegisterType((*CompressImageReply)(nil), "imapigateway.CompressImageReply")
	proto.RegisterType((*VideoPreviewRequest)(nil), "imapigateway.VideoPreviewRequest")
	proto.RegisterType((*VideoPreviewReply)(nil), "imapigateway.VideoPreviewReply")
	proto.RegisterType((*AudioPreviewRequest)(nil), "imapigateway.AudioPreviewRequest")
	proto.RegisterType((*AudioPreviewReply)(nil), "imapigateway.AudioPreviewReply")
	proto.RegisterType((*ReqParticipants)(nil), "imapigateway.ReqParticipants")
	proto.RegisterType((*ReplyParticipants)(nil), "imapigateway.ReplyParticipants")
	proto.RegisterType((*ReqCreateChat)(nil), "imapigateway.ReqCreateChat")
	proto.RegisterType((*ReplyCreateChat)(nil), "imapigateway.ReplyCreateChat")
	proto.RegisterType((*ReqMigrateChat)(nil), "imapigateway.ReqMigrateChat")
	proto.RegisterType((*ReplyMigrateChat)(nil), "imapigateway.ReplyMigrateChat")
	proto.RegisterType((*ReqJoinChannel)(nil), "imapigateway.ReqJoinChannel")
	proto.RegisterType((*ReplyJoinChannel)(nil), "imapigateway.ReplyJoinChannel")
	proto.RegisterType((*ReqChangeGroupAndChannelCrator)(nil), "imapigateway.ReqChangeGroupAndChannelCrator")
	proto.RegisterType((*ReplyChangeGroupAndChannelCrator)(nil), "imapigateway.ReplyChangeGroupAndChannelCrator")
	proto.RegisterType((*ReqBotCallMessageMedia)(nil), "imapigateway.ReqBotCallMessageMedia")
	proto.RegisterType((*RequestDialog)(nil), "imapigateway.RequestDialog")
	proto.RegisterType((*ReplyDialog)(nil), "imapigateway.ReplyDialog")
	proto.RegisterType((*UserScore)(nil), "imapigateway.UserScore")
	proto.RegisterType((*ReqSetGameScore)(nil), "imapigateway.ReqSetGameScore")
	proto.RegisterType((*ReplySetGameScore)(nil), "imapigateway.ReplySetGameScore")
	proto.RegisterType((*ReplyBanChannelUser)(nil), "imapigateway.ReplyBanChannelUser")
	proto.RegisterType((*ReqBanChannelUser)(nil), "imapigateway.ReqBanChannelUser")
	proto.RegisterType((*ChannelBannedRights)(nil), "imapigateway.ChannelBannedRights")
	proto.RegisterType((*ReqGetChannels)(nil), "imapigateway.ReqGetChannels")
	proto.RegisterType((*ReplyGetChannels)(nil), "imapigateway.ReplyGetChannels")
	proto.RegisterType((*ReqDeleteChatUser)(nil), "imapigateway.ReqDeleteChatUser")
	proto.RegisterType((*ReplyDeleteChatUser)(nil), "imapigateway.ReplyDeleteChatUser")
	proto.RegisterType((*ChannelInactiveUser)(nil), "imapigateway.ChannelInactiveUser")
	proto.RegisterType((*GetChannelInactiveUsersReq)(nil), "imapigateway.GetChannelInactiveUsersReq")
	proto.RegisterType((*GetChannelInactiveUsersResult)(nil), "imapigateway.GetChannelInactiveUsersResult")
	proto.RegisterType((*ReqBotInlineCall)(nil), "imapigateway.ReqBotInlineCall")
	proto.RegisterType((*ReplyBotInlineCall)(nil), "imapigateway.ReplyBotInlineCall")
	proto.RegisterType((*InlineCall)(nil), "imapigateway.InlineCall")
	proto.RegisterType((*ReqSendUserMsg)(nil), "imapigateway.ReqSendUserMsg")
	proto.RegisterType((*ReplyBool)(nil), "imapigateway.ReplyBool")
	proto.RegisterType((*ReqBotCall)(nil), "imapigateway.ReqBotCall")
	proto.RegisterType((*ReplyBotCall)(nil), "imapigateway.ReplyBotCall")
	proto.RegisterType((*ReqGetMessageByUserIdUuid)(nil), "imapigateway.ReqGetMessageByUserIdUuid")
	proto.RegisterType((*ReplyGetMessageByUserIdUuid)(nil), "imapigateway.ReplyGetMessageByUserIdUuid")
	proto.RegisterType((*ReqGetChannelMessageByChannelIdMsgId)(nil), "imapigateway.ReqGetChannelMessageByChannelIdMsgId")
	proto.RegisterType((*ReplyGetChannelMessageByChannelIdMsgId)(nil), "imapigateway.ReplyGetChannelMessageByChannelIdMsgId")
	proto.RegisterType((*ReqGetMessageByUserIdMsgId)(nil), "imapigateway.ReqGetMessageByUserIdMsgId")
	proto.RegisterType((*ReplyGetMessageByUserIdMsgId)(nil), "imapigateway.ReplyGetMessageByUserIdMsgId")
	proto.RegisterType((*MsgFileDescReq)(nil), "imapigateway.MsgFileDescReq")
	proto.RegisterType((*MsgFileDescResp)(nil), "imapigateway.MsgFileDescResp")
	proto.RegisterType((*MsgServiceLimitReq)(nil), "imapigateway.MsgServiceLimitReq")
	proto.RegisterType((*MsgServiceLimitResp)(nil), "imapigateway.MsgServiceLimitResp")
	proto.RegisterType((*MsgGetFidReq)(nil), "imapigateway.MsgGetFidReq")
	proto.RegisterType((*MsgGetFidResp)(nil), "imapigateway.MsgGetFidResp")
	proto.RegisterType((*MsgFilePartsReq)(nil), "imapigateway.MsgFilePartsReq")
	proto.RegisterType((*MsgDownloadFileReq)(nil), "imapigateway.MsgDownloadFileReq")
	proto.RegisterType((*DownloadFileRespPara1)(nil), "imapigateway.DownloadFileRespPara1")
	proto.RegisterType((*DownloadFileRespPara2)(nil), "imapigateway.DownloadFileRespPara2")
	proto.RegisterType((*MsgDownloadFileResp)(nil), "imapigateway.MsgDownloadFileResp")
	proto.RegisterType((*MsgQueryObjInfoReq)(nil), "imapigateway.MsgQueryObjInfoReq")
	proto.RegisterType((*QueryObjInfoRespPara)(nil), "imapigateway.QueryObjInfoRespPara")
	proto.RegisterType((*MsgQueryObjInfoResp)(nil), "imapigateway.MsgQueryObjInfoResp")
	proto.RegisterType((*MsgGetFileDescReq)(nil), "imapigateway.MsgGetFileDescReq")
	proto.RegisterType((*MsgGetFileDescResp)(nil), "imapigateway.MsgGetFileDescResp")
	proto.RegisterType((*GetChannelInfoReq)(nil), "imapigateway.GetChannelInfoReq")
	proto.RegisterType((*GetChannelInfoResp)(nil), "imapigateway.GetChannelInfoResp")
	proto.RegisterType((*ReqGetAdminGroups)(nil), "imapigateway.ReqGetAdminGroups")
	proto.RegisterType((*ReqGetGroups)(nil), "imapigateway.ReqGetGroups")
	proto.RegisterType((*Peer)(nil), "imapigateway.Peer")
	proto.RegisterType((*ReplyGetGroups)(nil), "imapigateway.ReplyGetGroups")
	proto.RegisterType((*ReqDeleteMessage)(nil), "imapigateway.ReqDeleteMessage")
	proto.RegisterType((*ReqSendChatAction)(nil), "imapigateway.ReqSendChatAction")
	proto.RegisterType((*ReqData)(nil), "imapigateway.ReqData")
	proto.RegisterType((*ReplyData)(nil), "imapigateway.ReplyData")
	proto.RegisterType((*ReqGetChatMembersCount)(nil), "imapigateway.ReqGetChatMembersCount")
	proto.RegisterType((*ReplyGetChatMembersCount)(nil), "imapigateway.ReplyGetChatMembersCount")
	proto.RegisterType((*GetChatInfoReq)(nil), "imapigateway.GetChatInfoReq")
	proto.RegisterType((*GetUsersChatsReq)(nil), "imapigateway.GetUsersChatsReq")
	proto.RegisterType((*GetUsersChatsResult)(nil), "imapigateway.GetUsersChatsResult")
	proto.RegisterType((*GetUserInfoByIdReq)(nil), "imapigateway.GetUserInfoByIdReq")
	proto.RegisterType((*GetUserInfoByIdArrReq)(nil), "imapigateway.GetUserInfoByIdArrReq")
	proto.RegisterType((*UpdateUserProfileReq)(nil), "imapigateway.UpdateUserProfileReq")
	proto.RegisterType((*UpdateUserProfileResult)(nil), "imapigateway.UpdateUserProfileResult")
	proto.RegisterType((*GetUserByphone)(nil), "imapigateway.GetUserByphone")
	proto.RegisterType((*UpdateBotInfoSuppReq)(nil), "imapigateway.UpdateBotInfoSuppReq")
	proto.RegisterType((*UpdateBotInfoSuppResult)(nil), "imapigateway.UpdateBotInfoSuppResult")
	proto.RegisterType((*UpdateBotPicRequest)(nil), "imapigateway.UpdateBotPicRequest")
	proto.RegisterType((*UpdateBotPicResult)(nil), "imapigateway.UpdateBotPicResult")
	proto.RegisterType((*UpdateuserNameReq)(nil), "imapigateway.UpdateuserNameReq")
	proto.RegisterType((*UpdateuserNameResult)(nil), "imapigateway.UpdateuserNameResult")
	proto.RegisterType((*RegisterUserInfoResult)(nil), "imapigateway.RegisterUserInfoResult")
	proto.RegisterType((*DeleteAccountByIdReq)(nil), "imapigateway.DeleteAccountByIdReq")
	proto.RegisterType((*DelAccountResult)(nil), "imapigateway.DelAccountResult")
	proto.RegisterType((*SignUpReq)(nil), "imapigateway.SignUpReq")
	proto.RegisterType((*AuthSignUpResult)(nil), "imapigateway.AuthSignUpResult")
	proto.RegisterType((*GetFullUserReq)(nil), "imapigateway.GetFullUserReq")
	proto.RegisterType((*GetFullUserResult)(nil), "imapigateway.GetFullUserResult")
	proto.RegisterType((*GetUserByUsername)(nil), "imapigateway.GetUserByUsername")
	proto.RegisterType((*ReqGetFullChat)(nil), "imapigateway.ReqGetFullChat")
	proto.RegisterType((*ReplyGetFullChat)(nil), "imapigateway.ReplyGetFullChat")
	proto.RegisterType((*ReqLeaveChannel)(nil), "imapigateway.ReqLeaveChannel")
	proto.RegisterType((*ReqSendMedia)(nil), "imapigateway.ReqSendMedia")
	proto.RegisterType((*ReplyResult)(nil), "imapigateway.ReplyResult")
	proto.RegisterType((*ReqEditChatTitle)(nil), "imapigateway.ReqEditChatTitle")
	proto.RegisterType((*ReplyEditChatTitle)(nil), "imapigateway.ReplyEditChatTitle")
	proto.RegisterType((*GetStickerSetPackDcInfosReq)(nil), "imapigateway.GetStickerSetPackDcInfosReq")
	proto.RegisterType((*GetStickerSetPackDcInfosResult)(nil), "imapigateway.GetStickerSetPackDcInfosResult")
	proto.RegisterType((*StickerPackDocumentBase)(nil), "imapigateway.StickerPackDocumentBase")
	proto.RegisterType((*StickerPackDocumentInfo)(nil), "imapigateway.StickerPackDocumentInfo")
	proto.RegisterType((*GetUserInfoByIdArrResult)(nil), "imapigateway.GetUserInfoByIdArrResult")
	proto.RegisterType((*SetBotVerifiedReq)(nil), "imapigateway.SetBotVerifiedReq")
	proto.RegisterType((*SetBotVerifiedReply)(nil), "imapigateway.SetBotVerifiedReply")
	proto.RegisterType((*ContactsGetCommonContactsReq)(nil), "imapigateway.ContactsGetCommonContactsReq")
	proto.RegisterType((*ContactsGetCommonContactsResult)(nil), "imapigateway.ContactsGetCommonContactsResult")
}

func init() { proto.RegisterFile("imapigateway.proto", fileDescriptor_7b5652c59339596b) }

var fileDescriptor_7b5652c59339596b = []byte{
	// 8181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7d, 0x6b, 0x6f, 0x24, 0x59,
	0x96, 0x90, 0x23, 0xdf, 0x79, 0x9c, 0xe9, 0xca, 0x0a, 0x3f, 0xca, 0x95, 0xe5, 0x72, 0x55, 0x47,
	0x4d, 0xcf, 0xd6, 0x14, 0x43, 0xef, 0x8c, 0xe9, 0xa6, 0xbb, 0x60, 0x17, 0xc6, 0x8f, 0xb2, 0x2b,
	0xa7, 0xca, 0x2e, 0x77, 0x64, 0x55, 0xd7, 0x6a, 0x76, 0xd9, 0x24, 0x9c, 0x71, 0x9d, 0x19, 0x38,
	0x32, 0x22, 0x1d, 0x11, 0xe9, 0x2a, 0xf7, 0x2c, 0x0f, 0x69, 0x19, 0x69, 0xa7, 0xd1, 0x6a, 0x19,
	0x96, 0x87, 0xf8, 0x86, 0x46, 0x20, 0xb1, 0x82, 0x2f, 0x48, 0x48, 0x48, 0x88, 0x0f, 0x80, 0x56,
	0xc3, 0xae, 0x10, 0x12, 0x0b, 0x12, 0x9f, 0x00, 0xad, 0x06, 0xc4, 0x17, 0x04, 0x7f, 0x01, 0x74,
	0xcf, 0xbd, 0x37, 0xe2, 0xc6, 0x2b, 0xd3, 0xe9, 0xea, 0xe9, 0x95, 0xf6, 0x8b, 0x9d, 0xe7, 0xdc,
	0xf7, 0xb9, 0xe7, 0x9e, 0x7b, 0xee, 0xb9, 0xe7, 0x9e, 0x00, 0xd5, 0x1a, 0x19, 0x63, 0x6b, 0x60,
	0x04, 0xe4, 0x8d, 0x71, 0xf9, 0xc1, 0xd8, 0x73, 0x03, 0x57, 0x6d, 0xc8, 0xb8, 0x76, 0xa3, 0xef,
	0x8e, 0x46, 0xae, 0xc3, 0xd2, 0xb4, 0x5f, 0x86, 0x65, 0x9d, 0x9c, 0x1f, 0x92, 0xd1, 0x09, 0xf1,
	0x9e, 0x93, 0x0b, 0x62, 0xef, 0x1a, 0xfd, 0x21, 0x51, 0xdb, 0x50, 0xb3, 0x46, 0xaf, 0x7c, 0xe2,
	0x75, 0xcc, 0x75, 0xe5, 0xbe, 0xf2, 0xb0, 0xac, 0x87, 0xb0, 0xba, 0x0e, 0x55, 0x6b, 0xf4, 0x8c,
	0x5c, 0x76, 0xcc, 0xf5, 0xc2, 0x7d, 0xe5, 0x61, 0x49, 0x17, 0xa0, 0xba, 0x04, 0x05, 0x6b, 0xbc,
	0x5e, 0xbc, 0xaf, 0x3c, 0xac, 0xeb, 0x05, 0x6b, 0xac, 0xfd, 0x50, 0x81, 0x55, 0x9d, 0x8c, 0xed,
	0xcb, 0x54, 0xfd, 0x6b, 0x50, 0xf1, 0x03, 0x23, 0x98, 0xf8, 0xbc, 0x76, 0x0e, 0xa9, 0x2d, 0x28,
	0x8e, 0xfc, 0x01, 0xd6, 0x5b, 0xd7, 0xe9, 0x4f, 0x55, 0x83, 0xc6, 0x85, 0x35, 0x66, 0x45, 0x5d,
	0x93, 0x60, 0xed, 0x65, 0x3d, 0x86, 0x93, 0xf3, 0x1c, 0x19, 0x23, 0xb2, 0x5e, 0xc2, 0xe2, 0x31,
	0x9c, 0xe6, 0xc1, 0xea, 0xee, 0x90, 0xf4, 0xcf, 0x3a, 0x7e, 0x97, 0xd8, 0xa7, 0xbb, 0xae, 0x13,
	0x18, 0xfd, 0x40, 0x27, 0xe7, 0xd8, 0x15, 0x62, 0x9f, 0x86, 0x03, 0xe5, 0x10, 0xc5, 0x4f, 0x18,
	0x01, 0x0a, 0x0c, 0xcf, 0x20, 0xf5, 0x1b, 0x50, 0x36, 0xc9, 0xc9, 0x64, 0x80, 0x3d, 0x59, 0xdc,
	0x5a, 0xfe, 0x20, 0x46, 0xf1, 0x3d, 0x9a, 0xa4, 0xb3, 0x1c, 0xda, 0x1b, 0x58, 0xcf, 0x6a, 0xd3,
	0x9f, 0xd8, 0x81, 0xfa, 0x35, 0x68, 0xc6, 0xd0, 0xd8, 0x7a, 0x4d, 0x8f, 0x23, 0xd5, 0x8f, 0xa0,
	0xfe, 0xc4, 0xf3, 0x5c, 0xaf, 0x4f, 0x87, 0x4e, 0xfb, 0xb1, 0xb4, 0x75, 0x2b, 0xde, 0xa0, 0x4e,
	0x9e, 0x78, 0x1e, 0xa5, 0x82, 0x1e, 0xe5, 0xd4, 0xfe, 0x9e, 0x02, 0xb7, 0xba, 0xc4, 0xf0, 0xfa,
	0x43, 0x3a, 0x67, 0x3b, 0x97, 0x47, 0x56, 0xff, 0xcc, 0x31, 0x46, 0x84, 0x8e, 0xb7, 0x0d, 0x35,
	0x87, 0x83, 0xd8, 0x66, 0x5d, 0x0f, 0x61, 0xf5, 0x36, 0xd4, 0xe8, 0x28, 0x7b, 0x96, 0xe9, 0xaf,
	0x17, 0xee, 0x17, 0x1f, 0x96, 0xf5, 0x2a, 0x1b, 0xb5, 0x4f, 0xc9, 0xe1, 0x9e, 0x9e, 0xfa, 0x24,
	0xe0, 0x33, 0xc0, 0x21, 0x75, 0x05, 0xca, 0xb6, 0x35, 0xb2, 0x02, 0x24, 0x7a, 0x59, 0x67, 0x80,
	0x7a, 0x0b, 0xaa, 0x94, 0x8c, 0x3d, 0xcb, 0x5c, 0x2f, 0xcb, 0x54, 0xd5, 0xbe, 0x50, 0xa0, 0x9d,
	0xdd, 0x33, 0xa4, 0xca, 0x47, 0x00, 0xac, 0x03, 0xce, 0xa9, 0x4b, 0x79, 0xa3, 0xf8, 0x70, 0x71,
	0x6b, 0x2d, 0x3e, 0x60, 0xec, 0x90, 0x73, 0xea, 0xea, 0x75, 0xf1, 0xcb, 0xbf, 0x2e, 0x99, 0xfe,
	0x61, 0x11, 0x5a, 0x87, 0xee, 0x88, 0x38, 0xc1, 0x91, 0x1b, 0x58, 0xa7, 0x97, 0x7b, 0x46, 0x60,
	0xa8, 0xf7, 0x60, 0xd1, 0x77, 0x27, 0x5e, 0x9f, 0xf4, 0xb0, 0x36, 0xc6, 0x14, 0xc0, 0x50, 0xc8,
	0x6d, 0x0f, 0xa0, 0x79, 0x32, 0xf1, 0x2d, 0x87, 0xf8, 0x7e, 0x2f, 0x6c, 0xb0, 0xac, 0x37, 0x04,
	0x12, 0x33, 0x2d, 0x43, 0x39, 0x70, 0xe9, 0xf0, 0x19, 0xb5, 0x4a, 0x81, 0xdb, 0x31, 0x29, 0x55,
	0xde, 0x58, 0xc1, 0x90, 0xa2, 0x19, 0xb5, 0x2a, 0x14, 0xec, 0x98, 0x94, 0xee, 0xa7, 0xae, 0x37,
	0x19, 0x09, 0x7a, 0x15, 0xf5, 0x2a, 0xc2, 0x1d, 0x53, 0xbd, 0x0b, 0xc0, 0x92, 0x82, 0xcb, 0x31,
	0x59, 0xaf, 0x60, 0x62, 0x1d, 0x31, 0x2f, 0x2f, 0xc7, 0x84, 0xf6, 0x96, 0x97, 0x1c, 0x19, 0x03,
	0xb2, 0x5e, 0xc5, 0x09, 0x65, 0x25, 0x3a, 0x14, 0x23, 0x95, 0x27, 0x6f, 0x83, 0xf5, 0x1a, 0xa6,
	0xf3, 0xf2, 0xe4, 0x6d, 0xa0, 0xae, 0x42, 0x65, 0xe4, 0x0f, 0x68, 0xbb, 0x75, 0xac, 0xba, 0x3c,
	0xf2, 0x07, 0x1d, 0x93, 0x56, 0x4b, 0xd1, 0x7d, 0xd7, 0x09, 0x88, 0x13, 0xac, 0x03, 0xab, 0x76,
	0xe4, 0x0f, 0x76, 0x19, 0x86, 0x66, 0xb0, 0xfc, 0xde, 0xa9, 0x6b, 0xdb, 0xee, 0x1b, 0x62, 0xae,
	0x2f, 0x62, 0x61, 0xb0, 0xfc, 0x7d, 0x8e, 0xa1, 0x43, 0xa2, 0x35, 0x04, 0xd6, 0x88, 0xac, 0x37,
	0xd8, 0x90, 0x46, 0xfe, 0xe0, 0xa5, 0x35, 0x22, 0xea, 0x07, 0x50, 0x25, 0x4e, 0x60, 0x05, 0xc4,
	0x5f, 0x6f, 0xe2, 0x0c, 0xaf, 0xc4, 0xe7, 0xea, 0x09, 0x4d, 0xbc, 0xd4, 0x45, 0x26, 0xed, 0x0d,
	0x54, 0x18, 0x4a, 0x55, 0xa1, 0x84, 0x64, 0x50, 0x38, 0x51, 0x29, 0x05, 0x22, 0xc6, 0x2c, 0xc4,
	0x18, 0x73, 0x0d, 0x2a, 0x36, 0x71, 0x06, 0xc1, 0x50, 0x30, 0x2c, 0x83, 0xe8, 0x24, 0x70, 0x1e,
	0xc7, 0x49, 0x68, 0x86, 0x0b, 0xbb, 0x05, 0xc5, 0x89, 0x67, 0x23, 0xfd, 0xeb, 0x3a, 0xfd, 0xa9,
	0xf5, 0xe0, 0x86, 0xcc, 0x1e, 0x74, 0xf5, 0x3c, 0x07, 0x75, 0x84, 0xa8, 0x9e, 0x83, 0xb8, 0x9e,
	0x69, 0x04, 0x06, 0x67, 0xd4, 0xcd, 0xf8, 0x30, 0x92, 0x9c, 0xa5, 0xb7, 0x46, 0x09, 0x8c, 0x76,
	0x0c, 0x6a, 0xbc, 0x01, 0x5c, 0x04, 0x77, 0x01, 0x08, 0xe5, 0xd1, 0x88, 0x01, 0x9b, 0x7a, 0x1d,
	0x31, 0xc8, 0x5a, 0x77, 0x80, 0x01, 0xbd, 0x48, 0x52, 0xd6, 0x10, 0x71, 0xe8, 0x0f, 0xb4, 0x4e,
	0x28, 0xe6, 0x0e, 0x27, 0x01, 0x91, 0xc4, 0x9c, 0xb4, 0x22, 0xe3, 0x72, 0x4e, 0xa2, 0x47, 0x4c,
	0xd0, 0x69, 0xff, 0x4c, 0x09, 0xc5, 0x57, 0xac, 0x2e, 0xec, 0xe3, 0x0b, 0xbe, 0xe2, 0x76, 0x45,
	0x17, 0x97, 0xb6, 0xbe, 0x1d, 0x1f, 0x7e, 0x5e, 0xd1, 0x0f, 0xd8, 0x3f, 0x69, 0x2d, 0xe2, 0xa8,
	0xd6, 0xa0, 0xe2, 0x61, 0x02, 0xf6, 0xa2, 0xa6, 0x73, 0x48, 0xfb, 0x26, 0x40, 0x54, 0x40, 0x5d,
	0x84, 0x6a, 0x77, 0xd2, 0xef, 0x13, 0xdf, 0x6f, 0x2d, 0xa8, 0x37, 0xa1, 0xd9, 0x71, 0x02, 0xe2,
	0x39, 0x86, 0x8d, 0xf5, 0xb4, 0x14, 0xed, 0x31, 0x2c, 0x32, 0x82, 0x76, 0x03, 0x23, 0x20, 0x92,
	0x0c, 0x57, 0x50, 0x9a, 0x89, 0xa9, 0x16, 0x7c, 0x54, 0x88, 0xf8, 0x48, 0xb3, 0xa0, 0xa5, 0x93,
	0xf3, 0x57, 0x63, 0xd3, 0x08, 0x08, 0xab, 0xc3, 0x57, 0x7f, 0x11, 0x1a, 0xa3, 0xa8, 0x3a, 0x21,
	0x90, 0x6e, 0x67, 0xcd, 0x33, 0xe6, 0xd0, 0x63, 0xd9, 0xa5, 0xad, 0xa5, 0x10, 0x13, 0x82, 0x9f,
	0xd0, 0xa6, 0xfc, 0x78, 0x53, 0x2a, 0x94, 0x24, 0x79, 0x83, 0xbf, 0xd3, 0xbb, 0xa1, 0xf6, 0xbb,
	0x05, 0x58, 0xec, 0x33, 0x6a, 0x52, 0xc9, 0x27, 0x4f, 0x9e, 0x12, 0xdb, 0xa5, 0xee, 0x02, 0xf0,
	0x7c, 0xd1, 0xc4, 0xd6, 0x45, 0x49, 0x26, 0x55, 0x2c, 0xcf, 0x0f, 0x7a, 0xb8, 0x0d, 0x14, 0xb9,
	0x54, 0xa0, 0x18, 0xba, 0x59, 0x52, 0x16, 0xb3, 0x0d, 0x91, 0xca, 0x76, 0xd3, 0x1a, 0x45, 0x60,
	0xe2, 0x23, 0xb8, 0x69, 0xf9, 0x3d, 0x64, 0x26, 0x5e, 0x21, 0x61, 0x52, 0xab, 0xa6, 0xdf, 0xb0,
	0xe4, 0xdd, 0x8b, 0x98, 0x34, 0x2f, 0xe3, 0x3a, 0x5f, 0xca, 0x5b, 0x61, 0x79, 0x91, 0x18, 0x7e,
	0x94, 0xf7, 0x0e, 0xd4, 0xfd, 0xc0, 0xf0, 0x7a, 0x23, 0xc3, 0x3b, 0x43, 0x41, 0x56, 0xd3, 0x6b,
	0x14, 0x71, 0x68, 0x78, 0x67, 0x34, 0x71, 0x68, 0xf8, 0xbd, 0xf1, 0xd0, 0x75, 0x08, 0x4a, 0xb1,
	0x9a, 0x5e, 0x1b, 0x1a, 0xfe, 0x31, 0x85, 0xa9, 0xac, 0x19, 0x78, 0xee, 0x64, 0x2c, 0xc4, 0x58,
	0x59, 0xaf, 0x22, 0xdc, 0x31, 0xe9, 0xf6, 0x64, 0x9c, 0xb8, 0x13, 0x21, 0xc2, 0x18, 0xa0, 0xfd,
	0x2d, 0x05, 0x56, 0xb1, 0xe1, 0xc0, 0x3f, 0x20, 0x01, 0xef, 0x82, 0xcf, 0xb5, 0x81, 0x89, 0xac,
	0xf6, 0x08, 0x7a, 0xae, 0x40, 0xf9, 0x2c, 0x54, 0x79, 0x8a, 0x3a, 0x03, 0xd4, 0xfb, 0xe1, 0x6c,
	0x0c, 0x0d, 0x7f, 0xc8, 0xe9, 0x28, 0xa3, 0x22, 0x6d, 0xa1, 0x34, 0x53, 0x5b, 0xf8, 0x09, 0x5d,
	0x6f, 0x19, 0x9d, 0xc2, 0xf5, 0xf6, 0x38, 0x9c, 0xcf, 0x6d, 0xcf, 0xcb, 0xe6, 0x43, 0x89, 0x2f,
	0x74, 0x29, 0xb3, 0xfa, 0x09, 0x2c, 0x8a, 0x9d, 0x92, 0x96, 0x2d, 0x4c, 0xdd, 0x54, 0xe5, 0xac,
	0xf1, 0x6d, 0xb5, 0x78, 0xe5, 0x6d, 0xf5, 0xf7, 0x15, 0xd8, 0xd0, 0xc9, 0x39, 0x5d, 0x9b, 0x03,
	0xcf, 0xb0, 0x5f, 0x39, 0xd6, 0x05, 0xf1, 0x7c, 0xc3, 0xde, 0xe1, 0x1b, 0x24, 0xd7, 0x13, 0x15,
	0xa1, 0x27, 0xc6, 0xb4, 0xcd, 0x42, 0xbe, 0xb6, 0x59, 0x8c, 0x6b, 0x9b, 0x9b, 0x00, 0x62, 0xcb,
	0xed, 0x88, 0x0d, 0x55, 0xc2, 0xa8, 0x3f, 0x0f, 0x95, 0x53, 0xcf, 0x1d, 0x75, 0x18, 0x73, 0xa6,
	0xba, 0x7e, 0xe8, 0x0f, 0xf6, 0x69, 0xf2, 0x9e, 0xce, 0xb3, 0xd1, 0x25, 0x88, 0xd2, 0x9c, 0xf2,
	0x67, 0x43, 0xc7, 0xdf, 0xda, 0x87, 0xb0, 0x89, 0x1a, 0x6c, 0xfe, 0x60, 0x44, 0x29, 0x36, 0x1c,
	0x56, 0xea, 0xb7, 0x15, 0x68, 0xbe, 0x08, 0x86, 0xc4, 0x7b, 0xe9, 0x19, 0x8e, 0xe0, 0xab, 0x98,
	0x3a, 0xcd, 0x21, 0xca, 0x57, 0xcf, 0x64, 0xbe, 0x62, 0x43, 0x5b, 0x83, 0x4a, 0x67, 0xbc, 0x6d,
	0x9a, 0x1e, 0x67, 0x29, 0x0e, 0x51, 0x7e, 0x43, 0x6d, 0xdd, 0xf7, 0x8d, 0x01, 0x1f, 0x73, 0x51,
	0x97, 0x51, 0x94, 0x94, 0x3a, 0x39, 0xdf, 0xb9, 0xa4, 0xd2, 0xaa, 0x8c, 0xe3, 0x08, 0x61, 0xed,
	0x03, 0x58, 0x92, 0x3b, 0xe5, 0x8f, 0xd5, 0x0d, 0xa8, 0xd3, 0xff, 0x2c, 0xbb, 0x82, 0xd9, 0x23,
	0x84, 0xf6, 0xaf, 0x14, 0x68, 0x75, 0x49, 0x40, 0x7b, 0xba, 0x47, 0x02, 0xc3, 0xb2, 0xf9, 0x3e,
	0x92, 0x2d, 0x71, 0x56, 0xa0, 0x7c, 0x6a, 0x1b, 0x03, 0x9f, 0xcf, 0x20, 0x03, 0x66, 0x09, 0x9a,
	0x15, 0x28, 0x8f, 0x87, 0x6e, 0xe0, 0x72, 0x21, 0xc3, 0x00, 0x2a, 0xf7, 0x7c, 0xf2, 0x96, 0x6b,
	0x8e, 0xf4, 0x27, 0x1d, 0xd6, 0x89, 0xe5, 0x05, 0x43, 0xd3, 0xb8, 0xc4, 0xe9, 0x29, 0xeb, 0x21,
	0x4c, 0x89, 0x45, 0xde, 0x06, 0xc4, 0x31, 0xb9, 0xf6, 0xc3, 0x21, 0xed, 0x23, 0x58, 0x4e, 0xf4,
	0x1e, 0x57, 0xd2, 0x26, 0x80, 0xcf, 0xb6, 0x90, 0xd3, 0x89, 0xcd, 0xb5, 0x6e, 0x09, 0xa3, 0x3d,
	0x83, 0x95, 0x03, 0x56, 0x6c, 0xe7, 0x92, 0xfe, 0x15, 0x7a, 0x73, 0xee, 0x06, 0xda, 0x66, 0x4a,
	0x33, 0x0e, 0x90, 0x6f, 0xc7, 0x02, 0xd6, 0xde, 0xc2, 0x4d, 0x5e, 0x19, 0xae, 0x2e, 0xd6, 0x83,
	0x6f, 0x42, 0xf9, 0x15, 0x55, 0x70, 0xb1, 0x9e, 0xfc, 0xa5, 0xc8, 0x32, 0x5d, 0x57, 0xb7, 0x1d,
	0xc3, 0x52, 0x97, 0x38, 0xe6, 0x01, 0xf6, 0xde, 0xa4, 0x03, 0xd8, 0x80, 0x3a, 0x65, 0x78, 0xc6,
	0x6e, 0x0a, 0x53, 0x24, 0x43, 0x04, 0xa5, 0xe2, 0x3e, 0x5b, 0x2d, 0x05, 0xa6, 0x15, 0x31, 0x88,
	0xce, 0x85, 0x4e, 0xce, 0x71, 0xe6, 0x1a, 0x7a, 0x91, 0xb3, 0xb2, 0x6e, 0x8e, 0x75, 0x7f, 0x8c,
	0x93, 0xd6, 0xd0, 0x39, 0xa4, 0xbd, 0x86, 0xe6, 0xa7, 0xde, 0x25, 0x36, 0x68, 0x8e, 0xdf, 0xb9,
	0xc1, 0x52, 0xd8, 0xa0, 0xe6, 0x42, 0x53, 0xef, 0x5f, 0x7c, 0x85, 0x23, 0x79, 0x06, 0x8b, 0x61,
	0x6b, 0xfe, 0x18, 0xb3, 0x31, 0xd5, 0x44, 0xe1, 0xd9, 0xd8, 0x3c, 0xaa, 0x50, 0xda, 0x8d, 0xf4,
	0x7f, 0xfc, 0x4d, 0x1b, 0x39, 0xf4, 0x07, 0x9c, 0xd1, 0xe9, 0x4f, 0xed, 0x5f, 0x2b, 0x00, 0x74,
	0x26, 0xf4, 0xbd, 0x63, 0xda, 0xe6, 0x37, 0xa0, 0x8c, 0x52, 0x9f, 0x4f, 0x7e, 0xf6, 0x86, 0x80,
	0xff, 0xe8, 0x41, 0xc3, 0x23, 0xe7, 0xbd, 0x11, 0xae, 0x6d, 0x12, 0xca, 0x88, 0x86, 0x27, 0xd6,
	0x3b, 0x49, 0x2c, 0xf8, 0x62, 0x7c, 0xc1, 0xb3, 0x0a, 0x4c, 0xa9, 0x02, 0x26, 0x24, 0x1b, 0x1e,
	0x31, 0xa3, 0x0a, 0xde, 0x03, 0x0a, 0xf7, 0xfa, 0x43, 0xc3, 0x21, 0x76, 0x47, 0x9c, 0xd7, 0x16,
	0x3d, 0x62, 0xee, 0x72, 0x94, 0xf6, 0x5d, 0x58, 0x0c, 0x47, 0x30, 0x4b, 0x6a, 0x24, 0xb4, 0x57,
	0xae, 0x79, 0x84, 0xda, 0xab, 0x76, 0x09, 0x8b, 0xa8, 0x19, 0x7e, 0xf5, 0xe4, 0xd0, 0x9e, 0x41,
	0x23, 0x6a, 0xfa, 0x5d, 0xc7, 0xf1, 0x7d, 0x68, 0xea, 0xa4, 0x4f, 0xac, 0x0b, 0xf2, 0x47, 0x30,
	0x92, 0x43, 0x58, 0x92, 0x1b, 0x7f, 0xd7, 0xb1, 0x1c, 0x73, 0x33, 0xcd, 0x13, 0xd3, 0x0a, 0xe8,
	0xa4, 0x3b, 0xc4, 0xde, 0xa6, 0x7a, 0x12, 0xdd, 0x7c, 0x51, 0x32, 0x12, 0x93, 0x0b, 0x4a, 0x01,
	0xce, 0xaa, 0xf1, 0x79, 0xba, 0xc6, 0x97, 0x56, 0x60, 0xa3, 0xc0, 0xf7, 0x68, 0x02, 0xef, 0x23,
	0x03, 0x66, 0xd5, 0xf6, 0xef, 0x14, 0x68, 0xee, 0xb8, 0x01, 0x53, 0x98, 0xa7, 0xeb, 0xbd, 0x0f,
	0xa1, 0x75, 0xe2, 0x06, 0x68, 0x3f, 0xe8, 0xd1, 0x8d, 0xda, 0x72, 0x1d, 0x5e, 0xdf, 0xd2, 0x89,
	0x8b, 0xba, 0xd1, 0x67, 0x0c, 0x2b, 0x72, 0xf6, 0x87, 0x46, 0xd0, 0x1b, 0x5a, 0x7e, 0xe0, 0x7a,
	0x97, 0x48, 0xe7, 0x1a, 0xe6, 0xdc, 0x1d, 0x1a, 0xc1, 0x53, 0x86, 0x55, 0x37, 0x61, 0x91, 0xe6,
	0x74, 0x5c, 0xcc, 0x8c, 0x8b, 0xa8, 0xa6, 0xd7, 0x4f, 0xdc, 0xe0, 0xc8, 0xa5, 0xd9, 0x22, 0x1d,
	0xaf, 0x3c, 0x53, 0xc7, 0x7b, 0x0e, 0xcb, 0xb1, 0x81, 0x84, 0x66, 0x0f, 0x49, 0xc6, 0x2b, 0x57,
	0x96, 0xf1, 0x9f, 0xc1, 0x3d, 0xa4, 0x32, 0xab, 0xef, 0xd8, 0x72, 0x1c, 0xb6, 0x68, 0x1d, 0x62,
	0x73, 0x3e, 0xba, 0x1e, 0xbd, 0x9f, 0xc2, 0x4d, 0xac, 0xf7, 0x39, 0x31, 0x2e, 0x08, 0xaf, 0xf0,
	0x7a, 0x35, 0x75, 0x29, 0xa3, 0x9e, 0x1f, 0x90, 0x60, 0xdb, 0xb6, 0x29, 0xad, 0xf0, 0x4c, 0x44,
	0xd5, 0xad, 0x68, 0xe2, 0x18, 0x14, 0x11, 0xb1, 0x30, 0x93, 0x88, 0x7f, 0x8e, 0x1e, 0x9f, 0xc6,
	0xf6, 0xa5, 0x5c, 0xed, 0x0a, 0x94, 0xe9, 0xe4, 0xf8, 0xfc, 0xa0, 0xc7, 0x00, 0x8a, 0xc5, 0xbe,
	0x08, 0x9d, 0x04, 0x01, 0xed, 0x27, 0x05, 0xb8, 0xc5, 0x7a, 0xd5, 0x67, 0x63, 0xdb, 0xb3, 0x4e,
	0x4f, 0x89, 0x47, 0x9c, 0x3e, 0x11, 0xdd, 0xeb, 0xc4, 0xba, 0xd7, 0x31, 0xe9, 0xfa, 0x3a, 0x0d,
	0xb7, 0x9c, 0x02, 0xb7, 0xc2, 0x84, 0x5b, 0x4e, 0xa8, 0xfb, 0x14, 0x65, 0xdd, 0x87, 0x62, 0x5d,
	0xaf, 0x4f, 0x38, 0xc7, 0x30, 0x80, 0xd6, 0xc4, 0x9b, 0x0d, 0x85, 0x6d, 0x84, 0xa0, 0xfb, 0xc7,
	0x38, 0xf0, 0xb9, 0x8e, 0x43, 0x7f, 0x46, 0x06, 0xb6, 0xaa, 0x6c, 0x60, 0xbb, 0x07, 0x8b, 0x9e,
	0xe1, 0x0c, 0x48, 0xef, 0xd0, 0x72, 0x3a, 0x26, 0x9e, 0x88, 0xca, 0x3a, 0x20, 0x0a, 0x31, 0x52,
	0x06, 0xe3, 0x6d, 0x47, 0x1c, 0x8b, 0x78, 0x06, 0x8a, 0xa1, 0x23, 0x35, 0xc9, 0x85, 0xd5, 0x27,
	0x78, 0x34, 0x2a, 0xeb, 0x1c, 0x8a, 0x26, 0x62, 0x71, 0xe6, 0x44, 0xbc, 0x86, 0x35, 0x9c, 0x88,
	0xdd, 0x88, 0x8c, 0xbb, 0x68, 0x5c, 0xa6, 0x4a, 0x96, 0x19, 0x12, 0x95, 0x73, 0x8c, 0x84, 0x99,
	0xc5, 0x36, 0x3f, 0x52, 0x90, 0x6f, 0xf6, 0x27, 0xb6, 0xcd, 0x49, 0x33, 0x6d, 0x62, 0x22, 0x72,
	0x16, 0x92, 0xe4, 0xdc, 0x04, 0x30, 0x50, 0xb3, 0x7b, 0x2a, 0xce, 0x67, 0x45, 0x5d, 0xc2, 0xcc,
	0x73, 0x3c, 0x7b, 0xc6, 0xb9, 0x8e, 0x76, 0x4a, 0xac, 0x89, 0x75, 0xa8, 0xb2, 0xb5, 0x27, 0x64,
	0xae, 0x00, 0x67, 0x0d, 0xf0, 0x0f, 0x14, 0xba, 0xc4, 0xce, 0xf7, 0x88, 0x4d, 0x02, 0xc2, 0xd7,
	0x6a, 0xfe, 0xda, 0xa0, 0x4a, 0xb4, 0xe7, 0x8e, 0x7a, 0x67, 0xe4, 0xd2, 0x12, 0x46, 0x77, 0xc1,
	0x7d, 0x56, 0x1e, 0xf7, 0xa1, 0x41, 0xe5, 0xc2, 0x3d, 0x13, 0xec, 0xc7, 0x21, 0x3c, 0x7c, 0x51,
	0xc6, 0xa3, 0xcb, 0xa4, 0x60, 0xc9, 0x04, 0xb4, 0x4c, 0xce, 0x77, 0x11, 0x22, 0x22, 0x50, 0x6d,
	0x26, 0x81, 0x76, 0x61, 0x19, 0x09, 0x94, 0x1e, 0x94, 0x17, 0xd3, 0x9e, 0x18, 0x94, 0xb3, 0x36,
	0xff, 0x5f, 0x91, 0xd6, 0x32, 0xb0, 0xfc, 0x80, 0x78, 0x91, 0xda, 0x3c, 0xe5, 0xd8, 0x71, 0x0f,
	0x16, 0xd9, 0x7c, 0xf6, 0xf0, 0x08, 0x5e, 0x48, 0x4d, 0xf1, 0x7d, 0x58, 0x44, 0x2b, 0xc1, 0xd1,
	0x64, 0x74, 0x42, 0xc4, 0x81, 0x4a, 0x46, 0xa1, 0x3a, 0x29, 0x4e, 0x24, 0xfc, 0x20, 0x12, 0x21,
	0xe8, 0x3e, 0xfc, 0x9c, 0x9b, 0x3e, 0xb8, 0x6d, 0x30, 0x84, 0xd5, 0x55, 0xa8, 0x58, 0x7e, 0xef,
	0xc4, 0x0d, 0xb8, 0x4d, 0xa3, 0x6c, 0xf9, 0x3b, 0x6e, 0x90, 0xb9, 0x09, 0x55, 0xaf, 0xbc, 0x09,
	0xd5, 0x32, 0x37, 0xa1, 0xfb, 0xd0, 0x90, 0x36, 0x21, 0x1f, 0x17, 0x74, 0x4d, 0x87, 0x70, 0x17,
	0xf2, 0xe9, 0x40, 0x77, 0xdd, 0x89, 0x13, 0x78, 0x97, 0xa8, 0x95, 0x32, 0x83, 0x87, 0x8c, 0xa2,
	0xab, 0xe1, 0xb9, 0xdb, 0x37, 0x6c, 0x1c, 0x3c, 0xae, 0xef, 0xba, 0x2e, 0x61, 0x28, 0x6b, 0x98,
	0x7d, 0xb4, 0xd6, 0x96, 0xf5, 0x82, 0xd9, 0xa7, 0x43, 0x3f, 0xf0, 0xdc, 0xc9, 0xf8, 0xc8, 0x7d,
	0xb3, 0xde, 0x64, 0xa7, 0x2e, 0x01, 0x47, 0x8c, 0xb1, 0x34, 0x8b, 0x31, 0xa8, 0x4c, 0xeb, 0x92,
	0xb7, 0xeb, 0x37, 0x98, 0x4c, 0xeb, 0x26, 0x8e, 0x73, 0xad, 0xf8, 0x71, 0x4e, 0xfb, 0xdb, 0x6c,
	0x69, 0x1c, 0x90, 0x40, 0x5e, 0x69, 0x7f, 0xe4, 0xcb, 0xff, 0x7f, 0x28, 0xa0, 0xb2, 0x6e, 0x1d,
	0x1b, 0x5e, 0x60, 0xf5, 0xad, 0xb1, 0xe1, 0x04, 0xe2, 0x5a, 0xa4, 0x4b, 0x02, 0xd1, 0x2f, 0x06,
	0x45, 0x52, 0xbb, 0x20, 0x4b, 0xed, 0x0d, 0xa8, 0x8f, 0x69, 0xe9, 0x97, 0x97, 0x63, 0x71, 0x93,
	0x15, 0x21, 0xe2, 0x63, 0x29, 0x25, 0xc7, 0xb2, 0x16, 0x33, 0x67, 0x44, 0x14, 0x68, 0x80, 0x72,
	0x8e, 0xec, 0x57, 0xd7, 0x95, 0x73, 0x7a, 0x26, 0xc1, 0xb1, 0x32, 0x76, 0x2b, 0xc5, 0x47, 0x39,
	0x7b, 0x0d, 0xff, 0x77, 0x05, 0xee, 0x86, 0x56, 0xd0, 0x4c, 0x85, 0xe2, 0x16, 0x54, 0x51, 0x16,
	0x59, 0xc9, 0x99, 0xc8, 0x3e, 0xff, 0xaf, 0x41, 0xc5, 0xb7, 0x6c, 0xe2, 0x04, 0x5c, 0xb7, 0xe2,
	0xd0, 0x8c, 0xb1, 0x0a, 0x19, 0xa5, 0x70, 0x19, 0x15, 0x17, 0x80, 0x95, 0xd8, 0xf6, 0x2b, 0x0b,
	0xa9, 0xea, 0xcc, 0x01, 0xfe, 0x7b, 0x05, 0x2f, 0x3c, 0x53, 0x9a, 0x6e, 0xee, 0xb0, 0xa6, 0x6f,
	0xfc, 0xb1, 0x61, 0x14, 0x93, 0xc3, 0x08, 0x8d, 0x8f, 0x25, 0xc9, 0xf8, 0x98, 0x60, 0xca, 0x72,
	0x3e, 0x53, 0x56, 0x66, 0x8e, 0xe6, 0x9f, 0xa4, 0x46, 0xc3, 0xb4, 0xec, 0x58, 0xb7, 0x94, 0x8c,
	0x6e, 0x05, 0x34, 0x1b, 0xb7, 0x56, 0x30, 0x40, 0xb2, 0x7c, 0x16, 0x93, 0x96, 0x64, 0x89, 0xf6,
	0xa5, 0x5c, 0xda, 0xcf, 0x56, 0x7e, 0x7f, 0x8d, 0xef, 0xa0, 0x42, 0x5d, 0x30, 0x02, 0x23, 0x47,
	0xab, 0xdc, 0x80, 0x68, 0xaf, 0x4c, 0x6d, 0x9e, 0x34, 0x75, 0x37, 0xc9, 0x3b, 0xbb, 0xf2, 0x3a,
	0xd9, 0x8f, 0xad, 0x13, 0x06, 0x51, 0xb9, 0xb2, 0xca, 0xb6, 0xdc, 0x43, 0xc3, 0x99, 0x18, 0xf6,
	0x8e, 0xed, 0xf6, 0xcf, 0x9e, 0x5b, 0x7e, 0xa0, 0x3e, 0x86, 0xc5, 0x57, 0x0e, 0x82, 0x74, 0xc7,
	0xe1, 0xe7, 0xb7, 0x84, 0xfe, 0x1d, 0x26, 0xeb, 0x72, 0x5e, 0xba, 0x01, 0xa0, 0xa4, 0x17, 0xb2,
	0xa7, 0x4c, 0xe5, 0xfb, 0x5c, 0x77, 0xc4, 0x7f, 0x93, 0x75, 0xab, 0x4b, 0x82, 0x64, 0xb7, 0x3e,
	0x82, 0xfa, 0x95, 0x3b, 0x55, 0xff, 0x32, 0xbb, 0xf4, 0xcb, 0x52, 0xc3, 0xb9, 0x06, 0xf1, 0x0d,
	0xa8, 0x9f, 0xd0, 0x4c, 0x2f, 0x2d, 0x6e, 0xf6, 0x2a, 0xea, 0x11, 0x82, 0x2a, 0x46, 0xdc, 0x02,
	0xcf, 0xa5, 0xae, 0x00, 0xb5, 0x21, 0xac, 0x48, 0x03, 0x65, 0x0a, 0x03, 0x65, 0x84, 0x0d, 0xa8,
	0x7b, 0x02, 0x10, 0x07, 0xd8, 0x10, 0x11, 0xb1, 0x09, 0xbb, 0x1c, 0xca, 0x62, 0x93, 0x62, 0x52,
	0xc7, 0xfa, 0x1c, 0xee, 0x75, 0x03, 0xd7, 0x23, 0xdd, 0xa1, 0x3b, 0xee, 0x06, 0x56, 0xff, 0x8c,
	0x78, 0x5d, 0x12, 0xec, 0xb9, 0xfd, 0x09, 0xde, 0xb8, 0x50, 0xad, 0x82, 0xc9, 0x19, 0x25, 0x94,
	0x33, 0x1b, 0x50, 0x37, 0x45, 0x3a, 0xbf, 0x00, 0x8f, 0x10, 0xf3, 0x91, 0x50, 0x9b, 0xde, 0xf6,
	0xbb, 0x1c, 0xfb, 0x7e, 0xbb, 0x00, 0xad, 0xed, 0x49, 0x30, 0x74, 0xbd, 0xa8, 0xea, 0x7c, 0x05,
	0xe9, 0x01, 0x34, 0x7d, 0x96, 0xcd, 0x27, 0x21, 0x5b, 0x14, 0xf5, 0x46, 0x84, 0x64, 0x8b, 0xdc,
	0x1f, 0xba, 0x5e, 0xdc, 0x4c, 0x8b, 0x18, 0xa1, 0x03, 0x19, 0x5e, 0x7f, 0x68, 0x5d, 0x10, 0x93,
	0x6b, 0x93, 0x21, 0x4c, 0x69, 0x66, 0x39, 0x7e, 0x60, 0xd8, 0x76, 0x78, 0x0d, 0x14, 0x21, 0x68,
	0x49, 0xd3, 0xf2, 0x8d, 0x13, 0x3b, 0xbc, 0xf7, 0x09, 0x61, 0xca, 0x24, 0xae, 0x67, 0x12, 0x8f,
	0x98, 0x7c, 0xbb, 0x12, 0x20, 0x4d, 0xe9, 0x7b, 0xc4, 0x08, 0x88, 0x38, 0xd9, 0x08, 0x90, 0xa6,
	0x4c, 0x70, 0x73, 0x0a, 0x6f, 0x7a, 0x38, 0xa8, 0x7d, 0x08, 0xb7, 0xe9, 0x81, 0x10, 0xe9, 0xb2,
	0x6d, 0xdb, 0x11, 0x69, 0xa6, 0xa9, 0x8f, 0xda, 0x0f, 0x15, 0xd8, 0xc8, 0x2b, 0x16, 0x9b, 0xa3,
	0xdd, 0x2b, 0xcf, 0x11, 0xca, 0xa8, 0x2d, 0x28, 0xf9, 0x84, 0x33, 0x51, 0xea, 0x66, 0x38, 0x39,
	0x79, 0x3a, 0xe6, 0xd5, 0xba, 0xb0, 0xc1, 0x74, 0x67, 0x9e, 0x72, 0x6c, 0xf4, 0xcf, 0x04, 0xcb,
	0x64, 0x71, 0xeb, 0x55, 0x66, 0x56, 0xfb, 0x25, 0xb8, 0x37, 0xa5, 0xd2, 0x77, 0x61, 0xc3, 0x1f,
	0x28, 0x68, 0x29, 0x8f, 0x86, 0x21, 0x74, 0xf5, 0x64, 0x3f, 0xe3, 0xcc, 0x55, 0x48, 0x32, 0xd7,
	0x32, 0x94, 0x2d, 0x5f, 0xb8, 0x4a, 0xd4, 0xf4, 0x92, 0xe5, 0xcb, 0xe2, 0x6a, 0xb6, 0x66, 0xf6,
	0x0f, 0x0a, 0xb0, 0x14, 0xef, 0x44, 0xaa, 0x07, 0x33, 0x0f, 0x09, 0x2a, 0x94, 0x4e, 0x3d, 0x42,
	0x44, 0x17, 0xe8, 0x6f, 0xca, 0xba, 0xee, 0xe9, 0xa9, 0xd5, 0xb7, 0x0c, 0x5b, 0x30, 0xbd, 0x80,
	0xa9, 0x3c, 0x1a, 0x19, 0xfe, 0x99, 0xcf, 0x19, 0x9e, 0x01, 0xd1, 0xc6, 0x5a, 0x91, 0x37, 0xd6,
	0xf8, 0xf0, 0xab, 0xc9, 0xe1, 0xaf, 0x40, 0xb9, 0x4f, 0x75, 0x74, 0xce, 0xe9, 0x0c, 0xa0, 0x1d,
	0xc2, 0xae, 0x32, 0xaf, 0x0c, 0xfc, 0x4d, 0x3b, 0x44, 0x46, 0x6e, 0x60, 0xf5, 0x5d, 0x87, 0x6b,
	0xf7, 0x21, 0x1c, 0x97, 0x5c, 0x8b, 0x09, 0xc9, 0xa5, 0xfd, 0x5d, 0x05, 0x6e, 0x65, 0x4c, 0x15,
	0xce, 0xfe, 0x1e, 0x2c, 0xf9, 0x31, 0x3c, 0xdf, 0x6b, 0x36, 0xe2, 0x24, 0x4f, 0x94, 0x4d, 0x94,
	0xb9, 0xee, 0x2d, 0xc5, 0x1b, 0x58, 0x8e, 0x71, 0x27, 0x5f, 0xae, 0x1b, 0x50, 0xe7, 0xf5, 0x47,
	0xfa, 0x4b, 0x88, 0x98, 0xc3, 0x54, 0x24, 0xaf, 0xfb, 0x98, 0x56, 0xa3, 0xbd, 0x80, 0xb5, 0x74,
	0xc3, 0xef, 0xb2, 0x1a, 0xfe, 0x8f, 0x02, 0x6b, 0x28, 0xf2, 0xe9, 0xae, 0x79, 0x35, 0xe1, 0x93,
	0xbd, 0x80, 0xcb, 0x09, 0xd1, 0x1c, 0x93, 0xaf, 0xc5, 0x69, 0xf2, 0xb5, 0x94, 0x90, 0xaf, 0x2b,
	0x50, 0x46, 0x81, 0xca, 0x15, 0x21, 0x06, 0xc4, 0x64, 0x79, 0x25, 0x21, 0xcb, 0xe7, 0x50, 0xa4,
	0x75, 0xb8, 0x9d, 0x39, 0xdc, 0x34, 0x0d, 0xaf, 0xce, 0x0d, 0xbf, 0xa5, 0xc0, 0x2a, 0xdb, 0x36,
	0x25, 0x59, 0xd5, 0xa7, 0x24, 0x7c, 0xc6, 0x29, 0x35, 0x36, 0xfa, 0x67, 0x27, 0x86, 0x4f, 0x38,
	0x8f, 0xbe, 0x9f, 0xc9, 0xa3, 0xb2, 0x88, 0xdb, 0x31, 0x7c, 0xa2, 0xc7, 0xcb, 0xce, 0x63, 0x6a,
	0x34, 0x60, 0x3d, 0xab, 0x43, 0x38, 0xc8, 0xa4, 0x90, 0xb9, 0xe6, 0xa0, 0xff, 0x6b, 0x81, 0x33,
	0x4e, 0x5c, 0x57, 0xa0, 0xa3, 0x4e, 0x88, 0x2d, 0x25, 0x57, 0x6c, 0x15, 0x72, 0xc4, 0x56, 0x31,
	0x4f, 0x6c, 0x95, 0x32, 0xc5, 0x56, 0x39, 0x5f, 0x6c, 0x55, 0x72, 0xc5, 0x56, 0x35, 0x4b, 0x6c,
	0xd5, 0x72, 0xc4, 0x56, 0x7d, 0x9a, 0xd8, 0x82, 0x5c, 0x85, 0x6b, 0x71, 0x9e, 0x85, 0xde, 0x88,
	0x2d, 0xf4, 0x13, 0xce, 0xa7, 0x49, 0xea, 0x7e, 0x99, 0x53, 0xf8, 0x29, 0x34, 0x75, 0xe2, 0x5b,
	0x9f, 0x13, 0x9d, 0x9c, 0x4f, 0x88, 0x1f, 0xc4, 0x7c, 0x02, 0xb8, 0x27, 0x01, 0x25, 0xd8, 0x1b,
	0xcb, 0x0c, 0x86, 0xfc, 0x56, 0x92, 0x01, 0x54, 0xbd, 0x1e, 0x12, 0x6b, 0x30, 0x64, 0xe7, 0xe3,
	0xa6, 0xce, 0x21, 0xad, 0x0b, 0x8b, 0xa2, 0x4a, 0xaa, 0xe9, 0x7e, 0x2b, 0xe6, 0x2f, 0xbb, 0xb4,
	0xb5, 0x9e, 0x64, 0x7c, 0x9a, 0x86, 0xdd, 0x12, 0x9e, 0xb4, 0xa2, 0x0b, 0x05, 0xc9, 0x99, 0xa1,
	0x0f, 0x37, 0x77, 0x5d, 0xc7, 0x0f, 0x3c, 0xc3, 0x42, 0x8d, 0x22, 0xb7, 0xaf, 0xb7, 0xa1, 0x36,
	0x32, 0xde, 0xf6, 0x68, 0xfb, 0xbc, 0xbb, 0xd5, 0x91, 0xf1, 0xb6, 0x6b, 0x7d, 0x8e, 0x0e, 0x87,
	0xee, 0x24, 0x18, 0x4f, 0x82, 0xde, 0x1b, 0x72, 0x32, 0xe6, 0x1c, 0x06, 0x0c, 0xf5, 0x9a, 0x9c,
	0x8c, 0xb5, 0xff, 0xa0, 0xc0, 0x0d, 0xb9, 0x95, 0x2f, 0xad, 0xfb, 0x11, 0x05, 0x8b, 0xd9, 0x14,
	0x2c, 0xc9, 0x14, 0x54, 0xdf, 0x83, 0x86, 0xeb, 0x59, 0x03, 0xcb, 0xe9, 0xb1, 0x42, 0x65, 0x4c,
	0x5d, 0x64, 0xb8, 0xd7, 0x58, 0xf4, 0x01, 0x34, 0x79, 0x16, 0x5e, 0x43, 0x05, 0xf3, 0xf0, 0x72,
	0x4f, 0xd9, 0x4c, 0xec, 0xc1, 0xca, 0xae, 0x3b, 0x1a, 0x7b, 0xc4, 0xf7, 0xd1, 0xa3, 0x72, 0x1a,
	0xdd, 0xd6, 0xa1, 0x7a, 0x3e, 0x31, 0x6c, 0x2b, 0xb8, 0x14, 0x64, 0xe3, 0xa0, 0xf6, 0x3d, 0x50,
	0x13, 0xb5, 0x7c, 0x79, 0xd3, 0xba, 0x07, 0xcb, 0x9f, 0x59, 0x26, 0x71, 0x8f, 0x3d, 0x72, 0x61,
	0x91, 0x37, 0xd7, 0x9b, 0x58, 0xed, 0x77, 0x14, 0xb8, 0x19, 0xaf, 0xe6, 0x7a, 0x3d, 0xa4, 0x3b,
	0xd2, 0xc4, 0x33, 0x02, 0x71, 0xf3, 0xd6, 0xd4, 0x43, 0x98, 0xd2, 0x67, 0xcc, 0x6a, 0xe7, 0x57,
	0x9a, 0x02, 0x8c, 0xe6, 0xb6, 0x94, 0x3d, 0xb7, 0xe5, 0xd8, 0xea, 0xd8, 0x83, 0xe5, 0xed, 0x89,
	0x69, 0xbd, 0xe3, 0x88, 0xff, 0xb3, 0x02, 0x37, 0xe3, 0xd5, 0x7c, 0xf9, 0x23, 0x46, 0x31, 0x79,
	0xc1, 0xed, 0xce, 0x0d, 0x9d, 0x01, 0x91, 0xc4, 0x2d, 0x25, 0x2c, 0x30, 0x86, 0x17, 0x58, 0x7e,
	0xc0, 0x05, 0x31, 0x87, 0x22, 0xda, 0x54, 0xb2, 0x69, 0x53, 0x8d, 0xd1, 0xe6, 0x0f, 0x15, 0xb8,
	0xa1, 0x93, 0xf3, 0x3f, 0xce, 0x56, 0xca, 0xe7, 0xfc, 0x7e, 0x32, 0x36, 0xc6, 0x6b, 0xdf, 0xc5,
	0xfc, 0x0b, 0x85, 0x8a, 0xef, 0xf3, 0x5d, 0x3c, 0x61, 0xe2, 0x85, 0xee, 0x1a, 0x54, 0xfa, 0x43,
	0x23, 0x88, 0xf4, 0x35, 0x06, 0xe5, 0x18, 0xce, 0xc4, 0x61, 0xd5, 0xf5, 0x38, 0xb1, 0x04, 0x48,
	0xf3, 0xd3, 0x5d, 0x88, 0x6e, 0xb7, 0x78, 0x29, 0x89, 0x40, 0xc2, 0xa0, 0x56, 0x4e, 0xde, 0xe6,
	0xcc, 0x61, 0xfe, 0xfb, 0xf3, 0x74, 0xa6, 0xc7, 0xf6, 0x65, 0xbc, 0xeb, 0xd3, 0x6f, 0x5b, 0xca,
	0xf2, 0x6d, 0xcb, 0x0f, 0xd9, 0x3d, 0xdb, 0xa1, 0x35, 0xf0, 0xa4, 0x0a, 0x32, 0xef, 0xa0, 0x22,
	0x9a, 0x14, 0x62, 0x34, 0xe1, 0xf6, 0x51, 0x36, 0x98, 0x62, 0x34, 0x98, 0xb3, 0xf8, 0x60, 0x66,
	0x1f, 0xe3, 0xbe, 0xc3, 0xad, 0x83, 0x89, 0xce, 0xf0, 0xd1, 0x54, 0xb3, 0x47, 0x53, 0x93, 0x47,
	0xf3, 0xeb, 0x05, 0x1c, 0xcd, 0x77, 0x5d, 0xcb, 0x11, 0xd7, 0x06, 0xd3, 0x0d, 0xa1, 0x57, 0x33,
	0x79, 0x96, 0x93, 0x26, 0xcf, 0xb8, 0x01, 0xb7, 0x92, 0xd2, 0xca, 0xd6, 0xa0, 0x72, 0x72, 0xf9,
	0xdc, 0x72, 0x84, 0x17, 0x2b, 0x87, 0xd0, 0x95, 0xd1, 0xb9, 0xb0, 0x82, 0xb0, 0xdf, 0x02, 0x44,
	0x6f, 0x7a, 0xfa, 0x93, 0x30, 0x2f, 0x7f, 0x7e, 0x59, 0xcb, 0x50, 0xb8, 0xe8, 0x42, 0x3a, 0xc2,
	0x4c, 0x3a, 0x1e, 0x70, 0x3a, 0xca, 0x64, 0xb8, 0xd6, 0xdd, 0xfd, 0x17, 0x0a, 0x6c, 0xd2, 0x75,
	0x31, 0x34, 0x9c, 0x01, 0xc1, 0x7b, 0x9f, 0x6d, 0x47, 0xdc, 0x06, 0xec, 0x7a, 0xc8, 0xe0, 0xeb,
	0x50, 0x3d, 0xe0, 0x66, 0x3e, 0x46, 0x5c, 0x01, 0x4a, 0x72, 0xa0, 0x10, 0x93, 0x03, 0x9b, 0x00,
	0x2f, 0xc6, 0x04, 0x4b, 0x87, 0x64, 0x97, 0x30, 0xe8, 0xf9, 0xe8, 0xef, 0x46, 0x6e, 0x16, 0x1c,
	0xd2, 0x5e, 0xc3, 0xfd, 0xd0, 0x76, 0x9c, 0xd7, 0x9b, 0x15, 0x28, 0x5f, 0x18, 0xb6, 0x25, 0x7c,
	0x55, 0x18, 0x30, 0x6b, 0x94, 0xbf, 0xa3, 0xc0, 0x9a, 0x4e, 0xce, 0x77, 0xdc, 0x60, 0xd7, 0xb0,
	0xc5, 0x2d, 0xc7, 0x21, 0x31, 0x2d, 0x43, 0xb0, 0xf6, 0x8e, 0x1b, 0x44, 0xcc, 0x13, 0x22, 0x68,
	0x4f, 0x0f, 0xfd, 0xc1, 0xcb, 0xb7, 0x01, 0x97, 0x06, 0x1c, 0xa2, 0x34, 0xf1, 0xd8, 0x7e, 0x24,
	0xf6, 0x38, 0x0e, 0xa2, 0xb4, 0x35, 0x2e, 0x89, 0x17, 0x3e, 0x95, 0xa1, 0xc0, 0x3c, 0x06, 0xf4,
	0xff, 0xc6, 0x24, 0x15, 0xad, 0x6c, 0xcf, 0x32, 0x6c, 0x77, 0x20, 0x38, 0x38, 0x7e, 0xb2, 0xb4,
	0xf2, 0x2e, 0x63, 0xa8, 0xee, 0x86, 0x8f, 0x23, 0x7a, 0x54, 0x30, 0x0a, 0xea, 0x33, 0xd4, 0x9e,
	0x11, 0xa0, 0xdf, 0x37, 0xcf, 0x10, 0x3e, 0x51, 0xa9, 0x31, 0x04, 0xbb, 0x69, 0xe5, 0x89, 0x63,
	0xc2, 0x0f, 0x95, 0x0d, 0x51, 0xfa, 0x98, 0xb0, 0x5d, 0x8d, 0xed, 0x26, 0x15, 0x79, 0x37, 0x99,
	0xe3, 0x4c, 0xf9, 0x67, 0xa9, 0xd2, 0x3b, 0xb6, 0x2f, 0xa3, 0xc1, 0xcd, 0x71, 0x73, 0xfc, 0x18,
	0xea, 0x78, 0x16, 0xed, 0xbb, 0x1e, 0x99, 0x46, 0x17, 0x9f, 0x66, 0x10, 0x45, 0x11, 0xd0, 0xfe,
	0x67, 0x01, 0xb7, 0xcc, 0x2e, 0x09, 0x0e, 0x8c, 0x11, 0x99, 0x5e, 0xc3, 0xcf, 0x43, 0x05, 0x0b,
	0x09, 0xd3, 0x5e, 0xe2, 0x7c, 0x10, 0x76, 0x41, 0xe7, 0xd9, 0x22, 0x2f, 0x90, 0xa2, 0xec, 0x05,
	0xf2, 0x2d, 0x58, 0xe1, 0xe7, 0xf4, 0x1e, 0x31, 0xad, 0x40, 0xf8, 0x82, 0x71, 0xae, 0x57, 0x79,
	0xda, 0x13, 0xd3, 0x0a, 0xa4, 0x8b, 0x37, 0xbc, 0x26, 0x8e, 0x9e, 0x54, 0x51, 0xb0, 0x83, 0x7e,
	0xf3, 0x98, 0x10, 0x3e, 0x10, 0x2a, 0xeb, 0x35, 0x8a, 0x40, 0xc1, 0x71, 0x17, 0x80, 0x57, 0x4d,
	0x0b, 0xb2, 0xfd, 0xb6, 0x1e, 0x3a, 0x9e, 0xa1, 0x2f, 0xbf, 0x63, 0x5b, 0x0e, 0xe9, 0x49, 0xb9,
	0xd8, 0x23, 0xa1, 0x1b, 0x2c, 0x21, 0x72, 0x48, 0x5b, 0x81, 0xf2, 0x89, 0x1b, 0x84, 0x2e, 0xf6,
	0x0c, 0x98, 0x47, 0x32, 0x19, 0x7c, 0xdb, 0x8e, 0xd1, 0x39, 0xdf, 0xc5, 0x2c, 0x36, 0xcd, 0x75,
	0x3e, 0xcd, 0xa1, 0xcd, 0xbf, 0x9f, 0xb4, 0xf9, 0xe3, 0x49, 0xec, 0x88, 0xfb, 0x20, 0xec, 0x18,
	0x42, 0xf6, 0xe1, 0x25, 0xc6, 0xb5, 0x75, 0x83, 0xdf, 0x2b, 0xe0, 0x65, 0x74, 0xa2, 0xba, 0xeb,
	0x39, 0x09, 0x4d, 0xbf, 0x2b, 0xd4, 0xa0, 0x71, 0x42, 0x7f, 0x9b, 0xdc, 0x4d, 0x9c, 0xbb, 0x6a,
	0xca, 0xb8, 0x99, 0x37, 0x87, 0x77, 0xa0, 0x3e, 0x09, 0x2c, 0x9b, 0xad, 0x6e, 0xce, 0x09, 0x14,
	0x81, 0x6b, 0xbb, 0x0b, 0xcb, 0xbc, 0xb5, 0x1d, 0xac, 0x53, 0xa7, 0xda, 0xa2, 0xcf, 0x57, 0xe5,
	0x7b, 0xc9, 0xb7, 0x3b, 0xa9, 0x8c, 0x7a, 0x56, 0xe9, 0x79, 0x94, 0xb6, 0xff, 0x52, 0x80, 0xe5,
	0x8c, 0x7a, 0x23, 0x51, 0xa5, 0xc8, 0xa2, 0xea, 0x01, 0x34, 0xa9, 0x4a, 0x2e, 0xd8, 0xd2, 0xe7,
	0x26, 0x8e, 0x06, 0x45, 0x86, 0xae, 0x25, 0x0f, 0xa0, 0xe9, 0x13, 0xc7, 0x8c, 0x32, 0xb1, 0x25,
	0xd6, 0xa0, 0xc8, 0x30, 0xd3, 0x5d, 0x00, 0x9e, 0xc9, 0xb4, 0x0c, 0xe1, 0xbc, 0xc7, 0x72, 0x50,
	0x21, 0x2f, 0xea, 0x10, 0x36, 0x37, 0x6e, 0xd1, 0xc5, 0x3a, 0xb8, 0xbd, 0xc0, 0xc7, 0xa7, 0x29,
	0x34, 0xd3, 0xc0, 0x3a, 0xf5, 0x85, 0xd1, 0x8c, 0x22, 0x0e, 0xac, 0xd3, 0xa8, 0x81, 0x81, 0x31,
	0x22, 0x3e, 0xdf, 0xf2, 0x31, 0x3b, 0x65, 0x72, 0x14, 0xba, 0x98, 0xcc, 0x96, 0x13, 0xf7, 0xee,
	0xc0, 0x12, 0x1d, 0xc4, 0xd0, 0x0c, 0x64, 0x74, 0x42, 0xcc, 0x9e, 0x6d, 0x39, 0x67, 0xa1, 0x63,
	0x07, 0xa2, 0xa8, 0xda, 0x80, 0x0d, 0x4c, 0x9c, 0x70, 0x5e, 0x99, 0xb7, 0x56, 0x1d, 0x31, 0x74,
	0x62, 0x35, 0x5f, 0xf8, 0xd8, 0x71, 0xea, 0xfa, 0x94, 0x4f, 0x42, 0xc6, 0x12, 0x1e, 0x71, 0x12,
	0x26, 0x77, 0x73, 0x9e, 0xe3, 0x82, 0xeb, 0x20, 0xf2, 0xc1, 0x0b, 0x9b, 0xbd, 0x96, 0x96, 0xf1,
	0x8f, 0x64, 0x4f, 0x28, 0xba, 0xd5, 0xcb, 0x2b, 0xec, 0xca, 0x5a, 0x68, 0x24, 0xad, 0x8b, 0x31,
	0x69, 0x9d, 0xbe, 0xbc, 0xbe, 0xae, 0xae, 0x1d, 0xf7, 0x6e, 0x92, 0x3b, 0x3a, 0xc7, 0x1e, 0x35,
	0x08, 0x97, 0x40, 0xc7, 0x31, 0xfa, 0x81, 0x75, 0x81, 0xe6, 0xd3, 0x94, 0x19, 0x4a, 0x85, 0x92,
	0x74, 0x55, 0x82, 0xbf, 0xf1, 0xc9, 0x9a, 0x35, 0x22, 0xe1, 0x7b, 0x52, 0x7e, 0xcb, 0x4a, 0xff,
	0x77, 0x03, 0x8f, 0x1f, 0x24, 0x05, 0xa8, 0x0d, 0xa1, 0x1d, 0xcd, 0x8c, 0xdc, 0x96, 0xcf, 0xcd,
	0xeb, 0xd3, 0xdd, 0x03, 0x32, 0x0e, 0x85, 0x39, 0x14, 0xd6, 0x7e, 0x43, 0x81, 0xbb, 0xb9, 0x4d,
	0x21, 0x29, 0x3e, 0x16, 0xa7, 0x20, 0xf6, 0x6a, 0x29, 0x5b, 0xd4, 0xc8, 0x05, 0xc5, 0x41, 0x29,
	0x34, 0x31, 0x16, 0x64, 0x13, 0xe3, 0x3a, 0x54, 0x89, 0x27, 0x8b, 0x7f, 0x01, 0x6a, 0xff, 0x4b,
	0xc1, 0x27, 0x7c, 0x54, 0x3d, 0xc3, 0x95, 0x45, 0x15, 0xba, 0x68, 0x8a, 0x95, 0x79, 0x6c, 0x88,
	0xf1, 0x27, 0xdf, 0xd1, 0x95, 0x7a, 0x51, 0xbe, 0x52, 0x8f, 0xef, 0xad, 0x9c, 0xb9, 0xa2, 0xbd,
	0x75, 0x15, 0x2a, 0x67, 0xe4, 0xb2, 0x17, 0x9e, 0xf1, 0xf8, 0x9b, 0x31, 0x14, 0x17, 0xbe, 0x6f,
	0xb9, 0x4e, 0x8f, 0xfb, 0xb2, 0x94, 0xa8, 0xb8, 0x40, 0x8c, 0xf4, 0x08, 0xa9, 0x2a, 0xd9, 0x30,
	0x18, 0x7f, 0xd4, 0xf8, 0x7b, 0x29, 0x53, 0xfb, 0x75, 0xf4, 0x45, 0xa2, 0xdb, 0x5c, 0x6c, 0xa8,
	0xb7, 0xa1, 0x46, 0x3c, 0x4f, 0x7e, 0xb6, 0x4c, 0x49, 0x83, 0xd7, 0x91, 0xeb, 0x50, 0x15, 0x1a,
	0x06, 0x63, 0x2a, 0x01, 0xaa, 0x9f, 0x00, 0x30, 0xc9, 0xd4, 0x37, 0x6c, 0x9b, 0x2f, 0xfc, 0x84,
	0xc9, 0x23, 0x6a, 0x42, 0x97, 0xf2, 0x6a, 0x7f, 0x5d, 0x01, 0x90, 0x5a, 0x5f, 0x81, 0xf2, 0xa1,
	0x3f, 0x08, 0x19, 0x8a, 0x01, 0x89, 0xc7, 0x18, 0xa1, 0x37, 0x06, 0xc5, 0xef, 0xa2, 0xfa, 0x22,
	0xd8, 0x89, 0x41, 0x6a, 0x1b, 0x6a, 0xbb, 0x5c, 0x77, 0x11, 0x0a, 0xa8, 0x80, 0x69, 0x0b, 0x4c,
	0x17, 0xe7, 0x67, 0x58, 0x04, 0xb4, 0xbf, 0xcf, 0xce, 0xb0, 0x5d, 0xe2, 0xe0, 0x36, 0x79, 0xe8,
	0x0f, 0x72, 0xa5, 0xc7, 0xf4, 0xfd, 0x99, 0xae, 0x30, 0x57, 0x7e, 0xb1, 0x6d, 0x45, 0xb3, 0x51,
	0x92, 0x66, 0x63, 0x0e, 0x85, 0xfd, 0x31, 0xd4, 0xf9, 0x3c, 0xb9, 0x76, 0x42, 0x54, 0xd4, 0x66,
	0x88, 0x8a, 0x1f, 0x28, 0x00, 0xd1, 0xb9, 0x44, 0x74, 0xfd, 0x24, 0x79, 0x16, 0x61, 0x9c, 0x28,
	0x9d, 0x39, 0x0a, 0x39, 0x67, 0x8e, 0x62, 0xe6, 0x99, 0x63, 0xf6, 0xb1, 0xfc, 0x17, 0xa0, 0x21,
	0x58, 0x0d, 0x3b, 0x32, 0x9f, 0xc0, 0xf3, 0xe0, 0x36, 0xdb, 0x9b, 0xf8, 0x76, 0xcc, 0x9e, 0x54,
	0x75, 0xcc, 0x57, 0x13, 0x26, 0xb4, 0x33, 0xdf, 0xc4, 0xa9, 0x50, 0xa2, 0xe9, 0x7c, 0x86, 0xf0,
	0xf7, 0x3c, 0x5b, 0xd3, 0x04, 0xee, 0x88, 0xad, 0x29, 0xab, 0xd5, 0x8f, 0x61, 0x11, 0xf9, 0x84,
	0x2f, 0x07, 0x26, 0x16, 0x56, 0xd3, 0x5a, 0xfc, 0xa1, 0x3f, 0xd0, 0xe5, 0x9c, 0xb3, 0x36, 0xb2,
	0x1f, 0x28, 0xf0, 0xb5, 0xd8, 0x3e, 0x1c, 0x36, 0x1e, 0xfa, 0x26, 0xb1, 0x25, 0x11, 0x73, 0x5f,
	0x52, 0x92, 0xee, 0x4b, 0xe1, 0x32, 0x2a, 0xc8, 0xcb, 0x68, 0x8e, 0xe1, 0xff, 0x35, 0x05, 0xbe,
	0x9e, 0xd8, 0x9a, 0xf3, 0x7a, 0xf2, 0xb3, 0x22, 0xc5, 0x04, 0xda, 0x99, 0xb3, 0x1e, 0x8a, 0x84,
	0xbc, 0xa7, 0x90, 0xef, 0x36, 0xf2, 0x0b, 0xd8, 0xc8, 0x99, 0xf8, 0x9f, 0xed, 0x70, 0x5f, 0xc3,
	0xd2, 0xa1, 0x3f, 0xd8, 0xb7, 0x6c, 0xb2, 0x47, 0x7c, 0xbc, 0xae, 0x6c, 0x41, 0xf1, 0x94, 0x4b,
	0x9f, 0x92, 0x4e, 0x7f, 0x66, 0x79, 0x20, 0x94, 0x92, 0x57, 0x79, 0x28, 0x69, 0x8a, 0x92, 0x61,
	0xff, 0x00, 0x6e, 0xc4, 0x2a, 0xf6, 0xc7, 0xea, 0x87, 0xb1, 0xe5, 0xb7, 0x94, 0xbc, 0xa5, 0x7f,
	0xa2, 0x8f, 0xfb, 0xd2, 0xfb, 0x7a, 0xf1, 0x88, 0xfe, 0x5b, 0xa0, 0x1e, 0xfa, 0x83, 0x2e, 0xf1,
	0x2e, 0xac, 0x3e, 0x79, 0x4e, 0xf7, 0x73, 0x1e, 0x09, 0xc4, 0x23, 0x3e, 0xf1, 0x2e, 0xf8, 0xd9,
	0xab, 0xa9, 0x87, 0xb0, 0xf6, 0x1a, 0x96, 0x53, 0x25, 0xfc, 0x31, 0xb3, 0x68, 0x9e, 0xfa, 0x36,
	0xcf, 0xcf, 0x00, 0xd4, 0x0d, 0x4e, 0x4e, 0x7d, 0xdf, 0x16, 0x2f, 0xee, 0x18, 0x84, 0x63, 0xa2,
	0x58, 0x76, 0x5f, 0x83, 0xbf, 0xb5, 0x2f, 0x14, 0x68, 0x1c, 0xfa, 0x83, 0x03, 0x12, 0xec, 0x5b,
	0xf8, 0x98, 0x8f, 0xbd, 0xac, 0x0e, 0xa9, 0xc5, 0x00, 0x14, 0xe1, 0x96, 0x4d, 0x42, 0x29, 0xc0,
	0x21, 0xaa, 0x89, 0xd3, 0x5f, 0xec, 0xb0, 0xcb, 0xea, 0xad, 0x51, 0x04, 0x6e, 0x10, 0x2d, 0x28,
	0x8e, 0xcc, 0x8f, 0xb8, 0x2e, 0x44, 0x7f, 0xd2, 0x99, 0x1b, 0x1b, 0x5e, 0xd0, 0x0b, 0xdc, 0xc0,
	0xb0, 0xf9, 0x25, 0x02, 0xda, 0xb2, 0x5f, 0x52, 0x84, 0xf6, 0x77, 0x14, 0x68, 0x4a, 0x9d, 0xf1,
	0xc7, 0xd7, 0x99, 0x39, 0xd1, 0x25, 0xbc, 0x62, 0x60, 0x16, 0x50, 0xec, 0x12, 0x5e, 0x97, 0x45,
	0xf3, 0x55, 0x9a, 0x63, 0xbe, 0xfe, 0xb1, 0x12, 0xce, 0xfc, 0xb1, 0xe1, 0x31, 0x5f, 0xb5, 0xf9,
	0xe8, 0x74, 0x0b, 0xaa, 0x38, 0x70, 0xbe, 0x9f, 0x35, 0xf5, 0x0a, 0x05, 0x3b, 0x09, 0x02, 0x96,
	0x12, 0x04, 0x9c, 0x4e, 0xae, 0xcc, 0x07, 0xd2, 0x6f, 0x90, 0xb5, 0xf6, 0xdc, 0x37, 0x8e, 0xed,
	0x1a, 0x26, 0xed, 0xf1, 0x35, 0x17, 0x40, 0x3c, 0xc0, 0x4c, 0x33, 0x23, 0x8e, 0x07, 0xbf, 0xdf,
	0x63, 0x90, 0xf6, 0xab, 0xb0, 0x1a, 0x6f, 0xd5, 0x1f, 0x1f, 0x1b, 0x9e, 0xf1, 0xed, 0x8c, 0xb6,
	0xe3, 0x21, 0x42, 0xa2, 0xaa, 0x05, 0x2d, 0x24, 0xa7, 0x37, 0xa4, 0x05, 0x06, 0x0c, 0xda, 0xcd,
	0xae, 0x7f, 0x4b, 0xea, 0x50, 0x41, 0xee, 0x50, 0xe6, 0x0a, 0xfe, 0x37, 0x0a, 0xae, 0xa3, 0x64,
	0x45, 0xd7, 0x5b, 0xc6, 0xea, 0x63, 0x28, 0x8f, 0xe9, 0x10, 0xb9, 0xe3, 0xc2, 0x83, 0x84, 0x2c,
	0xcc, 0xa2, 0x86, 0xce, 0x4a, 0x88, 0xa2, 0x5b, 0x5c, 0x8c, 0x5e, 0xa1, 0xe8, 0x16, 0x2b, 0xba,
	0xa5, 0x7d, 0x1d, 0x67, 0xf8, 0xd3, 0x09, 0xf1, 0x2e, 0x5f, 0x9c, 0xfc, 0x25, 0xe1, 0xe4, 0x95,
	0xa2, 0xb2, 0xd6, 0x83, 0x95, 0x78, 0x26, 0x56, 0x4f, 0x78, 0x9a, 0x51, 0xe2, 0xa7, 0x99, 0xf0,
	0x46, 0xae, 0xa4, 0xe3, 0xef, 0x24, 0x87, 0x14, 0x93, 0x1c, 0x42, 0xd5, 0xde, 0xe5, 0x54, 0x4f,
	0xfc, 0xb1, 0xfa, 0xa7, 0xa1, 0x44, 0x7b, 0xca, 0x05, 0xba, 0x16, 0x1f, 0x5a, 0x56, 0x97, 0x74,
	0xcc, 0x2f, 0x4d, 0x42, 0x61, 0x8e, 0xb5, 0xb9, 0x0f, 0x37, 0x85, 0xc8, 0x78, 0x17, 0x81, 0xaf,
	0xfd, 0x2a, 0x92, 0x35, 0x56, 0xcf, 0xb5, 0x19, 0x23, 0xeb, 0x56, 0xf8, 0xd7, 0xf0, 0xe9, 0x79,
	0x78, 0xbc, 0x62, 0xb3, 0x76, 0x37, 0xb4, 0x0c, 0x44, 0xde, 0x48, 0xd2, 0xd1, 0x6f, 0xa6, 0x9f,
	0xdc, 0xcf, 0x41, 0x69, 0xcf, 0x76, 0xa7, 0x6e, 0xc6, 0x98, 0x41, 0xfb, 0x4d, 0x05, 0xd4, 0x64,
	0xf3, 0xfe, 0x58, 0x7d, 0x0c, 0xb5, 0x13, 0xc3, 0x27, 0x92, 0x9b, 0xd9, 0xdd, 0x9c, 0xe3, 0xe0,
	0xa9, 0x8b, 0xae, 0x3b, 0x61, 0x76, 0xf5, 0x17, 0x00, 0xd8, 0x68, 0x25, 0xe7, 0x8c, 0x8d, 0x54,
	0xe1, 0x40, 0xa2, 0x8e, 0x94, 0x5f, 0xfb, 0x4c, 0x3c, 0x2a, 0xd9, 0x36, 0x47, 0x96, 0x83, 0xf7,
	0x07, 0x7e, 0xa8, 0x89, 0xec, 0xc5, 0x34, 0x91, 0xbd, 0x79, 0x1c, 0x84, 0xf6, 0xa9, 0x7a, 0x4c,
	0xeb, 0x9d, 0x51, 0xe5, 0x26, 0xc0, 0x31, 0x21, 0xde, 0xbe, 0x65, 0x07, 0x44, 0xe8, 0xc8, 0x12,
	0x46, 0xfb, 0x33, 0x50, 0x42, 0x1b, 0xfa, 0x1a, 0x54, 0xe8, 0xff, 0xa8, 0x3c, 0x83, 0xe8, 0x5e,
	0x4d, 0x7f, 0x1d, 0x49, 0x41, 0x06, 0x04, 0xac, 0xfd, 0x18, 0x4f, 0x40, 0x4c, 0xf1, 0xe1, 0xdd,
	0x78, 0x04, 0x15, 0xf6, 0x8b, 0x1f, 0xba, 0xd5, 0xf8, 0x10, 0x68, 0x51, 0x9d, 0xe7, 0x50, 0x3f,
	0x84, 0xc5, 0xee, 0x64, 0x4c, 0x3c, 0x5e, 0xa0, 0x90, 0x5b, 0x40, 0xce, 0xa6, 0x7e, 0x80, 0x07,
	0x35, 0x34, 0xfc, 0xac, 0x17, 0x73, 0x8b, 0x84, 0x79, 0xb4, 0x7f, 0xc9, 0x0e, 0xe7, 0xb1, 0xc7,
	0x61, 0xea, 0x96, 0x74, 0xda, 0x63, 0xfc, 0xbe, 0x96, 0x9e, 0x51, 0x9a, 0x2a, 0x9d, 0x02, 0x73,
	0x4f, 0xe9, 0x92, 0x81, 0xbc, 0x18, 0x33, 0x90, 0x47, 0x31, 0xae, 0xf8, 0x3d, 0xec, 0x28, 0xae,
	0x59, 0xce, 0x3e, 0xc7, 0xfd, 0x2e, 0x33, 0x52, 0xd1, 0x33, 0x26, 0xed, 0xc7, 0x76, 0x1f, 0xef,
	0xf6, 0xbf, 0x9a, 0xde, 0xa3, 0xd1, 0x97, 0xb6, 0xb7, 0x17, 0x1d, 0x44, 0x25, 0xcc, 0x3c, 0xc3,
	0x70, 0xa0, 0x4a, 0xa7, 0x80, 0x96, 0xba, 0x4e, 0xdf, 0xd9, 0x29, 0x73, 0x2f, 0x12, 0x34, 0x02,
	0xcc, 0x31, 0x90, 0x68, 0x1f, 0xf3, 0xe3, 0xef, 0x94, 0x97, 0x1e, 0xd9, 0xc7, 0x46, 0x7e, 0x29,
	0xc7, 0x04, 0x48, 0xc0, 0xa2, 0x07, 0xfa, 0xf8, 0x92, 0xed, 0x2b, 0x22, 0xfa, 0x1c, 0x07, 0x64,
	0x13, 0xd6, 0xa5, 0xe3, 0x56, 0xbc, 0xb3, 0x8f, 0xa0, 0x95, 0xc4, 0xf1, 0x75, 0x9d, 0xc2, 0xd3,
	0x63, 0xe1, 0x93, 0xe4, 0x9b, 0x97, 0x10, 0xa1, 0xfd, 0x86, 0x02, 0x4b, 0xbc, 0x05, 0xe9, 0x49,
	0xa4, 0xe8, 0xbc, 0x12, 0xeb, 0x7c, 0xee, 0x70, 0xef, 0x40, 0xdd, 0x73, 0xe9, 0x44, 0x0d, 0x88,
	0x78, 0x8f, 0x55, 0x43, 0xc4, 0x01, 0x09, 0x42, 0xd1, 0x5e, 0x9a, 0x25, 0xda, 0x7f, 0xa2, 0x40,
	0x8b, 0x07, 0x35, 0xc1, 0xbb, 0x59, 0x39, 0x6e, 0x52, 0xd6, 0x85, 0x1b, 0x33, 0xfe, 0x15, 0x64,
	0x17, 0x88, 0xc8, 0x8c, 0x5b, 0x64, 0x71, 0xb9, 0x22, 0x67, 0x82, 0xe8, 0x2d, 0x2a, 0x5b, 0xac,
	0xd2, 0x5b, 0xd4, 0xf7, 0x61, 0x09, 0x83, 0x56, 0xf6, 0x5d, 0xbb, 0xc7, 0x8c, 0x1a, 0xcc, 0x10,
	0xd4, 0x14, 0xd8, 0xe7, 0x68, 0xdc, 0x10, 0x03, 0xa9, 0xcc, 0x1a, 0xc8, 0xff, 0x55, 0x60, 0x39,
	0x31, 0x10, 0xdc, 0x4d, 0xdb, 0x50, 0xeb, 0x0b, 0xd1, 0x46, 0xc5, 0x67, 0x43, 0x0f, 0x61, 0xf5,
	0xdb, 0xd1, 0x78, 0x68, 0xed, 0x77, 0xd2, 0xa7, 0x47, 0x1e, 0x3c, 0xc9, 0xb8, 0x94, 0xcd, 0x98,
	0xf8, 0x64, 0xb3, 0x88, 0x75, 0xf1, 0xa7, 0xe9, 0xb7, 0xa1, 0x16, 0xbe, 0xe5, 0x64, 0x23, 0xad,
	0x3a, 0xfc, 0x21, 0x67, 0x98, 0xe4, 0xf8, 0xfc, 0x9d, 0x2e, 0x4b, 0x72, 0xfc, 0xc4, 0x26, 0x58,
	0x99, 0x73, 0x13, 0x3c, 0xc7, 0x3d, 0x59, 0x74, 0x72, 0xe7, 0xb2, 0x63, 0x5e, 0x2b, 0x32, 0xdc,
	0x7c, 0x67, 0xf2, 0xd5, 0x44, 0x93, 0xdb, 0x9e, 0x37, 0xb5, 0xd5, 0x29, 0x31, 0x28, 0xe7, 0x68,
	0xf7, 0xdf, 0x2a, 0xb0, 0xc2, 0xee, 0xf8, 0x68, 0xdb, 0xc7, 0x9e, 0x7b, 0xca, 0x4f, 0x26, 0x5f,
	0x6e, 0xfc, 0xa2, 0xa9, 0x81, 0xd2, 0xc2, 0xe7, 0x7f, 0x65, 0xf9, 0xf9, 0xdf, 0x1c, 0x77, 0x0e,
	0x7f, 0x05, 0x6e, 0x65, 0x8c, 0xe1, 0xab, 0x8b, 0x21, 0xf4, 0x29, 0xca, 0x1c, 0x16, 0x0a, 0x09,
	0x23, 0xaf, 0xf1, 0x78, 0x4d, 0x8e, 0x50, 0xe6, 0x19, 0x30, 0x8f, 0xbe, 0xf4, 0x9b, 0xe1, 0xbc,
	0xec, 0xb0, 0x97, 0xd0, 0xdd, 0xc9, 0x78, 0x3c, 0x2d, 0x40, 0xd6, 0x7d, 0x58, 0x3c, 0xb6, 0x8d,
	0x3e, 0x19, 0xba, 0xb6, 0x49, 0xc4, 0x5d, 0xb0, 0x8c, 0xa2, 0xba, 0xf7, 0x80, 0xb8, 0x5c, 0x9e,
	0xd1, 0x9f, 0xf3, 0x48, 0xef, 0x63, 0x41, 0xe2, 0x58, 0x77, 0xde, 0xe5, 0x21, 0xc0, 0x08, 0x96,
	0xc3, 0x1a, 0x8f, 0xad, 0xbe, 0xf0, 0x4d, 0x8c, 0xb6, 0x48, 0x45, 0xbe, 0x43, 0x08, 0x03, 0x60,
	0xb1, 0x1d, 0x95, 0x07, 0xc0, 0x9a, 0x83, 0xd1, 0x9f, 0x81, 0x1a, 0x6f, 0xee, 0x5d, 0x1c, 0xf0,
	0xbf, 0x50, 0xe0, 0x26, 0xab, 0x8d, 0x72, 0xd0, 0x51, 0x14, 0xf9, 0x2a, 0x7b, 0xc9, 0xf0, 0xc8,
	0x57, 0x47, 0x89, 0xc8, 0x57, 0xc8, 0xfc, 0x57, 0x1f, 0x82, 0x74, 0x51, 0x52, 0x92, 0x82, 0xeb,
	0x69, 0xdf, 0x17, 0x9c, 0x12, 0xf5, 0xe5, 0xab, 0x63, 0xfd, 0xbf, 0x4c, 0x15, 0x90, 0x64, 0x18,
	0x02, 0xd1, 0xfc, 0xe4, 0x2a, 0xcd, 0x4f, 0xde, 0xa5, 0xf9, 0x73, 0x58, 0x61, 0x9a, 0xf2, 0x76,
	0x1f, 0x6f, 0xbd, 0x24, 0x59, 0x9d, 0x3d, 0x15, 0xab, 0x50, 0x31, 0xd9, 0xa1, 0x8e, 0x8b, 0x2f,
	0x13, 0x0f, 0x74, 0x73, 0x30, 0x52, 0x07, 0x5a, 0x7b, 0xc4, 0xe6, 0xed, 0xbd, 0xdb, 0x12, 0xf8,
	0x4f, 0x45, 0xa8, 0x77, 0xad, 0x81, 0xf3, 0x0a, 0x57, 0x76, 0x22, 0x00, 0x83, 0x92, 0x0e, 0xc0,
	0xf0, 0x35, 0x68, 0x22, 0x48, 0xeb, 0x79, 0x2a, 0x0e, 0x9e, 0x75, 0x3d, 0x8e, 0xa4, 0xca, 0x41,
	0x88, 0x10, 0x92, 0x38, 0x44, 0x44, 0x01, 0x1a, 0xcb, 0x72, 0x80, 0xc6, 0x58, 0x68, 0x87, 0xca,
	0xb4, 0xd0, 0x0e, 0xd5, 0xdc, 0xd0, 0x0e, 0xb5, 0x59, 0xa1, 0x1d, 0xea, 0x57, 0x0e, 0xed, 0x00,
	0x57, 0x0a, 0xed, 0xb0, 0x98, 0x0a, 0xed, 0xb0, 0x0c, 0x65, 0xb3, 0x1f, 0xbd, 0x6d, 0x28, 0x99,
	0x7d, 0x79, 0x6e, 0x9b, 0x33, 0x57, 0xd8, 0x7b, 0xd0, 0xe8, 0xb3, 0x38, 0x10, 0xcc, 0x84, 0xbd,
	0x24, 0x02, 0x55, 0x46, 0xb1, 0x21, 0xee, 0xc1, 0xa2, 0xed, 0xf6, 0x0d, 0x9b, 0x87, 0xd8, 0xbc,
	0xc1, 0x82, 0x43, 0xd8, 0x61, 0x70, 0x08, 0xed, 0x9f, 0xf3, 0x57, 0xa7, 0x62, 0x62, 0x91, 0x41,
	0x7e, 0x51, 0x8a, 0x5a, 0xba, 0xb4, 0xf5, 0x8d, 0xf4, 0x33, 0x47, 0x39, 0xb7, 0x1c, 0xf9, 0x95,
	0x05, 0x38, 0xdd, 0x62, 0x02, 0x04, 0xcd, 0x01, 0x85, 0xa9, 0xcb, 0x29, 0xcc, 0xa7, 0xfd, 0x53,
	0x65, 0x9e, 0x88, 0xb0, 0xea, 0x1a, 0xa8, 0x12, 0xab, 0x75, 0x1c, 0x74, 0x0a, 0x6c, 0x15, 0xd4,
	0x5b, 0xb0, 0x2c, 0xe1, 0x5f, 0xf4, 0xfb, 0x93, 0xb1, 0x45, 0xcc, 0x56, 0x51, 0x55, 0x61, 0x69,
	0xd7, 0x18, 0x07, 0xfd, 0xa1, 0xf1, 0xe4, 0xed, 0xd8, 0xf2, 0x88, 0xd9, 0x2a, 0x49, 0x38, 0x51,
	0x41, 0x59, 0x6d, 0x42, 0x7d, 0xdf, 0x76, 0x5d, 0xf3, 0xb5, 0x61, 0x05, 0xad, 0x0a, 0x6d, 0x87,
	0x8f, 0x95, 0x2a, 0xd4, 0xf8, 0xb8, 0x99, 0x98, 0xad, 0xaa, 0xf6, 0x37, 0x98, 0xe2, 0xbe, 0x3f,
	0xb1, 0xd1, 0x77, 0x68, 0x46, 0xc4, 0xf1, 0x58, 0x10, 0xcc, 0x4a, 0xe4, 0xf6, 0xb3, 0x9d, 0x8a,
	0x62, 0xb1, 0x7d, 0xad, 0x28, 0x16, 0xbf, 0x5f, 0x40, 0xab, 0x50, 0xd4, 0x9b, 0x6b, 0x88, 0xb4,
	0x0d, 0xa8, 0x5b, 0xfe, 0x09, 0x1b, 0x20, 0x77, 0xcb, 0x89, 0x10, 0xea, 0x07, 0xb0, 0x8c, 0x1c,
	0xd4, 0xeb, 0x1b, 0xb6, 0xed, 0xf7, 0xc6, 0x9e, 0x75, 0x21, 0x7c, 0x0d, 0x6b, 0xfa, 0x4d, 0x4c,
	0xda, 0xa5, 0x29, 0xc7, 0x2c, 0x41, 0xdd, 0x82, 0x55, 0x39, 0xbf, 0x71, 0x61, 0x58, 0xb6, 0x71,
	0x62, 0x0b, 0x4f, 0xb8, 0xe5, 0xa8, 0xc4, 0xb6, 0x48, 0xca, 0x51, 0xac, 0xee, 0xc1, 0x22, 0x0b,
	0x6d, 0xcf, 0xc2, 0x74, 0x31, 0xff, 0x27, 0x60, 0x28, 0xe1, 0x4d, 0x9c, 0x15, 0x28, 0x32, 0x2e,
	0xe5, 0x6a, 0x57, 0x96, 0x72, 0x7e, 0x18, 0xdb, 0x31, 0x0a, 0x14, 0x79, 0xad, 0x28, 0x91, 0xf3,
	0x48, 0xe9, 0x33, 0xe1, 0xec, 0xc3, 0x83, 0xa3, 0xcc, 0xef, 0xb0, 0x3d, 0x47, 0x63, 0xdf, 0x89,
	0x9c, 0x7c, 0xe4, 0xe6, 0xe6, 0xb8, 0xff, 0xfd, 0x11, 0x7b, 0x8c, 0x10, 0x0b, 0x24, 0x76, 0x55,
	0x9f, 0xec, 0xc2, 0x14, 0x9f, 0xec, 0x62, 0x6e, 0x18, 0x8a, 0xd9, 0x6b, 0xe0, 0x7f, 0x17, 0xd1,
	0x66, 0xd7, 0x0d, 0x5d, 0xc0, 0xf2, 0x28, 0x38, 0x5f, 0x44, 0x93, 0x4d, 0x80, 0x13, 0xa3, 0x7f,
	0x36, 0xf0, 0xdc, 0x89, 0x23, 0xde, 0x62, 0x4a, 0x18, 0x64, 0x4f, 0x9b, 0x18, 0x5e, 0xcf, 0xf4,
	0x8c, 0xd3, 0x80, 0xbb, 0x99, 0x01, 0xa2, 0xf6, 0x28, 0x46, 0x55, 0xa1, 0x84, 0x8e, 0xb5, 0xfc,
	0x76, 0x85, 0xfe, 0x56, 0xdf, 0x87, 0x1b, 0x68, 0x27, 0xe9, 0x05, 0x6e, 0x8f, 0xdb, 0xb0, 0xaa,
	0x22, 0x86, 0xe3, 0xd8, 0xbe, 0x7c, 0xe9, 0xb2, 0x9b, 0xcd, 0x15, 0x28, 0x33, 0xf7, 0xb6, 0x1a,
	0xd3, 0x22, 0x11, 0xc0, 0x20, 0xee, 0x13, 0x3b, 0xb0, 0xb8, 0xeb, 0x5b, 0x1d, 0x8f, 0x9f, 0x80,
	0x28, 0x36, 0xf0, 0x3b, 0x50, 0xf7, 0x0c, 0xc7, 0x64, 0x61, 0x4f, 0x00, 0x49, 0x5a, 0x63, 0x08,
	0x11, 0x17, 0x92, 0x36, 0x3d, 0x32, 0xbc, 0xb3, 0xc9, 0x18, 0x77, 0xa5, 0x86, 0xbe, 0x88, 0xb8,
	0x43, 0x44, 0xd1, 0x99, 0x74, 0xc8, 0x1b, 0x7e, 0xff, 0xc4, 0x82, 0xbc, 0x47, 0x08, 0x31, 0x63,
	0x5c, 0xb5, 0x6b, 0xc6, 0x9e, 0x06, 0x84, 0xee, 0x90, 0xc1, 0x88, 0x50, 0xa5, 0x60, 0x29, 0x3c,
	0xeb, 0x33, 0x44, 0x34, 0x9f, 0x37, 0x66, 0x6e, 0x6e, 0x1b, 0x00, 0x17, 0x96, 0xd1, 0xe3, 0xda,
	0x35, 0x0f, 0x27, 0x74, 0x61, 0x19, 0xcc, 0x3d, 0x44, 0xf8, 0x14, 0x73, 0x51, 0x37, 0x1f, 0xfb,
	0xfe, 0x98, 0x19, 0x2d, 0x79, 0x7c, 0x95, 0xe0, 0xa5, 0x78, 0xa6, 0x33, 0xd7, 0x82, 0x0b, 0x5f,
	0x8d, 0x14, 0x13, 0xcf, 0x2b, 0xaf, 0xe4, 0x99, 0x36, 0xdb, 0xaa, 0xb7, 0xc3, 0x9d, 0x81, 0x52,
	0xbd, 0x9c, 0xe3, 0x21, 0xc8, 0x2f, 0xc1, 0x9d, 0xd8, 0xfb, 0x70, 0xf6, 0xd0, 0x15, 0x3f, 0xae,
	0x90, 0xf5, 0xa2, 0x7f, 0x8e, 0x03, 0x1f, 0x81, 0xcd, 0xfc, 0x9a, 0xb1, 0x47, 0xbb, 0x50, 0xef,
	0x06, 0xc7, 0x0c, 0xc7, 0xcd, 0xd5, 0xb3, 0xdf, 0xf5, 0xb2, 0x2f, 0x40, 0x84, 0xe5, 0xb4, 0x1f,
	0x97, 0xe0, 0x56, 0xce, 0xf3, 0x5f, 0xf5, 0x63, 0x58, 0x37, 0x82, 0xc0, 0xb3, 0x4e, 0x26, 0x01,
	0xf1, 0x7b, 0x7e, 0x60, 0x9d, 0x11, 0xaf, 0xc7, 0x9d, 0xdc, 0xd9, 0x9b, 0xda, 0xd5, 0x28, 0xbd,
	0x8b, 0xc9, 0x5d, 0xe1, 0xf1, 0x2e, 0x1e, 0xa3, 0xf6, 0xc2, 0xc0, 0x6b, 0x20, 0x50, 0xe9, 0xfb,
	0x92, 0x62, 0x96, 0x47, 0xee, 0xc8, 0x1a, 0x49, 0xb7, 0xad, 0x75, 0xbd, 0x46, 0x11, 0x68, 0x96,
	0x14, 0x97, 0x60, 0x6c, 0x26, 0xd8, 0x25, 0x18, 0x65, 0x96, 0xe1, 0x64, 0x74, 0x12, 0x86, 0x10,
	0xa0, 0x40, 0xa4, 0xff, 0x55, 0x25, 0xfd, 0x8f, 0x5d, 0xfa, 0x10, 0xfe, 0x96, 0x04, 0x7f, 0xab,
	0x1f, 0xc1, 0x2d, 0x69, 0xa8, 0xf8, 0x4d, 0x08, 0xbc, 0x97, 0xee, 0xbd, 0xe1, 0x5a, 0xea, 0x4a,
	0x94, 0x8c, 0xef, 0x10, 0xbb, 0xd6, 0xe7, 0xe4, 0x75, 0x7e, 0xb1, 0x21, 0x77, 0x37, 0xcd, 0x2a,
	0xf6, 0x94, 0xee, 0xdd, 0x69, 0xc2, 0x1a, 0x76, 0xc0, 0x43, 0x8b, 0x2d, 0x27, 0xa9, 0xba, 0x6d,
	0x07, 0xea, 0x53, 0x78, 0x2f, 0x7b, 0x32, 0x64, 0x42, 0x32, 0x59, 0x72, 0x37, 0x63, 0x56, 0x24,
	0xb5, 0xe7, 0x5b, 0x20, 0xf5, 0xaa, 0x17, 0x5d, 0xe4, 0x36, 0xb1, 0x71, 0x35, 0x4a, 0xdb, 0x17,
	0x57, 0xba, 0x76, 0x26, 0x8f, 0x64, 0x46, 0x8c, 0xd8, 0x86, 0x9a, 0xc5, 0xef, 0xa0, 0x38, 0x93,
	0x5f, 0xf1, 0xad, 0x79, 0x58, 0x4c, 0xfb, 0xab, 0xb0, 0x9e, 0x65, 0xfa, 0x4a, 0x9e, 0x61, 0x8b,
	0x3f, 0xb3, 0x33, 0xec, 0x53, 0xb8, 0xd9, 0x25, 0xc1, 0x8e, 0x1b, 0x7c, 0x46, 0x3c, 0xeb, 0xd4,
	0x22, 0xe6, 0xac, 0xc3, 0xfc, 0x05, 0xcf, 0xc7, 0xb5, 0xba, 0x10, 0xd6, 0x9e, 0x63, 0x28, 0xed,
	0x58, 0x4d, 0x63, 0xfb, 0xf2, 0xba, 0xfd, 0x7a, 0x0c, 0x1b, 0x22, 0xba, 0x3d, 0x06, 0xba, 0x47,
	0x05, 0x4d, 0x8a, 0xc1, 0x2f, 0x5b, 0x00, 0x95, 0x98, 0x05, 0x50, 0xfb, 0x2d, 0x05, 0xee, 0x4d,
	0x29, 0xfb, 0xd5, 0x7f, 0x43, 0xe6, 0x51, 0x27, 0xba, 0x8f, 0x50, 0x5b, 0xd0, 0x10, 0xbf, 0xbf,
	0x47, 0x3c, 0xb7, 0xb5, 0xa0, 0x36, 0xd8, 0xb5, 0x1d, 0x65, 0x82, 0x96, 0x22, 0x20, 0x9a, 0xa7,
	0x55, 0x50, 0x6f, 0xc0, 0xa2, 0x78, 0xbf, 0x44, 0x11, 0xc5, 0x47, 0xc7, 0x50, 0x0f, 0x83, 0xd2,
	0xd3, 0xd4, 0xc3, 0xfd, 0x4e, 0xef, 0xd5, 0xd1, 0xb3, 0xa3, 0x17, 0xaf, 0x8f, 0x5a, 0x0b, 0x2a,
	0x40, 0x85, 0x22, 0x3a, 0x87, 0x2d, 0x45, 0x5d, 0x85, 0x9b, 0xf8, 0x9b, 0x07, 0xa5, 0xef, 0x1d,
	0x1a, 0xb6, 0xcd, 0x6a, 0xa4, 0xe8, 0x03, 0x63, 0x44, 0xb6, 0xc7, 0x56, 0xab, 0xf8, 0x68, 0x0b,
	0x20, 0x7a, 0xaf, 0x4a, 0xbb, 0x17, 0x41, 0x2f, 0x9e, 0xb5, 0x16, 0xe8, 0xb9, 0x26, 0xc2, 0xec,
	0x1b, 0x96, 0xdd, 0x52, 0x1e, 0x7d, 0x22, 0xdd, 0x43, 0xd0, 0x1a, 0x43, 0xe0, 0xc5, 0x59, 0x6b,
	0x41, 0x6d, 0xc3, 0x6a, 0x88, 0xa0, 0xa3, 0x3a, 0x72, 0x83, 0x27, 0x6f, 0x2d, 0x3f, 0x68, 0xfd,
	0xe8, 0x68, 0xeb, 0x0f, 0xee, 0xc1, 0xcd, 0xed, 0xb1, 0x75, 0xc0, 0xc8, 0xc5, 0x7d, 0x87, 0xd4,
	0xbf, 0x40, 0xb7, 0xd0, 0xb8, 0x25, 0x45, 0x7d, 0x2f, 0x49, 0xd8, 0x54, 0xc0, 0xc7, 0xf6, 0xd7,
	0x66, 0x65, 0xc1, 0xcb, 0xf8, 0x05, 0xb5, 0x47, 0x77, 0x3f, 0x96, 0xa6, 0x13, 0x93, 0x5b, 0xf1,
	0xbe, 0xcc, 0x06, 0x5e, 0xc3, 0x52, 0x64, 0x84, 0x45, 0xd3, 0xc0, 0xbd, 0x84, 0xd1, 0x3f, 0x69,
	0x30, 0x6b, 0x6b, 0xd3, 0x33, 0xf0, 0x8a, 0xbf, 0x07, 0x2a, 0xb3, 0xf1, 0xc8, 0x22, 0x42, 0xd5,
	0x92, 0x7b, 0x69, 0xda, 0x0a, 0xd4, 0xde, 0x4c, 0xe5, 0x89, 0x99, 0x6d, 0xb4, 0x05, 0xf5, 0x33,
	0x58, 0x4a, 0x84, 0xe1, 0xbc, 0x97, 0x1c, 0x6e, 0x22, 0xf8, 0x68, 0x3b, 0x45, 0xb2, 0x54, 0x28,
	0x4f, 0x6d, 0x41, 0xdd, 0x86, 0xaa, 0x70, 0x04, 0x5d, 0x4f, 0x55, 0xc8, 0x53, 0xda, 0xed, 0x8c,
	0x9a, 0x78, 0x9a, 0xb6, 0xa0, 0x9e, 0x63, 0x28, 0x9a, 0x4c, 0x07, 0xbd, 0x87, 0xa9, 0x2a, 0x73,
	0x72, 0xb6, 0x1f, 0x65, 0x34, 0x91, 0x93, 0x57, 0x5b, 0x50, 0x8f, 0xc3, 0x23, 0x78, 0x78, 0x06,
	0x49, 0xb5, 0x24, 0xc5, 0x9a, 0x4d, 0xd2, 0x37, 0x19, 0xf6, 0x55, 0x5b, 0x50, 0x09, 0x86, 0x3e,
	0xda, 0x4d, 0x85, 0x0f, 0x7e, 0x3f, 0x6b, 0x04, 0xa9, 0x28, 0xc3, 0x69, 0xde, 0xcb, 0x0a, 0xa2,
	0xab, 0x2d, 0xa8, 0x5d, 0xb8, 0x91, 0x0c, 0x38, 0x79, 0x37, 0xd5, 0x82, 0x9c, 0xdc, 0xbe, 0x97,
	0x51, 0xb3, 0x9c, 0x41, 0x5b, 0x50, 0x0f, 0x61, 0x51, 0x8e, 0x9c, 0xbc, 0x91, 0xd5, 0x65, 0x91,
	0x9a, 0x49, 0x0a, 0x29, 0x1d, 0x89, 0xdb, 0x88, 0x1d, 0xef, 0xd2, 0x1d, 0x94, 0x93, 0x33, 0x3b,
	0x28, 0x67, 0xd0, 0x16, 0xd4, 0xcf, 0xa1, 0x3d, 0x25, 0x00, 0xe5, 0x9f, 0x48, 0xd5, 0x9f, 0x9f,
	0xb9, 0xfd, 0x27, 0x33, 0x5a, 0xcb, 0xcf, 0xae, 0x2d, 0xa8, 0x7f, 0x51, 0x18, 0xc0, 0xa5, 0x2b,
	0x17, 0x35, 0x73, 0x3d, 0xc7, 0xef, 0x95, 0xda, 0xef, 0xcf, 0xcc, 0xc3, 0x97, 0xe6, 0xa7, 0xd0,
	0x8c, 0xdd, 0x38, 0xa8, 0x89, 0x3b, 0xc4, 0x58, 0x7c, 0xf0, 0xe4, 0xaa, 0xcc, 0x08, 0x1e, 0xae,
	0x2d, 0xa8, 0xbf, 0x02, 0xad, 0x54, 0x08, 0xc8, 0xd4, 0x72, 0x4e, 0x45, 0x89, 0x6c, 0x3f, 0xc8,
	0x20, 0x4e, 0x32, 0x53, 0xaa, 0x76, 0x16, 0x2e, 0x73, 0x6a, 0xed, 0x98, 0x65, 0x56, 0xed, 0x98,
	0x09, 0x25, 0xd5, 0x2a, 0xdf, 0x30, 0x5e, 0x8d, 0x85, 0x0b, 0xda, 0x1e, 0xf1, 0xfb, 0x49, 0xbe,
	0x8c, 0x7b, 0xd8, 0xb6, 0xef, 0x4e, 0x49, 0xf5, 0xc7, 0xda, 0x82, 0xfa, 0x1d, 0xa8, 0xf2, 0x6f,
	0x16, 0x24, 0x25, 0x55, 0xf4, 0x31, 0x86, 0xf6, 0xed, 0x9c, 0x14, 0xac, 0x61, 0x97, 0xee, 0xec,
	0xec, 0x73, 0x01, 0xea, 0xed, 0x8c, 0x6f, 0x5b, 0xf1, 0x3a, 0xda, 0x79, 0x49, 0x58, 0x49, 0x07,
	0x20, 0x8a, 0xd4, 0x9f, 0x9c, 0xea, 0xd8, 0x07, 0x04, 0xda, 0x1b, 0xf9, 0x89, 0x58, 0xd5, 0x11,
	0xae, 0x5b, 0x61, 0xba, 0x4b, 0xd2, 0x27, 0x6e, 0x63, 0x4c, 0x2e, 0xb3, 0x94, 0xcd, 0x4f, 0x5b,
	0x50, 0xfb, 0xa9, 0xdb, 0xe0, 0x6d, 0xcf, 0x53, 0x1f, 0xa4, 0x0a, 0xa6, 0x2f, 0x6f, 0xdb, 0x5f,
	0x9f, 0x9d, 0x29, 0xdc, 0x88, 0x6e, 0x24, 0x52, 0xd5, 0xfb, 0x53, 0x0b, 0x67, 0x77, 0x3e, 0xb5,
	0x2b, 0x3f, 0xe5, 0x9f, 0xa4, 0x20, 0xf8, 0xca, 0x2e, 0x49, 0x8c, 0xf8, 0x97, 0x4f, 0x92, 0xd3,
	0x2c, 0x7d, 0xdb, 0x43, 0x5b, 0x50, 0xbf, 0x1b, 0x7d, 0x4b, 0x81, 0x57, 0x96, 0x9c, 0x25, 0xf9,
	0xdb, 0x23, 0xd3, 0xeb, 0x7a, 0x0a, 0x0d, 0xf4, 0x37, 0xcc, 0xa9, 0x29, 0xf6, 0x79, 0x94, 0xe9,
	0x35, 0xfd, 0x4a, 0xe8, 0x9a, 0xd0, 0x31, 0xd9, 0x76, 0x86, 0xaa, 0x87, 0x96, 0x49, 0x99, 0xd8,
	0x87, 0x6a, 0xae, 0x42, 0xbd, 0x97, 0xd0, 0x8c, 0x7d, 0x1a, 0x47, 0xdd, 0x4c, 0xd2, 0x2f, 0xfe,
	0xd5, 0x9f, 0xa4, 0x18, 0xca, 0xf8, 0xae, 0x8e, 0xb6, 0xa0, 0xbe, 0x82, 0x86, 0x7c, 0x15, 0x99,
	0x14, 0x12, 0x19, 0xb7, 0xa2, 0xed, 0xfb, 0xd3, 0xb2, 0x44, 0xd5, 0xca, 0xfe, 0xa9, 0x49, 0xfe,
	0x49, 0x7b, 0x1f, 0x27, 0x7b, 0x9b, 0xe1, 0x80, 0xcb, 0x56, 0x66, 0xf4, 0x35, 0xa4, 0xe4, 0x4c,
	0xc5, 0x3e, 0xde, 0x94, 0x5c, 0x99, 0xf1, 0x8f, 0x28, 0x69, 0x0b, 0xea, 0x1b, 0xb8, 0x9d, 0xff,
	0x7d, 0xa8, 0x94, 0xaa, 0x92, 0xff, 0x61, 0xac, 0xf6, 0x37, 0x33, 0x64, 0x66, 0x6e, 0x6e, 0x6d,
	0x41, 0xfd, 0x3e, 0x34, 0xa5, 0x57, 0x1e, 0xfe, 0x40, 0xdd, 0xca, 0xda, 0xcc, 0xa7, 0xbf, 0x02,
	0x69, 0x7f, 0x98, 0xbd, 0xc5, 0x4f, 0x2f, 0xc5, 0x74, 0xcc, 0xf8, 0xa1, 0x30, 0xa9, 0x63, 0xa6,
	0x0e, 0x9f, 0x19, 0x6c, 0x94, 0x3c, 0x53, 0x6a, 0x0b, 0xaa, 0x03, 0x6b, 0x39, 0x4f, 0x77, 0x7e,
	0xee, 0x0a, 0xfa, 0x21, 0xcd, 0xd8, 0xfe, 0xc6, 0x95, 0xd4, 0x43, 0x9a, 0x55, 0x5b, 0x50, 0xdf,
	0xc2, 0xed, 0xdc, 0x23, 0x65, 0x72, 0xf6, 0xa6, 0x9d, 0x5b, 0x93, 0xca, 0xc6, 0x8c, 0x73, 0xaa,
	0xac, 0x0a, 0x88, 0x8f, 0x00, 0x6e, 0xe6, 0xe8, 0x36, 0x3c, 0x3d, 0xad, 0x8d, 0xc5, 0x3f, 0x22,
	0xa8, 0x2d, 0xa8, 0x26, 0x2c, 0xc7, 0xda, 0xe5, 0xc3, 0x78, 0x90, 0xd1, 0xb5, 0xe4, 0xb7, 0xef,
	0x92, 0x52, 0x3d, 0xef, 0x5b, 0x74, 0x6c, 0xeb, 0x48, 0x7f, 0xde, 0x31, 0xd5, 0x48, 0xd6, 0x77,
	0x28, 0x53, 0x8d, 0xe4, 0x7c, 0x25, 0x12, 0xa9, 0xd3, 0x90, 0x3f, 0x8e, 0x99, 0x54, 0x2c, 0x13,
	0x5f, 0xe6, 0x4c, 0x8a, 0x92, 0xf4, 0x77, 0x35, 0xb5, 0x05, 0xd5, 0x82, 0x95, 0xac, 0x8f, 0xcf,
	0x26, 0xd5, 0xf6, 0x9c, 0x4f, 0xe7, 0xb6, 0x1f, 0x5e, 0x25, 0x5b, 0x8a, 0x44, 0xf2, 0xf7, 0x7c,
	0xb3, 0x49, 0x14, 0xff, 0x22, 0x71, 0x0e, 0x89, 0x52, 0x9f, 0x10, 0x46, 0x6d, 0x75, 0x65, 0xdf,
	0x72, 0xcc, 0xd4, 0xe7, 0x95, 0xd3, 0xea, 0x59, 0x32, 0x4b, 0xa6, 0x7a, 0x96, 0xcc, 0xa4, 0x2d,
	0xec, 0x34, 0x7e, 0xef, 0xa7, 0x9b, 0xca, 0x7f, 0xfc, 0xe9, 0xa6, 0xf2, 0x87, 0x3f, 0xdd, 0x54,
	0x4e, 0x2a, 0xe8, 0x69, 0xf7, 0xa7, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xfc, 0x62,
	0xd4, 0x66, 0x7a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiGatewayServiceClient is the client API for ApiGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiGatewayServiceClient interface {
	// 注册用户和普通机器人信息
	RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 注册红包机器人接口
	RegisterRedBotInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 更新用户的username
	UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error)
	// 删除消息
	DeleteMessages(ctx context.Context, in *ReqDeleteMessages, opts ...grpc.CallOption) (*ReplyDeleteMessages, error)
	// 机器人调用接口
	BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error)
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error)
	//获取full channel
	GetFullChannel(ctx context.Context, in *ReqFullchannel, opts ...grpc.CallOption) (*ReplyFullChannel, error)
	//获取超级群或者频道的修正信息
	GetChannelDifference(ctx context.Context, in *ReqGetchannelDifference, opts ...grpc.CallOption) (*ReplyChannelDiffCommon, error)
	//获取成员信息
	GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error)
	// 获取所有群 (除去部分)
	GetAllChats(ctx context.Context, in *ReqGetAllChats, opts ...grpc.CallOption) (*ReplyGetAllChats, error)
	//离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error)
	//置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyUpdatePinnedChannelMessage, error)
	//更新firstName,lastName和about
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error)
	//更新机器人相关信息
	UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error)
	//编辑超级群或者频道的标题
	EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyEditChannelTitle, error)
	//修改超级群或者频道的描述信息
	EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyEditChannelAbout, error)
	// 网关上传文件描述信息
	GatewayUploadFileDesc(ctx context.Context, in *MsgFileDescReq, opts ...grpc.CallOption) (*MsgFileDescResp, error)
	// 发送红包
	SendRDP(ctx context.Context, in *SendRDPReq, opts ...grpc.CallOption) (*SendRDPResp, error)
	//　检查红包
	CheckRDP(ctx context.Context, in *CheckRDPReq, opts ...grpc.CallOption) (*CheckRDPResp, error)
	//　领取红包
	ReceiveRDP(ctx context.Context, in *ReceiveRDPReq, opts ...grpc.CallOption) (*ReceiveRDPResp, error)
	// 获取全部用户信息
	GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error)
	GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error)
	// 新增获取用户信息接口
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 发送红包游戏
	SendRedGame(ctx context.Context, in *SendGameRedReq, opts ...grpc.CallOption) (*GameRedResp, error)
	// 领取红包游戏
	ReceiveRedGame(ctx context.Context, in *RcvGameRedReq, opts ...grpc.CallOption) (*GameRedResp, error)
	//查询游戏红包详情
	QueryRedGame(ctx context.Context, in *QryGameRdpReq, opts ...grpc.CallOption) (*GameRedResp, error)
	// 通过用户名获取用户Id
	GetUserIdByUserName(ctx context.Context, in *GetUserByUsernameReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 设置用户生日和性别
	SetUserDetail(ctx context.Context, in *SetUserDetailReq, opts ...grpc.CallOption) (*SetUserDetailResult, error)
	//更新机器人头像请求
	UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error)
	// DownloadFile 下载文件或文件片
	DownloadFile(ctx context.Context, in *MsgDownloadFileReq, opts ...grpc.CallOption) (*MsgDownloadFileResp, error)
	// 新增支付获取游戏规则借口
	OtherTrans(ctx context.Context, in *OtherTransReq, opts ...grpc.CallOption) (*OtherTransResp, error)
	// 积分通用接口
	IntegralUniversalBusiness(ctx context.Context, in *ReqIntegralUniversalBusiness, opts ...grpc.CallOption) (*ReplyIntegralUniversalBusiness, error)
	// 获取回复消息
	GetChannelMsg(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// 新增官方标志设置（内部调用）
	SetBotVerified(ctx context.Context, in *SetBotVerifiedReq, opts ...grpc.CallOption) (*SetBotVerifiedReply, error)
	// 获取机器人消息Id通过uuid
	GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error)
	// 获取多个好友的共同好友
	ContactsGetCommonContacts(ctx context.Context, in *ContactsGetCommonContactsReq, opts ...grpc.CallOption) (*ContactsGetCommonContactsResult, error)
	// 更新朋友圈通知
	UpdateMoments(ctx context.Context, in *ReqUpdateMoments, opts ...grpc.CallOption) (*ResUpdateMoments, error)
	//获取用户联系人列表
	ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error)
	//根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	CheckIsMuteContact(ctx context.Context, in *CheckIsMuteContactReq, opts ...grpc.CallOption) (*CheckIsMuteContactResult, error)
	// 朋友圈互动通知
	MomentNotify(ctx context.Context, in *MomentNotifyReq, opts ...grpc.CallOption) (*MomentNotifyResult, error)
	// 根据用户昵称搜索
	SearchUserByNickname(ctx context.Context, in *SearchUserByNicknameReq, opts ...grpc.CallOption) (*SearchUserByNicknameResult, error)
	// 检测是否是自己的好友
	CheckIsSelfContact(ctx context.Context, in *CheckIsSelfContactReq, opts ...grpc.CallOption) (*CheckIsSelfContactResult, error)
	FindMemberLevelCache(ctx context.Context, in *ReqMemberLevelCache, opts ...grpc.CallOption) (*ReplyMemberLevelCache, error)
}

type apiGatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiGatewayServiceClient(cc *grpc.ClientConn) ApiGatewayServiceClient {
	return &apiGatewayServiceClient{cc}
}

func (c *apiGatewayServiceClient) RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/RegisterUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) RegisterRedBotInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/RegisterRedBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error) {
	out := new(UpdateuserNameResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error) {
	out := new(DelAccountResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/DeleteUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) DeleteMessages(ctx context.Context, in *ReqDeleteMessages, opts ...grpc.CallOption) (*ReplyDeleteMessages, error) {
	out := new(ReplyDeleteMessages)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/DeleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error) {
	out := new(ReplyBotCall)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/BotCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error) {
	out := new(ReplyGetMessageByUserIdMsgId)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetMessageByUserIdMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetFullChannel(ctx context.Context, in *ReqFullchannel, opts ...grpc.CallOption) (*ReplyFullChannel, error) {
	out := new(ReplyFullChannel)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetChannelDifference(ctx context.Context, in *ReqGetchannelDifference, opts ...grpc.CallOption) (*ReplyChannelDiffCommon, error) {
	out := new(ReplyChannelDiffCommon)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetChannelDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error) {
	out := new(ReplyParticipants)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetAllChats(ctx context.Context, in *ReqGetAllChats, opts ...grpc.CallOption) (*ReplyGetAllChats, error) {
	out := new(ReplyGetAllChats)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetAllChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error) {
	out := new(ReplyLeaveChannel)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/LeaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyUpdatePinnedChannelMessage, error) {
	out := new(ReplyUpdatePinnedChannelMessage)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdatePinnedChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error) {
	out := new(UpdateUserProfileResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error) {
	out := new(BotUpdateInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyEditChannelTitle, error) {
	out := new(ReplyEditChannelTitle)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/EditChannelTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyEditChannelAbout, error) {
	out := new(ReplyEditChannelAbout)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/EditChannelAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GatewayUploadFileDesc(ctx context.Context, in *MsgFileDescReq, opts ...grpc.CallOption) (*MsgFileDescResp, error) {
	out := new(MsgFileDescResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GatewayUploadFileDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SendRDP(ctx context.Context, in *SendRDPReq, opts ...grpc.CallOption) (*SendRDPResp, error) {
	out := new(SendRDPResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SendRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) CheckRDP(ctx context.Context, in *CheckRDPReq, opts ...grpc.CallOption) (*CheckRDPResp, error) {
	out := new(CheckRDPResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/CheckRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ReceiveRDP(ctx context.Context, in *ReceiveRDPReq, opts ...grpc.CallOption) (*ReceiveRDPResp, error) {
	out := new(ReceiveRDPResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/ReceiveRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error) {
	out := new(GetFullUserResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetFullUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error) {
	out := new(GetUserInfoByIdArrResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetUserInfoByIdArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SendRedGame(ctx context.Context, in *SendGameRedReq, opts ...grpc.CallOption) (*GameRedResp, error) {
	out := new(GameRedResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SendRedGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ReceiveRedGame(ctx context.Context, in *RcvGameRedReq, opts ...grpc.CallOption) (*GameRedResp, error) {
	out := new(GameRedResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/ReceiveRedGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) QueryRedGame(ctx context.Context, in *QryGameRdpReq, opts ...grpc.CallOption) (*GameRedResp, error) {
	out := new(GameRedResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/QueryRedGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetUserIdByUserName(ctx context.Context, in *GetUserByUsernameReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetUserIdByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SetUserDetail(ctx context.Context, in *SetUserDetailReq, opts ...grpc.CallOption) (*SetUserDetailResult, error) {
	out := new(SetUserDetailResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SetUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error) {
	out := new(UpdateBotPicResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateBotPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) DownloadFile(ctx context.Context, in *MsgDownloadFileReq, opts ...grpc.CallOption) (*MsgDownloadFileResp, error) {
	out := new(MsgDownloadFileResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) OtherTrans(ctx context.Context, in *OtherTransReq, opts ...grpc.CallOption) (*OtherTransResp, error) {
	out := new(OtherTransResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/OtherTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) IntegralUniversalBusiness(ctx context.Context, in *ReqIntegralUniversalBusiness, opts ...grpc.CallOption) (*ReplyIntegralUniversalBusiness, error) {
	out := new(ReplyIntegralUniversalBusiness)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/IntegralUniversalBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetChannelMsg(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	out := new(ReplyGetChannelMessageByChannelIdMsgId)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SetBotVerified(ctx context.Context, in *SetBotVerifiedReq, opts ...grpc.CallOption) (*SetBotVerifiedReply, error) {
	out := new(SetBotVerifiedReply)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SetBotVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error) {
	out := new(ReplyGetMessageByUserIdUuid)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetMessageByUserIdUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ContactsGetCommonContacts(ctx context.Context, in *ContactsGetCommonContactsReq, opts ...grpc.CallOption) (*ContactsGetCommonContactsResult, error) {
	out := new(ContactsGetCommonContactsResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/ContactsGetCommonContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateMoments(ctx context.Context, in *ReqUpdateMoments, opts ...grpc.CallOption) (*ResUpdateMoments, error) {
	out := new(ResUpdateMoments)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error) {
	out := new(ContatsGetContactsResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/ContactsGetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) CheckIsMuteContact(ctx context.Context, in *CheckIsMuteContactReq, opts ...grpc.CallOption) (*CheckIsMuteContactResult, error) {
	out := new(CheckIsMuteContactResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/CheckIsMuteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) MomentNotify(ctx context.Context, in *MomentNotifyReq, opts ...grpc.CallOption) (*MomentNotifyResult, error) {
	out := new(MomentNotifyResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/MomentNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SearchUserByNickname(ctx context.Context, in *SearchUserByNicknameReq, opts ...grpc.CallOption) (*SearchUserByNicknameResult, error) {
	out := new(SearchUserByNicknameResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SearchUserByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) CheckIsSelfContact(ctx context.Context, in *CheckIsSelfContactReq, opts ...grpc.CallOption) (*CheckIsSelfContactResult, error) {
	out := new(CheckIsSelfContactResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/CheckIsSelfContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) FindMemberLevelCache(ctx context.Context, in *ReqMemberLevelCache, opts ...grpc.CallOption) (*ReplyMemberLevelCache, error) {
	out := new(ReplyMemberLevelCache)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/FindMemberLevelCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiGatewayServiceServer is the server API for ApiGatewayService service.
type ApiGatewayServiceServer interface {
	// 注册用户和普通机器人信息
	RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 注册红包机器人接口
	RegisterRedBotInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 更新用户的username
	UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error)
	// 删除消息
	DeleteMessages(context.Context, *ReqDeleteMessages) (*ReplyDeleteMessages, error)
	// 机器人调用接口
	BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error)
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error)
	//获取full channel
	GetFullChannel(context.Context, *ReqFullchannel) (*ReplyFullChannel, error)
	//获取超级群或者频道的修正信息
	GetChannelDifference(context.Context, *ReqGetchannelDifference) (*ReplyChannelDiffCommon, error)
	//获取成员信息
	GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error)
	// 获取所有群 (除去部分)
	GetAllChats(context.Context, *ReqGetAllChats) (*ReplyGetAllChats, error)
	//离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error)
	//置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyUpdatePinnedChannelMessage, error)
	//更新firstName,lastName和about
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error)
	//更新机器人相关信息
	UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error)
	//编辑超级群或者频道的标题
	EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyEditChannelTitle, error)
	//修改超级群或者频道的描述信息
	EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyEditChannelAbout, error)
	// 网关上传文件描述信息
	GatewayUploadFileDesc(context.Context, *MsgFileDescReq) (*MsgFileDescResp, error)
	// 发送红包
	SendRDP(context.Context, *SendRDPReq) (*SendRDPResp, error)
	//　检查红包
	CheckRDP(context.Context, *CheckRDPReq) (*CheckRDPResp, error)
	//　领取红包
	ReceiveRDP(context.Context, *ReceiveRDPReq) (*ReceiveRDPResp, error)
	// 获取全部用户信息
	GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error)
	GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error)
	// 新增获取用户信息接口
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error)
	// 发送红包游戏
	SendRedGame(context.Context, *SendGameRedReq) (*GameRedResp, error)
	// 领取红包游戏
	ReceiveRedGame(context.Context, *RcvGameRedReq) (*GameRedResp, error)
	//查询游戏红包详情
	QueryRedGame(context.Context, *QryGameRdpReq) (*GameRedResp, error)
	// 通过用户名获取用户Id
	GetUserIdByUserName(context.Context, *GetUserByUsernameReq) (*GetUserInfoResult, error)
	// 设置用户生日和性别
	SetUserDetail(context.Context, *SetUserDetailReq) (*SetUserDetailResult, error)
	//更新机器人头像请求
	UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error)
	// DownloadFile 下载文件或文件片
	DownloadFile(context.Context, *MsgDownloadFileReq) (*MsgDownloadFileResp, error)
	// 新增支付获取游戏规则借口
	OtherTrans(context.Context, *OtherTransReq) (*OtherTransResp, error)
	// 积分通用接口
	IntegralUniversalBusiness(context.Context, *ReqIntegralUniversalBusiness) (*ReplyIntegralUniversalBusiness, error)
	// 获取回复消息
	GetChannelMsg(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// 新增官方标志设置（内部调用）
	SetBotVerified(context.Context, *SetBotVerifiedReq) (*SetBotVerifiedReply, error)
	// 获取机器人消息Id通过uuid
	GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error)
	// 获取多个好友的共同好友
	ContactsGetCommonContacts(context.Context, *ContactsGetCommonContactsReq) (*ContactsGetCommonContactsResult, error)
	// 更新朋友圈通知
	UpdateMoments(context.Context, *ReqUpdateMoments) (*ResUpdateMoments, error)
	//获取用户联系人列表
	ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error)
	//根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	CheckIsMuteContact(context.Context, *CheckIsMuteContactReq) (*CheckIsMuteContactResult, error)
	// 朋友圈互动通知
	MomentNotify(context.Context, *MomentNotifyReq) (*MomentNotifyResult, error)
	// 根据用户昵称搜索
	SearchUserByNickname(context.Context, *SearchUserByNicknameReq) (*SearchUserByNicknameResult, error)
	// 检测是否是自己的好友
	CheckIsSelfContact(context.Context, *CheckIsSelfContactReq) (*CheckIsSelfContactResult, error)
	FindMemberLevelCache(context.Context, *ReqMemberLevelCache) (*ReplyMemberLevelCache, error)
}

// UnimplementedApiGatewayServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServiceServer struct {
}

func (*UnimplementedApiGatewayServiceServer) RegisterUserInfo(ctx context.Context, req *RegisterUserInfoReq) (*RegisterUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserInfo not implemented")
}
func (*UnimplementedApiGatewayServiceServer) RegisterRedBotInfo(ctx context.Context, req *RegisterUserInfoReq) (*RegisterUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRedBotInfo not implemented")
}
func (*UnimplementedApiGatewayServiceServer) UpdateUserName(ctx context.Context, req *UpdateuserNameReq) (*UpdateuserNameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (*UnimplementedApiGatewayServiceServer) DeleteUserInfoById(ctx context.Context, req *DeleteAccountByIdReq) (*DelAccountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInfoById not implemented")
}
func (*UnimplementedApiGatewayServiceServer) DeleteMessages(ctx context.Context, req *ReqDeleteMessages) (*ReplyDeleteMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessages not implemented")
}
func (*UnimplementedApiGatewayServiceServer) BotCall(ctx context.Context, req *ReqBotCall) (*ReplyBotCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotCall not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetMessageByUserIdMsgId(ctx context.Context, req *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserIdMsgId not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetFullChannel(ctx context.Context, req *ReqFullchannel) (*ReplyFullChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChannel not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetChannelDifference(ctx context.Context, req *ReqGetchannelDifference) (*ReplyChannelDiffCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDifference not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetParticipants(ctx context.Context, req *ReqParticipants) (*ReplyParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipants not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetAllChats(ctx context.Context, req *ReqGetAllChats) (*ReplyGetAllChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChats not implemented")
}
func (*UnimplementedApiGatewayServiceServer) LeaveChannel(ctx context.Context, req *ReqLeaveChannel) (*ReplyLeaveChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (*UnimplementedApiGatewayServiceServer) UpdatePinnedChannelMessage(ctx context.Context, req *ReqUpdatePinnedChannelMessage) (*ReplyUpdatePinnedChannelMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePinnedChannelMessage not implemented")
}
func (*UnimplementedApiGatewayServiceServer) UpdateUserProfile(ctx context.Context, req *UpdateUserProfileReq) (*UpdateUserProfileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (*UnimplementedApiGatewayServiceServer) UpdateBotInfo(ctx context.Context, req *BotUpdateInfo) (*BotUpdateInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotInfo not implemented")
}
func (*UnimplementedApiGatewayServiceServer) EditChannelTitle(ctx context.Context, req *ReqEditChannelTitle) (*ReplyEditChannelTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelTitle not implemented")
}
func (*UnimplementedApiGatewayServiceServer) EditChannelAbout(ctx context.Context, req *ReqEditChannelAbout) (*ReplyEditChannelAbout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelAbout not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GatewayUploadFileDesc(ctx context.Context, req *MsgFileDescReq) (*MsgFileDescResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayUploadFileDesc not implemented")
}
func (*UnimplementedApiGatewayServiceServer) SendRDP(ctx context.Context, req *SendRDPReq) (*SendRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRDP not implemented")
}
func (*UnimplementedApiGatewayServiceServer) CheckRDP(ctx context.Context, req *CheckRDPReq) (*CheckRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRDP not implemented")
}
func (*UnimplementedApiGatewayServiceServer) ReceiveRDP(ctx context.Context, req *ReceiveRDPReq) (*ReceiveRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRDP not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetFullUser(ctx context.Context, req *GetFullUserReq) (*GetFullUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullUser not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetUserInfoByIdArr(ctx context.Context, req *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByIdArr not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetUserInfoById(ctx context.Context, req *GetUserInfoByIdReq) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (*UnimplementedApiGatewayServiceServer) SendRedGame(ctx context.Context, req *SendGameRedReq) (*GameRedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRedGame not implemented")
}
func (*UnimplementedApiGatewayServiceServer) ReceiveRedGame(ctx context.Context, req *RcvGameRedReq) (*GameRedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRedGame not implemented")
}
func (*UnimplementedApiGatewayServiceServer) QueryRedGame(ctx context.Context, req *QryGameRdpReq) (*GameRedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRedGame not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetUserIdByUserName(ctx context.Context, req *GetUserByUsernameReq) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByUserName not implemented")
}
func (*UnimplementedApiGatewayServiceServer) SetUserDetail(ctx context.Context, req *SetUserDetailReq) (*SetUserDetailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserDetail not implemented")
}
func (*UnimplementedApiGatewayServiceServer) UpdateBotPic(ctx context.Context, req *UpdateBotPicRequest) (*UpdateBotPicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotPic not implemented")
}
func (*UnimplementedApiGatewayServiceServer) DownloadFile(ctx context.Context, req *MsgDownloadFileReq) (*MsgDownloadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (*UnimplementedApiGatewayServiceServer) OtherTrans(ctx context.Context, req *OtherTransReq) (*OtherTransResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtherTrans not implemented")
}
func (*UnimplementedApiGatewayServiceServer) IntegralUniversalBusiness(ctx context.Context, req *ReqIntegralUniversalBusiness) (*ReplyIntegralUniversalBusiness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegralUniversalBusiness not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetChannelMsg(ctx context.Context, req *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMsg not implemented")
}
func (*UnimplementedApiGatewayServiceServer) SetBotVerified(ctx context.Context, req *SetBotVerifiedReq) (*SetBotVerifiedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBotVerified not implemented")
}
func (*UnimplementedApiGatewayServiceServer) GetMessageByUserIdUuid(ctx context.Context, req *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserIdUuid not implemented")
}
func (*UnimplementedApiGatewayServiceServer) ContactsGetCommonContacts(ctx context.Context, req *ContactsGetCommonContactsReq) (*ContactsGetCommonContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetCommonContacts not implemented")
}
func (*UnimplementedApiGatewayServiceServer) UpdateMoments(ctx context.Context, req *ReqUpdateMoments) (*ResUpdateMoments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoments not implemented")
}
func (*UnimplementedApiGatewayServiceServer) ContactsGetContacts(ctx context.Context, req *ContatsGetContactsReq) (*ContatsGetContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContacts not implemented")
}
func (*UnimplementedApiGatewayServiceServer) CheckIsMuteContact(ctx context.Context, req *CheckIsMuteContactReq) (*CheckIsMuteContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsMuteContact not implemented")
}
func (*UnimplementedApiGatewayServiceServer) MomentNotify(ctx context.Context, req *MomentNotifyReq) (*MomentNotifyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MomentNotify not implemented")
}
func (*UnimplementedApiGatewayServiceServer) SearchUserByNickname(ctx context.Context, req *SearchUserByNicknameReq) (*SearchUserByNicknameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByNickname not implemented")
}
func (*UnimplementedApiGatewayServiceServer) CheckIsSelfContact(ctx context.Context, req *CheckIsSelfContactReq) (*CheckIsSelfContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsSelfContact not implemented")
}
func (*UnimplementedApiGatewayServiceServer) FindMemberLevelCache(ctx context.Context, req *ReqMemberLevelCache) (*ReplyMemberLevelCache, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMemberLevelCache not implemented")
}

func RegisterApiGatewayServiceServer(s *grpc.Server, srv ApiGatewayServiceServer) {
	s.RegisterService(&_ApiGatewayService_serviceDesc, srv)
}

func _ApiGatewayService_RegisterUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).RegisterUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/RegisterUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).RegisterUserInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_RegisterRedBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).RegisterRedBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/RegisterRedBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).RegisterRedBotInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateuserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateUserName(ctx, req.(*UpdateuserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_DeleteUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).DeleteUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/DeleteUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).DeleteUserInfoById(ctx, req.(*DeleteAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_DeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).DeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/DeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).DeleteMessages(ctx, req.(*ReqDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_BotCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).BotCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/BotCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).BotCall(ctx, req.(*ReqBotCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetMessageByUserIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetMessageByUserIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetMessageByUserIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetMessageByUserIdMsgId(ctx, req.(*ReqGetMessageByUserIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFullchannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetFullChannel(ctx, req.(*ReqFullchannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetchannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetChannelDifference(ctx, req.(*ReqGetchannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetParticipants(ctx, req.(*ReqParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetAllChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetAllChats(ctx, req.(*ReqGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdatePinnedChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdatePinnedChannelMessage(ctx, req.(*ReqUpdatePinnedChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateBotInfo(ctx, req.(*BotUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).EditChannelTitle(ctx, req.(*ReqEditChannelTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).EditChannelAbout(ctx, req.(*ReqEditChannelAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GatewayUploadFileDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFileDescReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GatewayUploadFileDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GatewayUploadFileDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GatewayUploadFileDesc(ctx, req.(*MsgFileDescReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SendRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SendRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SendRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SendRDP(ctx, req.(*SendRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_CheckRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).CheckRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/CheckRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).CheckRDP(ctx, req.(*CheckRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ReceiveRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ReceiveRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/ReceiveRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ReceiveRDP(ctx, req.(*ReceiveRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetFullUser(ctx, req.(*GetFullUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetUserInfoByIdArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetUserInfoByIdArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetUserInfoByIdArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetUserInfoByIdArr(ctx, req.(*GetUserInfoByIdArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SendRedGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameRedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SendRedGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SendRedGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SendRedGame(ctx, req.(*SendGameRedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ReceiveRedGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RcvGameRedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ReceiveRedGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/ReceiveRedGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ReceiveRedGame(ctx, req.(*RcvGameRedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_QueryRedGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryGameRdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).QueryRedGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/QueryRedGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).QueryRedGame(ctx, req.(*QryGameRdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetUserIdByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetUserIdByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetUserIdByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetUserIdByUserName(ctx, req.(*GetUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SetUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SetUserDetail(ctx, req.(*SetUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateBotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateBotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateBotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateBotPic(ctx, req.(*UpdateBotPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDownloadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).DownloadFile(ctx, req.(*MsgDownloadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_OtherTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherTransReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).OtherTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/OtherTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).OtherTrans(ctx, req.(*OtherTransReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_IntegralUniversalBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIntegralUniversalBusiness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).IntegralUniversalBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/IntegralUniversalBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).IntegralUniversalBusiness(ctx, req.(*ReqIntegralUniversalBusiness))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageByChannelIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetChannelMsg(ctx, req.(*ReqGetChannelMessageByChannelIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SetBotVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBotVerifiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SetBotVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SetBotVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SetBotVerified(ctx, req.(*SetBotVerifiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetMessageByUserIdUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetMessageByUserIdUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetMessageByUserIdUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetMessageByUserIdUuid(ctx, req.(*ReqGetMessageByUserIdUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ContactsGetCommonContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetCommonContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ContactsGetCommonContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/ContactsGetCommonContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ContactsGetCommonContacts(ctx, req.(*ContactsGetCommonContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateMoments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateMoments(ctx, req.(*ReqUpdateMoments))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContatsGetContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ContactsGetContacts(ctx, req.(*ContatsGetContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_CheckIsMuteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsMuteContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).CheckIsMuteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/CheckIsMuteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).CheckIsMuteContact(ctx, req.(*CheckIsMuteContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_MomentNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).MomentNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/MomentNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).MomentNotify(ctx, req.(*MomentNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SearchUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SearchUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SearchUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SearchUserByNickname(ctx, req.(*SearchUserByNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_CheckIsSelfContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsSelfContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).CheckIsSelfContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/CheckIsSelfContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).CheckIsSelfContact(ctx, req.(*CheckIsSelfContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_FindMemberLevelCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMemberLevelCache)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).FindMemberLevelCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/FindMemberLevelCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).FindMemberLevelCache(ctx, req.(*ReqMemberLevelCache))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiGatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imapigateway.ApiGatewayService",
	HandlerType: (*ApiGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUserInfo",
			Handler:    _ApiGatewayService_RegisterUserInfo_Handler,
		},
		{
			MethodName: "RegisterRedBotInfo",
			Handler:    _ApiGatewayService_RegisterRedBotInfo_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _ApiGatewayService_UpdateUserName_Handler,
		},
		{
			MethodName: "DeleteUserInfoById",
			Handler:    _ApiGatewayService_DeleteUserInfoById_Handler,
		},
		{
			MethodName: "DeleteMessages",
			Handler:    _ApiGatewayService_DeleteMessages_Handler,
		},
		{
			MethodName: "BotCall",
			Handler:    _ApiGatewayService_BotCall_Handler,
		},
		{
			MethodName: "GetMessageByUserIdMsgId",
			Handler:    _ApiGatewayService_GetMessageByUserIdMsgId_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _ApiGatewayService_GetFullChannel_Handler,
		},
		{
			MethodName: "GetChannelDifference",
			Handler:    _ApiGatewayService_GetChannelDifference_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _ApiGatewayService_GetParticipants_Handler,
		},
		{
			MethodName: "GetAllChats",
			Handler:    _ApiGatewayService_GetAllChats_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _ApiGatewayService_LeaveChannel_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _ApiGatewayService_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _ApiGatewayService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateBotInfo",
			Handler:    _ApiGatewayService_UpdateBotInfo_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _ApiGatewayService_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _ApiGatewayService_EditChannelAbout_Handler,
		},
		{
			MethodName: "GatewayUploadFileDesc",
			Handler:    _ApiGatewayService_GatewayUploadFileDesc_Handler,
		},
		{
			MethodName: "SendRDP",
			Handler:    _ApiGatewayService_SendRDP_Handler,
		},
		{
			MethodName: "CheckRDP",
			Handler:    _ApiGatewayService_CheckRDP_Handler,
		},
		{
			MethodName: "ReceiveRDP",
			Handler:    _ApiGatewayService_ReceiveRDP_Handler,
		},
		{
			MethodName: "GetFullUser",
			Handler:    _ApiGatewayService_GetFullUser_Handler,
		},
		{
			MethodName: "GetUserInfoByIdArr",
			Handler:    _ApiGatewayService_GetUserInfoByIdArr_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _ApiGatewayService_GetUserInfoById_Handler,
		},
		{
			MethodName: "SendRedGame",
			Handler:    _ApiGatewayService_SendRedGame_Handler,
		},
		{
			MethodName: "ReceiveRedGame",
			Handler:    _ApiGatewayService_ReceiveRedGame_Handler,
		},
		{
			MethodName: "QueryRedGame",
			Handler:    _ApiGatewayService_QueryRedGame_Handler,
		},
		{
			MethodName: "GetUserIdByUserName",
			Handler:    _ApiGatewayService_GetUserIdByUserName_Handler,
		},
		{
			MethodName: "SetUserDetail",
			Handler:    _ApiGatewayService_SetUserDetail_Handler,
		},
		{
			MethodName: "UpdateBotPic",
			Handler:    _ApiGatewayService_UpdateBotPic_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _ApiGatewayService_DownloadFile_Handler,
		},
		{
			MethodName: "OtherTrans",
			Handler:    _ApiGatewayService_OtherTrans_Handler,
		},
		{
			MethodName: "IntegralUniversalBusiness",
			Handler:    _ApiGatewayService_IntegralUniversalBusiness_Handler,
		},
		{
			MethodName: "GetChannelMsg",
			Handler:    _ApiGatewayService_GetChannelMsg_Handler,
		},
		{
			MethodName: "SetBotVerified",
			Handler:    _ApiGatewayService_SetBotVerified_Handler,
		},
		{
			MethodName: "GetMessageByUserIdUuid",
			Handler:    _ApiGatewayService_GetMessageByUserIdUuid_Handler,
		},
		{
			MethodName: "ContactsGetCommonContacts",
			Handler:    _ApiGatewayService_ContactsGetCommonContacts_Handler,
		},
		{
			MethodName: "UpdateMoments",
			Handler:    _ApiGatewayService_UpdateMoments_Handler,
		},
		{
			MethodName: "ContactsGetContacts",
			Handler:    _ApiGatewayService_ContactsGetContacts_Handler,
		},
		{
			MethodName: "CheckIsMuteContact",
			Handler:    _ApiGatewayService_CheckIsMuteContact_Handler,
		},
		{
			MethodName: "MomentNotify",
			Handler:    _ApiGatewayService_MomentNotify_Handler,
		},
		{
			MethodName: "SearchUserByNickname",
			Handler:    _ApiGatewayService_SearchUserByNickname_Handler,
		},
		{
			MethodName: "CheckIsSelfContact",
			Handler:    _ApiGatewayService_CheckIsSelfContact_Handler,
		},
		{
			MethodName: "FindMemberLevelCache",
			Handler:    _ApiGatewayService_FindMemberLevelCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imapigateway.proto",
}

func (m *ReqMemberLevelCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMemberLevelCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqMemberLevelCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ImKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.ImUserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ImUserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyMemberLevelCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMemberLevelCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyMemberLevelCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VipLevelName) > 0 {
		i -= len(m.VipLevelName)
		copy(dAtA[i:], m.VipLevelName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.VipLevelName)))
		i--
		dAtA[i] = 0x22
	}
	if m.VipLevelCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.VipLevelCode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckIsSelfContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsSelfContactReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIsSelfContactReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckIsSelfContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsSelfContactResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIsSelfContactResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if m.IsSelfContact {
		i--
		if m.IsSelfContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchUserByNicknameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserByNicknameReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchUserByNicknameReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserIds) > 0 {
		dAtA3 := make([]byte, len(m.UserIds)*10)
		var j2 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintImapigateway(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchUserByNicknameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserByNicknameResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchUserByNicknameResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserInfos) > 0 {
		for iNdEx := len(m.UserInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MomentNotifyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MomentNotifyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MomentNotifyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entites) > 0 {
		for iNdEx := len(m.Entites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.MsgTime != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MsgTime))
		i--
		dAtA[i] = 0x60
	}
	if m.IsFollowed != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.IsFollowed))
		i--
		dAtA[i] = 0x58
	}
	if len(m.MsgContent) > 0 {
		i -= len(m.MsgContent)
		copy(dAtA[i:], m.MsgContent)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.MsgContent)))
		i--
		dAtA[i] = 0x52
	}
	if m.MsgId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ForumText) > 0 {
		i -= len(m.ForumText)
		copy(dAtA[i:], m.ForumText)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ForumText)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ForumImage) > 0 {
		i -= len(m.ForumImage)
		copy(dAtA[i:], m.ForumImage)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ForumImage)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ForumType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ForumType))
		i--
		dAtA[i] = 0x30
	}
	if m.ForumId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ForumId))
		i--
		dAtA[i] = 0x28
	}
	if m.WithId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.WithId))
		i--
		dAtA[i] = 0x20
	}
	if m.ToId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ToId))
		i--
		dAtA[i] = 0x18
	}
	if m.BusinessCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BusinessCode))
		i--
		dAtA[i] = 0x10
	}
	if m.SourceCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SourceCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if m.Length != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MomentNotifyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MomentNotifyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MomentNotifyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MomentNotifyData) > 0 {
		for iNdEx := len(m.MomentNotifyData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MomentNotifyData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MomentNotifyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MomentNotifyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MomentNotifyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckIsMuteContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsMuteContactReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIsMuteContactReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckIsMuteContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsMuteContactResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIsMuteContactResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MomentState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MomentState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MomentState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserId) > 0 {
		dAtA5 := make([]byte, len(m.UserId)*10)
		var j4 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintImapigateway(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpdateMoments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateMoments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpdateMoments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MomentStates) > 0 {
		for iNdEx := len(m.MomentStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MomentStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResUpdateMoments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResUpdateMoments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResUpdateMoments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContactInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x52
	}
	if m.GroupId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x48
	}
	if m.HasPhone {
		i--
		if m.HasPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.StarMark {
		i--
		if m.StarMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SelfIsContacted {
		i--
		if m.SelfIsContacted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsSelfContacted {
		i--
		if m.IsSelfContacted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContactId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ContactId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContatsGetContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContatsGetContactsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContatsGetContactsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contacthash) > 0 {
		i -= len(m.Contacthash)
		copy(dAtA[i:], m.Contacthash)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Contacthash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContatsGetContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContatsGetContactsResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContatsGetContactsResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserInfoArr) > 0 {
		for iNdEx := len(m.UserInfoArr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserInfoArr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContactArr) > 0 {
		for iNdEx := len(m.ContactArr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactArr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqIntegralUniversalBusiness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqIntegralUniversalBusiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqIntegralUniversalBusiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x28
	}
	if m.BusinessId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BusinessId))
		i--
		dAtA[i] = 0x20
	}
	if m.ImKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ImKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.ImUserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ImUserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplyIntegralUniversalBusiness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyIntegralUniversalBusiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyIntegralUniversalBusiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OtherTransReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherTransReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OtherTransReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReqBytes) > 0 {
		i -= len(m.ReqBytes)
		copy(dAtA[i:], m.ReqBytes)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ReqBytes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReqMessagId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ReqMessagId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.IpAddr) > 0 {
		i -= len(m.IpAddr)
		copy(dAtA[i:], m.IpAddr)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.IpAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OtherTransResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherTransResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OtherTransResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RespBytes) > 0 {
		i -= len(m.RespBytes)
		copy(dAtA[i:], m.RespBytes)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.RespBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetUserDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUserDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extend) > 0 {
		i -= len(m.Extend)
		copy(dAtA[i:], m.Extend)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Extend)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Birthday != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Birthday))
		i--
		dAtA[i] = 0x30
	}
	if m.Sex != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Photo) > 0 {
		i -= len(m.Photo)
		copy(dAtA[i:], m.Photo)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Photo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Flags != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetUserDetailResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserDetailResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUserDetailResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserByUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserByUsernameReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserInfoResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if m.Uinfo != nil {
		{
			size, err := m.Uinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendGameRedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendGameRedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendGameRedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RdpRsp) > 0 {
		i -= len(m.RdpRsp)
		copy(dAtA[i:], m.RdpRsp)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.RdpRsp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x10
	}
	if m.FromKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QryGameRdpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QryGameRdpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QryGameRdpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x22
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x10
	}
	if m.FromKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RcvGameRedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RcvGameRedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RcvGameRedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RdpRsp) > 0 {
		i -= len(m.RdpRsp)
		copy(dAtA[i:], m.RdpRsp)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.RdpRsp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x10
	}
	if m.FromKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRedResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRedResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Code != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRDPReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendRDPReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RedChanelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.RedChanelId))
		i--
		dAtA[i] = 0x28
	}
	if m.RedMessageId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.RedMessageId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ReqBytes) > 0 {
		i -= len(m.ReqBytes)
		copy(dAtA[i:], m.ReqBytes)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ReqBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReqMessageId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ReqMessageId))
		i--
		dAtA[i] = 0x10
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRDPResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendRDPResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RespBytes) > 0 {
		i -= len(m.RespBytes)
		copy(dAtA[i:], m.RespBytes)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.RespBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRDPReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckRDPReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReqBytes) > 0 {
		i -= len(m.ReqBytes)
		copy(dAtA[i:], m.ReqBytes)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ReqBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReqMessageId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ReqMessageId))
		i--
		dAtA[i] = 0x10
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRDPResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckRDPResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RespBytes) > 0 {
		i -= len(m.RespBytes)
		copy(dAtA[i:], m.RespBytes)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.RespBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReceiveRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveRDPReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceiveRDPReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReqBytes) > 0 {
		i -= len(m.ReqBytes)
		copy(dAtA[i:], m.ReqBytes)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ReqBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReqMessageId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ReqMessageId))
		i--
		dAtA[i] = 0x10
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReceiveRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveRDPResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceiveRDPResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RespBytes) > 0 {
		i -= len(m.RespBytes)
		copy(dAtA[i:], m.RespBytes)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.RespBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplyEditChannelAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChannelAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyEditChannelAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Succeed {
		i--
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyEditChannelTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChannelTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyEditChannelTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BotUpdateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotUpdateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BotNoChat {
		i--
		if m.BotNoChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BotChatHistory {
		i--
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BotInfoVersion != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotInfoVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BotUpdateInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdateInfoResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotUpdateInfoResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyUpdatePinnedChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdatePinnedChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyUpdatePinnedChannelMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplyLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyLeaveChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetAllChats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetAllChats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetAllChats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Fromid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyGetAllChats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetAllChats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyGetAllChats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chats) > 0 {
		dAtA14 := make([]byte, len(m.Chats)*10)
		var j13 int
		for _, num1 := range m.Chats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintImapigateway(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetchannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetchannelDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetchannelDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Device != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x50
	}
	if m.Range_MaxId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Range_MaxId))
		i--
		dAtA[i] = 0x48
	}
	if m.Range_MinId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Range_MinId))
		i--
		dAtA[i] = 0x40
	}
	if m.Limit != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x38
	}
	if m.Pts != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x30
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x28
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Flags != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x18
	}
	if m.FromKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyChannelDiffCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelDiffCommon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyChannelDiffCommon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Difference) > 0 {
		i -= len(m.Difference)
		copy(dAtA[i:], m.Difference)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Difference)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqFullchannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFullchannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFullchannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x10
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyFullChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyFullChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyFullChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Updates) > 0 {
		i -= len(m.Updates)
		copy(dAtA[i:], m.Updates)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Updates)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqDeleteMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqDeleteMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Channelid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Channelid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Id) > 0 {
		dAtA19 := make([]byte, len(m.Id)*10)
		var j18 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintImapigateway(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x2a
	}
	if m.Revoke {
		i--
		if m.Revoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Flags != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x18
	}
	if m.FromKeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyid))
		i--
		dAtA[i] = 0x10
	}
	if m.Fromid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyDeleteMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyDeleteMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterUserInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Birthday != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Birthday))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Sex != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x78
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.GroupNow != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.GroupNow))
		i--
		dAtA[i] = 0x68
	}
	if m.Dc != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Dc))
		i--
		dAtA[i] = 0x60
	}
	if len(m.LocalPhone) > 0 {
		i -= len(m.LocalPhone)
		copy(dAtA[i:], m.LocalPhone)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.LocalPhone)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x52
	}
	if m.BotNoChats {
		i--
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.BotChatHistory {
		i--
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.BotInfoVersion != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotInfoVersion))
		i--
		dAtA[i] = 0x38
	}
	if m.IsBot {
		i--
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetFullChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetFullChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetFullChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x10
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetParticipants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetParticipants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Hash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x32
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.PartiType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.PartiType))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.OffSet != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.OffSet))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpdatePinnedChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdatePinnedChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpdatePinnedChannelMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.FromKeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyid))
		i--
		dAtA[i] = 0x30
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Flags != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x10
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqEditChannelAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqEditChannelAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x28
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.FromKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqEditChannelTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqEditChannelTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FromKeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyid))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyChannelData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyChannelData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqDelManualBlockList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDelManualBlockList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqDelManualBlockList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x10
	}
	if m.UnBlockUser != nil {
		{
			size, err := m.UnBlockUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSetManualBlockList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetManualBlockList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSetManualBlockList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockUser != nil {
		{
			size, err := m.BlockUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockTime != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BlockTime))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManualBlockReplyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManualBlockReplyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManualBlockReplyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x18
	}
	if m.Reply {
		i--
		if m.Reply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReplyData) > 0 {
		i -= len(m.ReplyData)
		copy(dAtA[i:], m.ReplyData)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ReplyData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StoreShopStickerSetDocumentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetDocumentsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreShopStickerSetDocumentsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Documents) > 0 {
		dAtA32 := make([]byte, len(m.Documents)*10)
		var j31 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintImapigateway(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreShopStickerSetDocumentsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetDocumentsResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreShopStickerSetDocumentsResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthorStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorStickerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorStickerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Updated != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Updated))
		i--
		dAtA[i] = 0x48
	}
	if m.Created != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x40
	}
	if m.Ordered != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Ordered))
		i--
		dAtA[i] = 0x38
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Installed {
		i--
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StickersetId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.StickersetId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAuthorAllStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuthorAllStickerSetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAuthorAllStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuthorAllStickerSetResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteStickerPackDocumentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocumentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteStickerPackDocumentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StickersetId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.StickersetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteStickerPackDocumentResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocumentResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteStickerPackDocumentResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStickerSetInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStickerSetInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsId {
		i--
		if m.IsId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StickerSetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerSetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Documents) > 0 {
		dAtA35 := make([]byte, len(m.Documents)*10)
		var j34 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		i -= j34
		copy(dAtA[i:], dAtA35[:j34])
		i = encodeVarintImapigateway(dAtA, i, uint64(j34))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Emoticon) > 0 {
		i -= len(m.Emoticon)
		copy(dAtA[i:], m.Emoticon)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Emoticon)))
		i--
		dAtA[i] = 0x52
	}
	if m.Hash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x48
	}
	if m.Count != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if m.Masks {
		i--
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Official {
		i--
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Free {
		i--
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStickerSetInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetInfoResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStickerSetInfoResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if m.StickerSetInfo != nil {
		{
			size, err := m.StickerSetInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteStickerSetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StickerId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.StickerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteStickerSetResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreUserStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreUserStickerSetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Order != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x28
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Installed {
		i--
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.StickersetId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.StickersetId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreUserStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreUserStickerSetResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *StoreStickerPackDcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreStickerPackDcReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Stickpackbase != nil {
		{
			size, err := m.Stickpackbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StoreStickerPackDcResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreStickerPackDcResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreShopStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreShopStickerSetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x60
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Documents) > 0 {
		dAtA43 := make([]byte, len(m.Documents)*10)
		var j42 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA43[j42] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j42++
			}
			dAtA43[j42] = uint8(num)
			j42++
		}
		i -= j42
		copy(dAtA[i:], dAtA43[:j42])
		i = encodeVarintImapigateway(dAtA, i, uint64(j42))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Emoticon) > 0 {
		i -= len(m.Emoticon)
		copy(dAtA[i:], m.Emoticon)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Emoticon)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Hash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x40
	}
	if m.Count != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Masks {
		i--
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Official {
		i--
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Free {
		i--
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreShopStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreShopStickerSetResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Height != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Width != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResizeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResizeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConstraintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutputWebp {
		i--
		if m.OutputWebp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MaxSize != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConstraintReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OriginHeight != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.OriginHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.OriginWidth != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.OriginWidth))
		i--
		dAtA[i] = 0x28
	}
	if m.Height != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.Width != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CompressImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompressImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompressImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Quality != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompressImageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompressImageReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompressImageReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoPreviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxSize != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoPreviewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoPreviewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoPreviewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Height != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Width != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Preview) > 0 {
		i -= len(m.Preview)
		copy(dAtA[i:], m.Preview)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Preview)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Duration != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AudioPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioPreviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxSize != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioPreviewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioPreviewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioPreviewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Height != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x38
	}
	if m.Width != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Artist) > 0 {
		i -= len(m.Artist)
		copy(dAtA[i:], m.Artist)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Artist)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Duration != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqParticipants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqParticipants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Hash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x32
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.PartiType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.PartiType))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.OffSet != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.OffSet))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyParticipants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyParticipants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Updates) > 0 {
		i -= len(m.Updates)
		copy(dAtA[i:], m.Updates)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Updates)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.FromKeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Users) > 0 {
		dAtA47 := make([]byte, len(m.Users)*10)
		var j46 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA47[j46] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j46++
			}
			dAtA47[j46] = uint8(num)
			j46++
		}
		i -= j46
		copy(dAtA[i:], dAtA47[:j46])
		i = encodeVarintImapigateway(dAtA, i, uint64(j46))
		i--
		dAtA[i] = 0x22
	}
	if m.Creator != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Creator))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Chatid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Chatid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyCreateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyCreateChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyCreateChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqMigrateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMigrateChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqMigrateChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Fromkeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromkeyid))
		i--
		dAtA[i] = 0x18
	}
	if m.Chatid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Chatid))
		i--
		dAtA[i] = 0x10
	}
	if m.Fromid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyMigrateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMigrateChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyMigrateChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *ReqJoinChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqJoinChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.InviteType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.InviteType))
		i--
		dAtA[i] = 0x48
	}
	if m.Invitor != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Invitor))
		i--
		dAtA[i] = 0x40
	}
	if m.ByLink {
		i--
		if m.ByLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x30
	}
	if m.FromKeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyid))
		i--
		dAtA[i] = 0x28
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyJoinChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyJoinChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyJoinChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqChangeGroupAndChannelCrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeGroupAndChannelCrator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqChangeGroupAndChannelCrator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsChat {
		i--
		if m.IsChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.OperatorId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x18
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyChangeGroupAndChannelCrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChangeGroupAndChannelCrator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyChangeGroupAndChannelCrator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqBotCallMessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBotCallMessageMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBotCallMessageMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Layer != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Layer))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Request) > 0 {
		i -= len(m.Request)
		copy(dAtA[i:], m.Request)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Request)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MsgTxt) > 0 {
		i -= len(m.MsgTxt)
		copy(dAtA[i:], m.MsgTxt)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.MsgTxt)))
		i--
		dAtA[i] = 0x12
	}
	if m.FromBotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromBotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Limit != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OffsetPeer) > 0 {
		i -= len(m.OffsetPeer)
		copy(dAtA[i:], m.OffsetPeer)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.OffsetPeer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OffsetId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x20
	}
	if m.OffsetDate != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x18
	}
	if m.Flags != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x10
	}
	if m.Userid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Userid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSetGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetGameScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSetGameScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Botid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Botid))
		i--
		dAtA[i] = 0x48
	}
	if len(m.InlineMessageId) > 0 {
		i -= len(m.InlineMessageId)
		copy(dAtA[i:], m.InlineMessageId)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.InlineMessageId)))
		i--
		dAtA[i] = 0x42
	}
	if m.MessageId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x38
	}
	if m.ChatType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x30
	}
	if m.ChatId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x28
	}
	if m.DisableEditMessage {
		i--
		if m.DisableEditMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Userid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplySetGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySetGameScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplySetGameScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Succeed {
		i--
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyBanChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBanChannelUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyBanChannelUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Updates) > 0 {
		i -= len(m.Updates)
		copy(dAtA[i:], m.Updates)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Updates)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqBanChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBanChannelUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBanChannelUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ChannelBannedRights != nil {
		{
			size, err := m.ChannelBannedRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.UtilDate != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UtilDate))
		i--
		dAtA[i] = 0x30
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x28
	}
	if m.BannedUserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BannedUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.FromKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChannelBannedRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelBannedRights) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelBannedRights) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UntilDate != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UntilDate))
		i--
		dAtA[i] = 0x50
	}
	if m.EmbedLinks {
		i--
		if m.EmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.SendInline {
		i--
		if m.SendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SendGames {
		i--
		if m.SendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SendGifs {
		i--
		if m.SendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SendStickers {
		i--
		if m.SendStickers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SendMedia {
		i--
		if m.SendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SendMessages {
		i--
		if m.SendMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ViewMessages {
		i--
		if m.ViewMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Flags != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetChannels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChannelIds) > 0 {
		dAtA57 := make([]byte, len(m.ChannelIds)*10)
		var j56 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA57[j56] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j56++
			}
			dAtA57[j56] = uint8(num)
			j56++
		}
		i -= j56
		copy(dAtA[i:], dAtA57[:j56])
		i = encodeVarintImapigateway(dAtA, i, uint64(j56))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplyGetChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyGetChannels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqDeleteChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChatUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqDeleteChatUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.FromKeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyid))
		i--
		dAtA[i] = 0x20
	}
	if m.Userid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x18
	}
	if m.Chatid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Chatid))
		i--
		dAtA[i] = 0x10
	}
	if m.Fromid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyDeleteChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChatUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyDeleteChatUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelInactiveUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInactiveUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelInactiveUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TimeStr) > 0 {
		i -= len(m.TimeStr)
		copy(dAtA[i:], m.TimeStr)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.TimeStr)))
		i--
		dAtA[i] = 0x22
	}
	if m.Time != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChannelInactiveUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInactiveUsersReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChannelInactiveUsersReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Userid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChannelInactiveUsersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInactiveUsersResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChannelInactiveUsersResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errcode))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqBotInlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBotInlineCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBotInlineCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SessionId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x30
	}
	if m.KeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x28
	}
	if m.MessageId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x20
	}
	if m.BotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplyBotInlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBotInlineCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyBotInlineCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Inlinecall != nil {
		{
			size, err := m.Inlinecall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChatType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.FromId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSendUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendUserMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSendUserMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.Toid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Toid))
		i--
		dAtA[i] = 0x18
	}
	if m.FromKeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Fromid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyBool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyBool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqBotCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBotCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBotCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Layer != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Layer))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Request) > 0 {
		i -= len(m.Request)
		copy(dAtA[i:], m.Request)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Request)))
		i--
		dAtA[i] = 0x12
	}
	if m.FrombotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FrombotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyBotCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBotCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyBotCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetMessageByUserIdUuid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMessageByUserIdUuid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetMessageByUserIdUuid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Uuid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Uuid))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyGetMessageByUserIdUuid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMessageByUserIdUuid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyGetMessageByUserIdUuid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.UserMessage != nil {
		{
			size, err := m.UserMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessageByChannelIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetChannelMessageByChannelIdMsgId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.UserMessage != nil {
		{
			size, err := m.UserMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetMessageByUserIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMessageByUserIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetMessageByUserIdMsgId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyGetMessageByUserIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMessageByUserIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyGetMessageByUserIdMsgId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.UserMessage != nil {
		{
			size, err := m.UserMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFileDescReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFileDescReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFileDescReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgFileDescResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFileDescResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFileDescResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgServiceLimitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceLimitReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgServiceLimitReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reserved != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Reserved))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgServiceLimitResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceLimitResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgServiceLimitResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dssl != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Dssl))
		i--
		dAtA[i] = 0x18
	}
	if m.Ubfssl != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Ubfssl))
		i--
		dAtA[i] = 0x10
	}
	if m.Usfsl != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Usfsl))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgGetFidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetFidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetFidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PartTotal != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.PartTotal))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x22
	}
	if m.FileType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x18
	}
	if m.Fileid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fileid))
		i--
		dAtA[i] = 0x10
	}
	if m.Keyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Keyid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgGetFidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetFidResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetFidResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x20
	}
	if m.FileSize != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x18
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgFilePartsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFilePartsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFilePartsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if m.PartTotal != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.PartTotal))
		i--
		dAtA[i] = 0x28
	}
	if m.FileType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x20
	}
	if m.PartId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.PartId))
		i--
		dAtA[i] = 0x18
	}
	if m.Fileid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fileid))
		i--
		dAtA[i] = 0x10
	}
	if m.Keyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Keyid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDownloadFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDownloadFileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDownloadFileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Length != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownloadFileRespPara1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadFileRespPara1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadFileRespPara1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownloadFileRespPara2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadFileRespPara2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadFileRespPara2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Length != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *MsgDownloadFileResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDownloadFileResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDownloadFileResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Para2 != nil {
		{
			size, err := m.Para2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Para1 != nil {
		{
			size, err := m.Para1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgQueryObjInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQueryObjInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQueryObjInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryObjInfoRespPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObjInfoRespPara) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObjInfoRespPara) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.Size_ != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgQueryObjInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQueryObjInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQueryObjInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x10
	}
	if m.Para != nil {
		{
			size, err := m.Para.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGetFileDescReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetFileDescReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetFileDescReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgGetFileDescResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetFileDescResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetFileDescResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChannelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChannelInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dlog != nil {
		{
			size, err := m.Dlog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChannelInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChannelInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resultcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Resultcode))
		i--
		dAtA[i] = 0x10
	}
	if m.BaseInfo != nil {
		{
			size, err := m.BaseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetAdminGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetAdminGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetAdminGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UserID != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerFilter != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.PeerFilter))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PeerName) > 0 {
		i -= len(m.PeerName)
		copy(dAtA[i:], m.PeerName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.PeerName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PeerID != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyGetGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyGetGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channels) > 0 {
		for iNdEx := len(m.Channels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Channels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SuperGroups) > 0 {
		for iNdEx := len(m.SuperGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuperGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqDeleteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqDeleteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MsgId) > 0 {
		dAtA77 := make([]byte, len(m.MsgId)*10)
		var j76 int
		for _, num1 := range m.MsgId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA77[j76] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j76++
			}
			dAtA77[j76] = uint8(num)
			j76++
		}
		i -= j76
		copy(dAtA[i:], dAtA77[:j76])
		i = encodeVarintImapigateway(dAtA, i, uint64(j76))
		i--
		dAtA[i] = 0x22
	}
	if m.ChatId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChatType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSendChatAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendChatAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSendChatAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActionData) > 0 {
		i -= len(m.ActionData)
		copy(dAtA[i:], m.ActionData)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ActionData)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChatId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChatType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReqData) > 0 {
		i -= len(m.ReqData)
		copy(dAtA[i:], m.ReqData)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ReqData)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChatType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetChatMembersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChatMembersCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetChatMembersCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ChatId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChatType != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyGetChatMembersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChatMembersCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyGetChatMembersCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.ChatMembersCount != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatMembersCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChatInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChatInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dlog != nil {
		{
			size, err := m.Dlog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RobotGet {
		i--
		if m.RobotGet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChatId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUsersChatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersChatsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsersChatsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dlog != nil {
		{
			size, err := m.Dlog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ProtocolLayer != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ProtocolLayer))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Channelid) > 0 {
		dAtA83 := make([]byte, len(m.Channelid)*10)
		var j82 int
		for _, num1 := range m.Channelid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA83[j82] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j82++
			}
			dAtA83[j82] = uint8(num)
			j82++
		}
		i -= j82
		copy(dAtA[i:], dAtA83[:j82])
		i = encodeVarintImapigateway(dAtA, i, uint64(j82))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Chatid) > 0 {
		dAtA85 := make([]byte, len(m.Chatid)*10)
		var j84 int
		for _, num1 := range m.Chatid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA85[j84] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j84++
			}
			dAtA85[j84] = uint8(num)
			j84++
		}
		i -= j84
		copy(dAtA[i:], dAtA85[:j84])
		i = encodeVarintImapigateway(dAtA, i, uint64(j84))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Users) > 0 {
		dAtA87 := make([]byte, len(m.Users)*10)
		var j86 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA87[j86] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j86++
			}
			dAtA87[j86] = uint8(num)
			j86++
		}
		i -= j86
		copy(dAtA[i:], dAtA87[:j86])
		i = encodeVarintImapigateway(dAtA, i, uint64(j86))
		i--
		dAtA[i] = 0x12
	}
	if m.Userid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUsersChatsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersChatsResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsersChatsResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resultcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Resultcode))
		i--
		dAtA[i] = 0x30
	}
	if len(m.NoChans) > 0 {
		dAtA89 := make([]byte, len(m.NoChans)*10)
		var j88 int
		for _, num1 := range m.NoChans {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA89[j88] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j88++
			}
			dAtA89[j88] = uint8(num)
			j88++
		}
		i -= j88
		copy(dAtA[i:], dAtA89[:j88])
		i = encodeVarintImapigateway(dAtA, i, uint64(j88))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NoChats) > 0 {
		dAtA91 := make([]byte, len(m.NoChats)*10)
		var j90 int
		for _, num1 := range m.NoChats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA91[j90] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j90++
			}
			dAtA91[j90] = uint8(num)
			j90++
		}
		i -= j90
		copy(dAtA[i:], dAtA91[:j90])
		i = encodeVarintImapigateway(dAtA, i, uint64(j90))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Chats) > 0 {
		for iNdEx := len(m.Chats) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chats[iNdEx])
			copy(dAtA[i:], m.Chats[iNdEx])
			i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Chats[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Users != nil {
		{
			size, err := m.Users.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Channels) > 0 {
		for iNdEx := len(m.Channels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Channels[iNdEx])
			copy(dAtA[i:], m.Channels[iNdEx])
			i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Channels[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetUserInfoByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserInfoByIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserInfoByIdArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdArrReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserInfoByIdArrReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserIds) > 0 {
		dAtA96 := make([]byte, len(m.UserIds)*10)
		var j95 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA96[j95] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j95++
			}
			dAtA96[j95] = uint8(num)
			j95++
		}
		i -= j95
		copy(dAtA[i:], dAtA96[:j95])
		i = encodeVarintImapigateway(dAtA, i, uint64(j95))
		i--
		dAtA[i] = 0x12
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserProfileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Flags != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserProfileResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserProfileResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if m.Uinfo != nil {
		{
			size, err := m.Uinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserByphone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByphone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserByphone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBotInfoSuppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInfoSuppReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBotInfoSuppReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Geo {
		i--
		if m.Geo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Placeholder) > 0 {
		i -= len(m.Placeholder)
		copy(dAtA[i:], m.Placeholder)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Placeholder)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBotInfoSuppResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInfoSuppResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBotInfoSuppResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBotPicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotPicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBotPicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Photo) > 0 {
		i -= len(m.Photo)
		copy(dAtA[i:], m.Photo)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Photo)))
		i--
		dAtA[i] = 0x12
	}
	if m.BotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBotPicResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotPicResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBotPicResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *UpdateuserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateuserNameReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateuserNameReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x20
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateuserNameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateuserNameResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateuserNameResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if m.Uinfo != nil {
		{
			size, err := m.Uinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterUserInfoResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if m.Uinfo != nil {
		{
			size, err := m.Uinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAccountByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccountByIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAccountByIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.DelId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelAccountResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAccountResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelAccountResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignUpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignUpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocalPhone) > 0 {
		i -= len(m.LocalPhone)
		copy(dAtA[i:], m.LocalPhone)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.LocalPhone)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x72
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.DcId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.DcId))
		i--
		dAtA[i] = 0x60
	}
	if m.BotNoChats {
		i--
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.BotChatHistory {
		i--
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.BotInfoVersion != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.BotInfoVersion))
		i--
		dAtA[i] = 0x48
	}
	if m.IsBot {
		i--
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x32
	}
	if m.KeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthSignUpResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSignUpResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthSignUpResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserInfo != nil {
		{
			size, err := m.UserInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetFullUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFullUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetFullUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFullUserResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Extend) > 0 {
		i -= len(m.Extend)
		copy(dAtA[i:], m.Extend)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Extend)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CommonChat != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.CommonChat))
		i--
		dAtA[i] = 0x30
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PhoneCallsAvailable {
		i--
		if m.PhoneCallsAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.PhoneCallsPrivate {
		i--
		if m.PhoneCallsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Isblocked {
		i--
		if m.Isblocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Uinfo != nil {
		{
			size, err := m.Uinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserByUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserByUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.SelfId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqGetFullChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetFullChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGetFullChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Chatid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Chatid))
		i--
		dAtA[i] = 0x10
	}
	if m.Fromid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyGetFullChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetFullChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyGetFullChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqLeaveChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FromKeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyid))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChannelId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSendMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSendMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ViaBotId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ViaBotId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Chatmeber) > 0 {
		dAtA115 := make([]byte, len(m.Chatmeber)*10)
		var j114 int
		for _, num1 := range m.Chatmeber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA115[j114] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j114++
			}
			dAtA115[j114] = uint8(num)
			j114++
		}
		i -= j114
		copy(dAtA[i:], dAtA115[:j114])
		i = encodeVarintImapigateway(dAtA, i, uint64(j114))
		i--
		dAtA[i] = 0x72
	}
	if m.FromkeyId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromkeyId))
		i--
		dAtA[i] = 0x68
	}
	if m.Newfileid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Newfileid))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ReplyMarkup) > 0 {
		i -= len(m.ReplyMarkup)
		copy(dAtA[i:], m.ReplyMarkup)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.ReplyMarkup)))
		i--
		dAtA[i] = 0x5a
	}
	if m.RandomId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x50
	}
	if len(m.MultiMedia) > 0 {
		for iNdEx := len(m.MultiMedia) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MultiMedia[iNdEx])
			copy(dAtA[i:], m.MultiMedia[iNdEx])
			i = encodeVarintImapigateway(dAtA, i, uint64(len(m.MultiMedia[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Media) > 0 {
		i -= len(m.Media)
		copy(dAtA[i:], m.Media)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Media)))
		i--
		dAtA[i] = 0x42
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Peer) > 0 {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0x32
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Flags != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x10
	}
	if m.Fromid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqEditChatTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChatTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqEditChatTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FromKeyid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.FromKeyid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Chatid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Chatid))
		i--
		dAtA[i] = 0x10
	}
	if m.Fromid != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Fromid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyEditChatTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChatTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyEditChatTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStickerSetPackDcInfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetPackDcInfosReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStickerSetPackDcInfosReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStickerSetPackDcInfosResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetPackDcInfosResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStickerSetPackDcInfosResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StPDcInfo) > 0 {
		for iNdEx := len(m.StPDcInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StPDcInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StickerPackDocumentBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDocumentBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerPackDocumentBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AttributesFileName) > 0 {
		i -= len(m.AttributesFileName)
		copy(dAtA[i:], m.AttributesFileName)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.AttributesFileName)))
		i--
		dAtA[i] = 0x6a
	}
	if m.AttributesStikerSetAccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AttributesStikerSetAccessHash))
		i--
		dAtA[i] = 0x60
	}
	if len(m.AttributesStikerAlt) > 0 {
		i -= len(m.AttributesStikerAlt)
		copy(dAtA[i:], m.AttributesStikerAlt)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.AttributesStikerAlt)))
		i--
		dAtA[i] = 0x5a
	}
	if m.AttributesImageSizeH != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AttributesImageSizeH))
		i--
		dAtA[i] = 0x50
	}
	if m.AttributesImageSizeW != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AttributesImageSizeW))
		i--
		dAtA[i] = 0x48
	}
	if m.Date != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x40
	}
	if m.DcId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.DcId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Thumb) > 0 {
		i -= len(m.Thumb)
		copy(dAtA[i:], m.Thumb)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.Thumb)))
		i--
		dAtA[i] = 0x32
	}
	if m.Size_ != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintImapigateway(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccessHash != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.DocumentId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.DocumentId))
		i--
		dAtA[i] = 0x10
	}
	if m.AttributesStikerSetId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.AttributesStikerSetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StickerPackDocumentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDocumentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerPackDocumentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InfoBase != nil {
		{
			size, err := m.InfoBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImapigateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserInfoByIdArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdArrResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserInfoByIdArrResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uinfo) > 0 {
		for iNdEx := len(m.Uinfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Uinfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetBotVerifiedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBotVerifiedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBotVerifiedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetBotVerifiedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBotVerifiedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBotVerifiedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ContactsGetCommonContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetCommonContactsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsGetCommonContactsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserIds) > 0 {
		dAtA120 := make([]byte, len(m.UserIds)*10)
		var j119 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA120[j119] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j119++
			}
			dAtA120[j119] = uint8(num)
			j119++
		}
		i -= j119
		copy(dAtA[i:], dAtA120[:j119])
		i = encodeVarintImapigateway(dAtA, i, uint64(j119))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactsGetCommonContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetCommonContactsResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsGetCommonContactsResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Errorcode != 0 {
		i = encodeVarintImapigateway(dAtA, i, uint64(m.Errorcode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserInfos) > 0 {
		for iNdEx := len(m.UserInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImapigateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintImapigateway(dAtA []byte, offset int, v uint64) int {
	offset -= sovImapigateway(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReqMemberLevelCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImUserId != 0 {
		n += 1 + sovImapigateway(uint64(m.ImUserId))
	}
	if m.ImKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.ImKeyId))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyMemberLevelCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImapigateway(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.VipLevelCode != 0 {
		n += 1 + sovImapigateway(uint64(m.VipLevelCode))
	}
	l = len(m.VipLevelName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckIsSelfContactReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckIsSelfContactResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSelfContact {
		n += 2
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchUserByNicknameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Offset != 0 {
		n += 1 + sovImapigateway(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovImapigateway(uint64(m.Limit))
	}
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchUserByNicknameResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserInfos) > 0 {
		for _, e := range m.UserInfos {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MomentNotifyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceCode != 0 {
		n += 1 + sovImapigateway(uint64(m.SourceCode))
	}
	if m.BusinessCode != 0 {
		n += 1 + sovImapigateway(uint64(m.BusinessCode))
	}
	if m.ToId != 0 {
		n += 1 + sovImapigateway(uint64(m.ToId))
	}
	if m.WithId != 0 {
		n += 1 + sovImapigateway(uint64(m.WithId))
	}
	if m.ForumId != 0 {
		n += 1 + sovImapigateway(uint64(m.ForumId))
	}
	if m.ForumType != 0 {
		n += 1 + sovImapigateway(uint64(m.ForumType))
	}
	l = len(m.ForumImage)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.ForumText)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovImapigateway(uint64(m.MsgId))
	}
	l = len(m.MsgContent)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.IsFollowed != 0 {
		n += 1 + sovImapigateway(uint64(m.IsFollowed))
	}
	if m.MsgTime != 0 {
		n += 1 + sovImapigateway(uint64(m.MsgTime))
	}
	if len(m.Entites) > 0 {
		for _, e := range m.Entites {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovImapigateway(uint64(m.Type))
	}
	if m.Offset != 0 {
		n += 1 + sovImapigateway(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovImapigateway(uint64(m.Length))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MomentNotifyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MomentNotifyData) > 0 {
		for _, e := range m.MomentNotifyData {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MomentNotifyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckIsMuteContactReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckIsMuteContactResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MomentState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Type != 0 {
		n += 1 + sovImapigateway(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpdateMoments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MomentStates) > 0 {
		for _, e := range m.MomentStates {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResUpdateMoments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImapigateway(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.ContactId != 0 {
		n += 1 + sovImapigateway(uint64(m.ContactId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.IsSelfContacted {
		n += 2
	}
	if m.SelfIsContacted {
		n += 2
	}
	if m.StarMark {
		n += 2
	}
	if m.HasPhone {
		n += 2
	}
	if m.GroupId != 0 {
		n += 1 + sovImapigateway(uint64(m.GroupId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContatsGetContactsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.KeyId))
	}
	l = len(m.Contacthash)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContatsGetContactsResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, e := range m.ContactArr {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, e := range m.UserInfoArr {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqIntegralUniversalBusiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ImUserId != 0 {
		n += 1 + sovImapigateway(uint64(m.ImUserId))
	}
	if m.ImKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.ImKeyId))
	}
	if m.BusinessId != 0 {
		n += 1 + sovImapigateway(uint64(m.BusinessId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyIntegralUniversalBusiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OtherTransReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.KeyId))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ReqMessagId != 0 {
		n += 1 + sovImapigateway(uint64(m.ReqMessagId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OtherTransResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetUserDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.Flags != 0 {
		n += 1 + sovImapigateway(uint64(m.Flags))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovImapigateway(uint64(m.Sex))
	}
	if m.Birthday != 0 {
		n += 1 + sovImapigateway(uint64(m.Birthday))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetUserDetailResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserByUsernameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendGameRedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.RdpRsp)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QryGameRdpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RcvGameRedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.RdpRsp)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovImapigateway(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendRDPReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImapigateway(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.RedMessageId != 0 {
		n += 1 + sovImapigateway(uint64(m.RedMessageId))
	}
	if m.RedChanelId != 0 {
		n += 1 + sovImapigateway(uint64(m.RedChanelId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendRDPResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckRDPReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImapigateway(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckRDPResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReceiveRDPReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImapigateway(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReceiveRDPResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyEditChannelAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeed {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyEditChannelTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BotUpdateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImapigateway(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChat {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BotUpdateInfoResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyUpdatePinnedChannelMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyLeaveChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetAllChats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyGetAllChats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chats) > 0 {
		l = 0
		for _, e := range m.Chats {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetchannelDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyId))
	}
	if m.Flags != 0 {
		n += 1 + sovImapigateway(uint64(m.Flags))
	}
	if m.Force {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovImapigateway(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovImapigateway(uint64(m.Limit))
	}
	if m.Range_MinId != 0 {
		n += 1 + sovImapigateway(uint64(m.Range_MinId))
	}
	if m.Range_MaxId != 0 {
		n += 1 + sovImapigateway(uint64(m.Range_MaxId))
	}
	if m.Device != 0 {
		n += 1 + sovImapigateway(uint64(m.Device))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyChannelDiffCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Difference)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFullchannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyFullChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqDeleteMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		n += 1 + sovImapigateway(uint64(m.Flags))
	}
	if m.Revoke {
		n += 2
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Channelid != 0 {
		n += 1 + sovImapigateway(uint64(m.Channelid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyDeleteMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterUserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImapigateway(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Dc != 0 {
		n += 1 + sovImapigateway(uint64(m.Dc))
	}
	if m.GroupNow != 0 {
		n += 1 + sovImapigateway(uint64(m.GroupNow))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovImapigateway(uint64(m.Sex))
	}
	if m.Birthday != 0 {
		n += 2 + sovImapigateway(uint64(m.Birthday))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetFullChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetParticipants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OffSet != 0 {
		n += 1 + sovImapigateway(uint64(m.OffSet))
	}
	if m.Limit != 0 {
		n += 1 + sovImapigateway(uint64(m.Limit))
	}
	if m.PartiType != 0 {
		n += 1 + sovImapigateway(uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovImapigateway(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpdatePinnedChannelMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.Flags != 0 {
		n += 1 + sovImapigateway(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqEditChannelAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqEditChannelTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyChannelData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqDelManualBlockList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnBlockUser != nil {
		l = m.UnBlockUser.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.BotId != 0 {
		n += 1 + sovImapigateway(uint64(m.BotId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSetManualBlockList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockUser != nil {
		l = m.BlockUser.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.BotId != 0 {
		n += 1 + sovImapigateway(uint64(m.BotId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.BlockTime != 0 {
		n += 1 + sovImapigateway(uint64(m.BlockTime))
	}
	if m.GroupId != 0 {
		n += 1 + sovImapigateway(uint64(m.GroupId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManualBlockReplyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReplyData)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Reply {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreShopStickerSetDocumentsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreShopStickerSetDocumentsResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthorStickerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImapigateway(uint64(m.StickersetId))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Ordered != 0 {
		n += 1 + sovImapigateway(uint64(m.Ordered))
	}
	if m.Created != 0 {
		n += 1 + sovImapigateway(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 1 + sovImapigateway(uint64(m.Updated))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuthorAllStickerSetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuthorAllStickerSetResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteStickerPackDocumentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImapigateway(uint64(m.StickersetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteStickerPackDocumentResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStickerSetInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.IsId {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StickerSetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovImapigateway(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovImapigateway(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStickerSetInfoResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StickerSetInfo != nil {
		l = m.StickerSetInfo.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteStickerSetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StickerId != 0 {
		n += 1 + sovImapigateway(uint64(m.StickerId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteStickerSetResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreUserStickerSetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImapigateway(uint64(m.StickersetId))
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Order != 0 {
		n += 1 + sovImapigateway(uint64(m.Order))
	}
	if m.Archived {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreUserStickerSetResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreStickerPackDcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stickpackbase != nil {
		l = m.Stickpackbase.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreStickerPackDcResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreShopStickerSetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovImapigateway(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovImapigateway(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreShopStickerSetResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovImapigateway(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovImapigateway(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResizeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImapigateway(uint64(m.Status))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConstraintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.MaxSize != 0 {
		n += 1 + sovImapigateway(uint64(m.MaxSize))
	}
	if m.OutputWebp {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConstraintReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImapigateway(uint64(m.Status))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovImapigateway(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovImapigateway(uint64(m.Height))
	}
	if m.OriginWidth != 0 {
		n += 1 + sovImapigateway(uint64(m.OriginWidth))
	}
	if m.OriginHeight != 0 {
		n += 1 + sovImapigateway(uint64(m.OriginHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompressImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Quality != 0 {
		n += 1 + sovImapigateway(uint64(m.Quality))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompressImageReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImapigateway(uint64(m.Status))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoPreviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.MaxSize != 0 {
		n += 1 + sovImapigateway(uint64(m.MaxSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoPreviewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImapigateway(uint64(m.Status))
	}
	if m.Duration != 0 {
		n += 1 + sovImapigateway(uint64(m.Duration))
	}
	l = len(m.Preview)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovImapigateway(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovImapigateway(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AudioPreviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.MaxSize != 0 {
		n += 1 + sovImapigateway(uint64(m.MaxSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AudioPreviewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImapigateway(uint64(m.Status))
	}
	if m.Duration != 0 {
		n += 1 + sovImapigateway(uint64(m.Duration))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.Artist)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovImapigateway(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovImapigateway(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqParticipants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OffSet != 0 {
		n += 1 + sovImapigateway(uint64(m.OffSet))
	}
	if m.Limit != 0 {
		n += 1 + sovImapigateway(uint64(m.Limit))
	}
	if m.PartiType != 0 {
		n += 1 + sovImapigateway(uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovImapigateway(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyParticipants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chatid != 0 {
		n += 1 + sovImapigateway(uint64(m.Chatid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Creator != 0 {
		n += 1 + sovImapigateway(uint64(m.Creator))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyCreateChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqMigrateChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovImapigateway(uint64(m.Chatid))
	}
	if m.Fromkeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromkeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyMigrateChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqJoinChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.ByLink {
		n += 2
	}
	if m.Invitor != 0 {
		n += 1 + sovImapigateway(uint64(m.Invitor))
	}
	if m.InviteType != 0 {
		n += 1 + sovImapigateway(uint64(m.InviteType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyJoinChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqChangeGroupAndChannelCrator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovImapigateway(uint64(m.GroupId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovImapigateway(uint64(m.OperatorId))
	}
	if m.IsChat {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyChangeGroupAndChannelCrator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBotCallMessageMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromBotId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromBotId))
	}
	l = len(m.MsgTxt)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Layer != 0 {
		n += 1 + sovImapigateway(uint64(m.Layer))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImapigateway(uint64(m.Userid))
	}
	if m.Flags != 0 {
		n += 1 + sovImapigateway(uint64(m.Flags))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovImapigateway(uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovImapigateway(uint64(m.OffsetId))
	}
	l = len(m.OffsetPeer)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovImapigateway(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImapigateway(uint64(m.Userid))
	}
	if m.Score != 0 {
		n += 1 + sovImapigateway(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSetGameScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImapigateway(uint64(m.Userid))
	}
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.Force {
		n += 2
	}
	if m.DisableEditMessage {
		n += 2
	}
	if m.ChatId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatType))
	}
	if m.MessageId != 0 {
		n += 1 + sovImapigateway(uint64(m.MessageId))
	}
	l = len(m.InlineMessageId)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Botid != 0 {
		n += 1 + sovImapigateway(uint64(m.Botid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplySetGameScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeed {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyBanChannelUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBanChannelUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.BannedUserId != 0 {
		n += 1 + sovImapigateway(uint64(m.BannedUserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.UtilDate != 0 {
		n += 1 + sovImapigateway(uint64(m.UtilDate))
	}
	if m.ChannelBannedRights != nil {
		l = m.ChannelBannedRights.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelBannedRights) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovImapigateway(uint64(m.Flags))
	}
	if m.ViewMessages {
		n += 2
	}
	if m.SendMessages {
		n += 2
	}
	if m.SendMedia {
		n += 2
	}
	if m.SendStickers {
		n += 2
	}
	if m.SendGifs {
		n += 2
	}
	if m.SendGames {
		n += 2
	}
	if m.SendInline {
		n += 2
	}
	if m.EmbedLinks {
		n += 2
	}
	if m.UntilDate != 0 {
		n += 1 + sovImapigateway(uint64(m.UntilDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetChannels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyGetChannels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqDeleteChatUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovImapigateway(uint64(m.Chatid))
	}
	if m.Userid != 0 {
		n += 1 + sovImapigateway(uint64(m.Userid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyDeleteChatUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelInactiveUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovImapigateway(uint64(m.Time))
	}
	l = len(m.TimeStr)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChannelInactiveUsersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		n += 1 + sovImapigateway(uint64(m.Limit))
	}
	if m.Userid != 0 {
		n += 1 + sovImapigateway(uint64(m.Userid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChannelInactiveUsersResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovImapigateway(uint64(m.Count))
	}
	if m.Errcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBotInlineCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.BotId != 0 {
		n += 1 + sovImapigateway(uint64(m.BotId))
	}
	if m.MessageId != 0 {
		n += 1 + sovImapigateway(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovImapigateway(uint64(m.SessionId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyBotInlineCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Inlinecall != nil {
		l = m.Inlinecall.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InlineCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovImapigateway(uint64(m.MsgId))
	}
	if m.FromId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromId))
	}
	if m.ChatId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatType))
	}
	if m.BotId != 0 {
		n += 1 + sovImapigateway(uint64(m.BotId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSendUserMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromid))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyId))
	}
	if m.Toid != 0 {
		n += 1 + sovImapigateway(uint64(m.Toid))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyBool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBotCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrombotId != 0 {
		n += 1 + sovImapigateway(uint64(m.FrombotId))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Layer != 0 {
		n += 1 + sovImapigateway(uint64(m.Layer))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyBotCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetMessageByUserIdUuid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.Uuid != 0 {
		n += 1 + sovImapigateway(uint64(m.Uuid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyGetMessageByUserIdUuid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovImapigateway(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetMessageByUserIdMsgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovImapigateway(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyGetMessageByUserIdMsgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgFileDescReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgFileDescResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovImapigateway(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgServiceLimitReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reserved != 0 {
		n += 1 + sovImapigateway(uint64(m.Reserved))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgServiceLimitResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Usfsl != 0 {
		n += 1 + sovImapigateway(uint64(m.Usfsl))
	}
	if m.Ubfssl != 0 {
		n += 1 + sovImapigateway(uint64(m.Ubfssl))
	}
	if m.Dssl != 0 {
		n += 1 + sovImapigateway(uint64(m.Dssl))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgGetFidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keyid != 0 {
		n += 1 + sovImapigateway(uint64(m.Keyid))
	}
	if m.Fileid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fileid))
	}
	if m.FileType != 0 {
		n += 1 + sovImapigateway(uint64(m.FileType))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.PartTotal != 0 {
		n += 1 + sovImapigateway(uint64(m.PartTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgGetFidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.FileSize != 0 {
		n += 1 + sovImapigateway(uint64(m.FileSize))
	}
	if m.Result != 0 {
		n += 1 + sovImapigateway(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgFilePartsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keyid != 0 {
		n += 1 + sovImapigateway(uint64(m.Keyid))
	}
	if m.Fileid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fileid))
	}
	if m.PartId != 0 {
		n += 1 + sovImapigateway(uint64(m.PartId))
	}
	if m.FileType != 0 {
		n += 1 + sovImapigateway(uint64(m.FileType))
	}
	if m.PartTotal != 0 {
		n += 1 + sovImapigateway(uint64(m.PartTotal))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgDownloadFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.Offset != 0 {
		n += 1 + sovImapigateway(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovImapigateway(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownloadFileRespPara1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fid))
	}
	if m.Offset != 0 {
		n += 1 + sovImapigateway(uint64(m.Offset))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownloadFileRespPara2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovImapigateway(uint64(m.Length))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgDownloadFileResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovImapigateway(uint64(m.Result))
	}
	if m.Para1 != nil {
		l = m.Para1.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Para2 != nil {
		l = m.Para2.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgQueryObjInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryObjInfoRespPara) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovImapigateway(uint64(m.Size_))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgQueryObjInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Para != nil {
		l = m.Para.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovImapigateway(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgGetFileDescReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgGetFileDescResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovImapigateway(uint64(m.Result))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChannelInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChannelInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Resultcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetAdminGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImapigateway(uint64(m.UserID))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImapigateway(uint64(m.UserID))
	}
	if m.PeerFilter != 0 {
		n += 1 + sovImapigateway(uint64(m.PeerFilter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerID != 0 {
		n += 1 + sovImapigateway(uint64(m.PeerID))
	}
	l = len(m.PeerName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyGetGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if len(m.SuperGroups) > 0 {
		for _, e := range m.SuperGroups {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqDeleteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatId))
	}
	if len(m.MsgId) > 0 {
		l = 0
		for _, e := range m.MsgId {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSendChatAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatId))
	}
	l = len(m.ActionData)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatType))
	}
	l = len(m.ReqData)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.BotId != 0 {
		n += 1 + sovImapigateway(uint64(m.BotId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetChatMembersCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyGetChatMembersCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatMembersCount != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatMembersCount))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImapigateway(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChatInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.RobotGet {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUsersChatsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImapigateway(uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if len(m.Chatid) > 0 {
		l = 0
		for _, e := range m.Chatid {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if len(m.Channelid) > 0 {
		l = 0
		for _, e := range m.Channelid {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.ProtocolLayer != 0 {
		n += 1 + sovImapigateway(uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUsersChatsResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			l = len(b)
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			l = len(b)
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if len(m.NoChats) > 0 {
		l = 0
		for _, e := range m.NoChats {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if len(m.NoChans) > 0 {
		l = 0
		for _, e := range m.NoChans {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Resultcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoByIdArrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserProfileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.Flags != 0 {
		n += 1 + sovImapigateway(uint64(m.Flags))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserProfileResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserByphone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBotInfoSuppReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	l = len(m.Placeholder)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Geo {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBotInfoSuppResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBotPicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovImapigateway(uint64(m.BotId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBotPicResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateuserNameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.KeyId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateuserNameResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterUserInfoResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAccountByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.DelId != 0 {
		n += 1 + sovImapigateway(uint64(m.DelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelAccountResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignUpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.KeyId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImapigateway(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	if m.DcId != 0 {
		n += 1 + sovImapigateway(uint64(m.DcId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthSignUpResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImapigateway(uint64(m.Code))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetFullUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetFullUserResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Isblocked {
		n += 2
	}
	if m.PhoneCallsPrivate {
		n += 2
	}
	if m.PhoneCallsAvailable {
		n += 2
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.CommonChat != 0 {
		n += 1 + sovImapigateway(uint64(m.CommonChat))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserByUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImapigateway(uint64(m.SelfId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGetFullChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovImapigateway(uint64(m.Chatid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyGetFullChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqLeaveChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImapigateway(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSendMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromid))
	}
	if m.Flags != 0 {
		n += 1 + sovImapigateway(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovImapigateway(uint64(m.ReplyToMsgId))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if len(m.MultiMedia) > 0 {
		for _, b := range m.MultiMedia {
			l = len(b)
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.RandomId != 0 {
		n += 1 + sovImapigateway(uint64(m.RandomId))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Newfileid != 0 {
		n += 1 + sovImapigateway(uint64(m.Newfileid))
	}
	if m.FromkeyId != 0 {
		n += 1 + sovImapigateway(uint64(m.FromkeyId))
	}
	if len(m.Chatmeber) > 0 {
		l = 0
		for _, e := range m.Chatmeber {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 2 + sovImapigateway(uint64(m.ViaBotId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqEditChatTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImapigateway(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovImapigateway(uint64(m.Chatid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImapigateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyEditChatTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImapigateway(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStickerSetPackDcInfosReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStickerSetPackDcInfosResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StPDcInfo) > 0 {
		for _, e := range m.StPDcInfo {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StickerPackDocumentBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttributesStikerSetId != 0 {
		n += 1 + sovImapigateway(uint64(m.AttributesStikerSetId))
	}
	if m.DocumentId != 0 {
		n += 1 + sovImapigateway(uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AccessHash))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovImapigateway(uint64(m.Size_))
	}
	l = len(m.Thumb)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.DcId != 0 {
		n += 1 + sovImapigateway(uint64(m.DcId))
	}
	if m.Date != 0 {
		n += 1 + sovImapigateway(uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		n += 1 + sovImapigateway(uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		n += 1 + sovImapigateway(uint64(m.AttributesImageSizeH))
	}
	l = len(m.AttributesStikerAlt)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.AttributesStikerSetAccessHash != 0 {
		n += 1 + sovImapigateway(uint64(m.AttributesStikerSetAccessHash))
	}
	l = len(m.AttributesFileName)
	if l > 0 {
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StickerPackDocumentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImapigateway(uint64(m.Id))
	}
	if m.InfoBase != nil {
		l = m.InfoBase.Size()
		n += 1 + l + sovImapigateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoByIdArrResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uinfo) > 0 {
		for _, e := range m.Uinfo {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetBotVerifiedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImapigateway(uint64(m.UserId))
	}
	if m.Verified {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetBotVerifiedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactsGetCommonContactsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImapigateway(uint64(e))
		}
		n += 1 + sovImapigateway(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactsGetCommonContactsResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserInfos) > 0 {
		for _, e := range m.UserInfos {
			l = e.Size()
			n += 1 + l + sovImapigateway(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImapigateway(uint64(m.Errorcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImapigateway(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImapigateway(x uint64) (n int) {
	return sovImapigateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqMemberLevelCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMemberLevelCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMemberLevelCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImUserId", wireType)
			}
			m.ImUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImKeyId", wireType)
			}
			m.ImKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMemberLevelCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMemberLevelCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMemberLevelCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevelCode", wireType)
			}
			m.VipLevelCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevelCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipLevelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsSelfContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsSelfContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsSelfContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsSelfContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsSelfContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsSelfContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelfContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelfContact = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserByNicknameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUserByNicknameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUserByNicknameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIds) == 0 {
					m.UserIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserByNicknameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUserByNicknameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUserByNicknameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfos = append(m.UserInfos, &UserInfo{})
			if err := m.UserInfos[len(m.UserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MomentNotifyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MomentNotifyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MomentNotifyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCode", wireType)
			}
			m.SourceCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessCode", wireType)
			}
			m.BusinessCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumId", wireType)
			}
			m.ForumId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumType", wireType)
			}
			m.ForumType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForumImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForumText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			m.IsFollowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollowed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTime", wireType)
			}
			m.MsgTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entites = append(m.Entites, &Entity{})
			if err := m.Entites[len(m.Entites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MomentNotifyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MomentNotifyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MomentNotifyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MomentNotifyData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MomentNotifyData = append(m.MomentNotifyData, &MomentNotifyData{})
			if err := m.MomentNotifyData[len(m.MomentNotifyData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MomentNotifyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MomentNotifyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MomentNotifyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsMuteContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsMuteContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsMuteContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsMuteContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsMuteContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsMuteContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= CheckIsMuteContactResult_ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MomentState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MomentState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MomentState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserId) == 0 {
					m.UserId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateMoments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateMoments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateMoments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MomentStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MomentStates = append(m.MomentStates, &MomentState{})
			if err := m.MomentStates[len(m.MomentStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResUpdateMoments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResUpdateMoments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResUpdateMoments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: contactInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: contactInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelfContacted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelfContacted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfIsContacted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelfIsContacted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StarMark = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPhone = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContatsGetContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContatsGetContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContatsGetContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacthash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacthash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContatsGetContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContatsGetContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContatsGetContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactArr = append(m.ContactArr, &ContactInfo{})
			if err := m.ContactArr[len(m.ContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoArr = append(m.UserInfoArr, &UserInfo{})
			if err := m.UserInfoArr[len(m.UserInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqIntegralUniversalBusiness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqIntegralUniversalBusiness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqIntegralUniversalBusiness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImUserId", wireType)
			}
			m.ImUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImKeyId", wireType)
			}
			m.ImKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			m.BusinessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= MsgFromID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyIntegralUniversalBusiness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyIntegralUniversalBusiness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyIntegralUniversalBusiness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherTransReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherTransReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherTransReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessagId", wireType)
			}
			m.ReqMessagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessagId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherTransResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherTransResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherTransResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserDetailResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserDetailResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserDetailResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendGameRedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendGameRedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendGameRedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdpRsp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RdpRsp = append(m.RdpRsp[:0], dAtA[iNdEx:postIndex]...)
			if m.RdpRsp == nil {
				m.RdpRsp = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QryGameRdpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QryGameRdpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QryGameRdpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RcvGameRedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RcvGameRedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RcvGameRedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdpRsp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RdpRsp = append(m.RdpRsp[:0], dAtA[iNdEx:postIndex]...)
			if m.RdpRsp == nil {
				m.RdpRsp = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedMessageId", wireType)
			}
			m.RedMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedMessageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedChanelId", wireType)
			}
			m.RedChanelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedChanelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChannelAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChannelAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChannelAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChannelTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChannelTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChannelTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotUpdateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChat = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotUpdateInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdateInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdateInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdatePinnedChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdatePinnedChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdatePinnedChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyLeaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyLeaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetAllChats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetAllChats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetAllChats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetAllChats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetAllChats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetAllChats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chats = append(m.Chats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Chats) == 0 {
					m.Chats = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chats = append(m.Chats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetchannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetchannelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetchannelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range_MinId", wireType)
			}
			m.Range_MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range_MinId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range_MaxId", wireType)
			}
			m.Range_MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range_MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelDiffCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelDiffCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelDiffCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Difference = append(m.Difference[:0], dAtA[iNdEx:postIndex]...)
			if m.Difference == nil {
				m.Difference = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFullchannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFullchannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFullchannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyFullChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyFullChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyFullChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dc", wireType)
			}
			m.Dc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dc |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNow", wireType)
			}
			m.GroupNow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupNow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetFullChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetFullChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetFullChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffSet", wireType)
			}
			m.OffSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffSet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiType", wireType)
			}
			m.PartiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartiType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdatePinnedChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDelManualBlockList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDelManualBlockList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDelManualBlockList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnBlockUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnBlockUser == nil {
				m.UnBlockUser = &BlockUser{}
			}
			if err := m.UnBlockUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetManualBlockList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetManualBlockList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetManualBlockList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockUser == nil {
				m.BlockUser = &BlockUser{}
			}
			if err := m.BlockUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManualBlockReplyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManualBlockReplyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManualBlockReplyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyData = append(m.ReplyData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyData == nil {
				m.ReplyData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reply = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetDocumentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Documents) == 0 {
					m.Documents = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetDocumentsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordered", wireType)
			}
			m.Ordered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordered |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &AuthorStickerSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocumentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocumentResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsId = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerSetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Documents) == 0 {
					m.Documents = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerSetInfo == nil {
				m.StickerSetInfo = &StickerSetInfo{}
			}
			if err := m.StickerSetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			m.StickerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickpackbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickpackbase == nil {
				m.Stickpackbase = &StickerPackDocumentBase{}
			}
			if err := m.Stickpackbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Documents) == 0 {
					m.Documents = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstraintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputWebp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputWebp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstraintReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginWidth", wireType)
			}
			m.OriginWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginWidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginHeight", wireType)
			}
			m.OriginHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompressImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompressImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompressImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompressImageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompressImageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompressImageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoPreviewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoPreviewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoPreviewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preview = append(m.Preview[:0], dAtA[iNdEx:postIndex]...)
			if m.Preview == nil {
				m.Preview = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioPreviewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioPreviewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioPreviewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = append(m.Cover[:0], dAtA[iNdEx:postIndex]...)
			if m.Cover == nil {
				m.Cover = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffSet", wireType)
			}
			m.OffSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffSet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiType", wireType)
			}
			m.PartiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartiType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Users) == 0 {
					m.Users = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyCreateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyCreateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyCreateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMigrateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMigrateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMigrateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromkeyid", wireType)
			}
			m.Fromkeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromkeyid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMigrateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMigrateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMigrateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByLink = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitor", wireType)
			}
			m.Invitor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invitor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteType", wireType)
			}
			m.InviteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyJoinChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyJoinChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyJoinChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeGroupAndChannelCrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeGroupAndChannelCrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeGroupAndChannelCrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChangeGroupAndChannelCrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChangeGroupAndChannelCrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChangeGroupAndChannelCrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBotCallMessageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBotCallMessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBotCallMessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromBotId", wireType)
			}
			m.FromBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromBotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTxt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTxt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffsetPeer = append(m.OffsetPeer[:0], dAtA[iNdEx:postIndex]...)
			if m.OffsetPeer == nil {
				m.OffsetPeer = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &UserScore{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableEditMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableEditMessage = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineMessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlineMessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Botid", wireType)
			}
			m.Botid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Botid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySetGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySetGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySetGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBanChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBanChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBanChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBanChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBanChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBanChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedUserId", wireType)
			}
			m.BannedUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelBannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelBannedRights == nil {
				m.ChannelBannedRights = &ChannelBannedRights{}
			}
			if err := m.ChannelBannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelBannedRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelBannedRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelBannedRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewMessages = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMessages = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMedia = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendStickers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendStickers = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGifs = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGames = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendInline = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmbedLinks = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChannelIds) == 0 {
					m.ChannelIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInactiveUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInactiveUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInactiveUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInactiveUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInactiveUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInactiveUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInactiveUsersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInactiveUsersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInactiveUsersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ChannelInactiveUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			m.Errcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errcode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBotInlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBotInlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBotInlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBotInlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBotInlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBotInlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inlinecall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inlinecall == nil {
				m.Inlinecall = &InlineCall{}
			}
			if err := m.Inlinecall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toid", wireType)
			}
			m.Toid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Toid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBotCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBotCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBotCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrombotId", wireType)
			}
			m.FrombotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrombotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBotCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBotCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBotCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMessageByUserIdUuid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdUuid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdUuid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMessageByUserIdUuid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdUuid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdUuid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessageByChannelIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessageByChannelIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessageByChannelIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMessageByChannelIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMessageByChannelIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMessageByUserIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMessageByUserIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFileDescReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFileDescReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFileDescReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFileDescResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFileDescResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFileDescResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= ERpcResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceLimitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceLimitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceLimitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			m.Reserved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reserved |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceLimitResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceLimitResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceLimitResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usfsl", wireType)
			}
			m.Usfsl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usfsl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ubfssl", wireType)
			}
			m.Ubfssl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ubfssl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dssl", wireType)
			}
			m.Dssl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dssl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetFidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetFidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetFidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fileid", wireType)
			}
			m.Fileid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fileid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartTotal", wireType)
			}
			m.PartTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartTotal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetFidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetFidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetFidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= ERpcResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFilePartsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFilePartsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFilePartsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fileid", wireType)
			}
			m.Fileid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fileid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartId", wireType)
			}
			m.PartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartTotal", wireType)
			}
			m.PartTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartTotal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDownloadFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDownloadFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDownloadFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadFileRespPara1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadFileRespPara1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadFileRespPara1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadFileRespPara2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadFileRespPara2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadFileRespPara2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDownloadFileResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDownloadFileResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDownloadFileResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= ERpcResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para1 == nil {
				m.Para1 = &DownloadFileRespPara1{}
			}
			if err := m.Para1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para2 == nil {
				m.Para2 = &DownloadFileRespPara2{}
			}
			if err := m.Para2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQueryObjInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQueryObjInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQueryObjInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObjInfoRespPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObjInfoRespPara: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObjInfoRespPara: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQueryObjInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQueryObjInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQueryObjInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para == nil {
				m.Para = &QueryObjInfoRespPara{}
			}
			if err := m.Para.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= ERpcResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetFileDescReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetFileDescReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetFileDescReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetFileDescResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetFileDescResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetFileDescResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= ERpcResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &ChannelInfoBase{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= ChatResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetAdminGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetAdminGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetAdminGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerFilter", wireType)
			}
			m.PeerFilter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerFilter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Peer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperGroups = append(m.SuperGroups, &Peer{})
			if err := m.SuperGroups[len(m.SuperGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &Peer{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgId = append(m.MsgId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MsgId) == 0 {
					m.MsgId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgId = append(m.MsgId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendChatAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendChatAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendChatAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionData = append(m.ActionData[:0], dAtA[iNdEx:postIndex]...)
			if m.ActionData == nil {
				m.ActionData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqData = append(m.ReqData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqData == nil {
				m.ReqData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChatMembersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChatMembersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChatMembersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChatMembersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChatMembersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChatMembersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMembersCount", wireType)
			}
			m.ChatMembersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatMembersCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotGet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RobotGet = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersChatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersChatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersChatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Users) == 0 {
					m.Users = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatid = append(m.Chatid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Chatid) == 0 {
					m.Chatid = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatid = append(m.Chatid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channelid = append(m.Channelid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Channelid) == 0 {
					m.Channelid = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channelid = append(m.Channelid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLayer", wireType)
			}
			m.ProtocolLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolLayer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersChatsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersChatsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersChatsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, make([]byte, postIndex-iNdEx))
			copy(m.Channels[len(m.Channels)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chats = append(m.Chats, make([]byte, postIndex-iNdEx))
			copy(m.Chats[len(m.Chats)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChats = append(m.NoChats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NoChats) == 0 {
					m.NoChats = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChats = append(m.NoChats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChats", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChans = append(m.NoChans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NoChans) == 0 {
					m.NoChans = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChans = append(m.NoChans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChans", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= ChatResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIds) == 0 {
					m.UserIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByphone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByphone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByphone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInfoSuppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInfoSuppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInfoSuppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placeholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Geo = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInfoSuppResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInfoSuppResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInfoSuppResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotPicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotPicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotPicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotPicResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotPicResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotPicResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateuserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateuserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateuserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateuserNameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateuserNameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateuserNameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccountByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccountByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccountByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelId", wireType)
			}
			m.DelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAccountResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAccountResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAccountResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSignUpResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSignUpResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSignUpResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= AuthSignUpResult_ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isblocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isblocked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsPrivate = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsAvailable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChat", wireType)
			}
			m.CommonChat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonChat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetFullChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetFullChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetFullChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetFullChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetFullChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetFullChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLeaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLeaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiMedia", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiMedia = append(m.MultiMedia, make([]byte, postIndex-iNdEx))
			copy(m.MultiMedia[len(m.MultiMedia)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Newfileid", wireType)
			}
			m.Newfileid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Newfileid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromkeyId", wireType)
			}
			m.FromkeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromkeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatmeber = append(m.Chatmeber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Chatmeber) == 0 {
					m.Chatmeber = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatmeber = append(m.Chatmeber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatmeber", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChatTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChatTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChatTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChatTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChatTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChatTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetPackDcInfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetPackDcInfosResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StPDcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StPDcInfo = append(m.StPDcInfo, &StickerPackDocumentInfo{})
			if err := m.StPDcInfo[len(m.StPDcInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDocumentBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDocumentBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDocumentBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerSetId", wireType)
			}
			m.AttributesStikerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStikerSetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			m.DocumentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeW", wireType)
			}
			m.AttributesImageSizeW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeW |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeH", wireType)
			}
			m.AttributesImageSizeH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeH |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerAlt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesStikerAlt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerSetAccessHash", wireType)
			}
			m.AttributesStikerSetAccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStikerSetAccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDocumentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDocumentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDocumentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfoBase == nil {
				m.InfoBase = &StickerPackDocumentBase{}
			}
			if err := m.InfoBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uinfo = append(m.Uinfo, &UserInfo{})
			if err := m.Uinfo[len(m.Uinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBotVerifiedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBotVerifiedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBotVerifiedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBotVerifiedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBotVerifiedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBotVerifiedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetCommonContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetCommonContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetCommonContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImapigateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImapigateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImapigateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIds) == 0 {
					m.UserIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImapigateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetCommonContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetCommonContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetCommonContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImapigateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImapigateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfos = append(m.UserInfos, &UserInfo{})
			if err := m.UserInfos[len(m.UserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= ReErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImapigateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImapigateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImapigateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImapigateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImapigateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImapigateway
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImapigateway
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImapigateway
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImapigateway        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImapigateway          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImapigateway = fmt.Errorf("proto: unexpected end of group")
)
