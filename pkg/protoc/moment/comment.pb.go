// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comment.proto

package moment

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	"gitlab.moments.im/pkg/protoc/imapigateway"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetCommentCountResp struct {
	Count                int64    `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCommentCountResp) Reset()         { *m = GetCommentCountResp{} }
func (m *GetCommentCountResp) String() string { return proto.CompactTextString(m) }
func (*GetCommentCountResp) ProtoMessage()    {}
func (*GetCommentCountResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{0}
}
func (m *GetCommentCountResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommentCountResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommentCountResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommentCountResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentCountResp.Merge(m, src)
}
func (m *GetCommentCountResp) XXX_Size() int {
	return m.Size()
}
func (m *GetCommentCountResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentCountResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentCountResp proto.InternalMessageInfo

func (m *GetCommentCountResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReplayPageResp struct {
	Comments             []*Comment `protobuf:"bytes,1,rep,name=Comments,proto3" json:"Comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReplayPageResp) Reset()         { *m = ReplayPageResp{} }
func (m *ReplayPageResp) String() string { return proto.CompactTextString(m) }
func (*ReplayPageResp) ProtoMessage()    {}
func (*ReplayPageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{1}
}
func (m *ReplayPageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplayPageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplayPageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplayPageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplayPageResp.Merge(m, src)
}
func (m *ReplayPageResp) XXX_Size() int {
	return m.Size()
}
func (m *ReplayPageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplayPageResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReplayPageResp proto.InternalMessageInfo

func (m *ReplayPageResp) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type ReplayPageReq struct {
	//操作人
	CreateBy int32 `protobuf:"varint,1,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	//帖子号
	ForumID int64 `protobuf:"varint,2,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	// 发帖人
	SupUID int32 `protobuf:"varint,3,opt,name=SupUID,proto3" json:"SupUID,omitempty"`
	// 评论ID
	CommentID int64 `protobuf:"varint,4,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
	Limit     int32 `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// 一级回复ID
	SupID                int64    `protobuf:"varint,6,opt,name=SupID,proto3" json:"SupID,omitempty"`
	Sort                 string   `protobuf:"bytes,7,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Order                string   `protobuf:"bytes,8,opt,name=Order,proto3" json:"Order,omitempty"`
	Friends              []int32  `protobuf:"varint,9,rep,packed,name=Friends,proto3" json:"Friends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplayPageReq) Reset()         { *m = ReplayPageReq{} }
func (m *ReplayPageReq) String() string { return proto.CompactTextString(m) }
func (*ReplayPageReq) ProtoMessage()    {}
func (*ReplayPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{2}
}
func (m *ReplayPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplayPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplayPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplayPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplayPageReq.Merge(m, src)
}
func (m *ReplayPageReq) XXX_Size() int {
	return m.Size()
}
func (m *ReplayPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplayPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReplayPageReq proto.InternalMessageInfo

func (m *ReplayPageReq) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *ReplayPageReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ReplayPageReq) GetSupUID() int32 {
	if m != nil {
		return m.SupUID
	}
	return 0
}

func (m *ReplayPageReq) GetCommentID() int64 {
	if m != nil {
		return m.CommentID
	}
	return 0
}

func (m *ReplayPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReplayPageReq) GetSupID() int64 {
	if m != nil {
		return m.SupID
	}
	return 0
}

func (m *ReplayPageReq) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *ReplayPageReq) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ReplayPageReq) GetFriends() []int32 {
	if m != nil {
		return m.Friends
	}
	return nil
}

type CommentPageReq struct {
	//操作人
	CreateBy int32 `protobuf:"varint,1,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	//帖子号
	ForumID int64 `protobuf:"varint,2,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	// 评论ID
	CommentID int64 `protobuf:"varint,3,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
	Limit     int32 `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// 一级回复ID
	Sort                 string   `protobuf:"bytes,5,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Order                string   `protobuf:"bytes,6,opt,name=Order,proto3" json:"Order,omitempty"`
	ReplayLimit          int32    `protobuf:"varint,7,opt,name=ReplayLimit,proto3" json:"ReplayLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentPageReq) Reset()         { *m = CommentPageReq{} }
func (m *CommentPageReq) String() string { return proto.CompactTextString(m) }
func (*CommentPageReq) ProtoMessage()    {}
func (*CommentPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{3}
}
func (m *CommentPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentPageReq.Merge(m, src)
}
func (m *CommentPageReq) XXX_Size() int {
	return m.Size()
}
func (m *CommentPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_CommentPageReq proto.InternalMessageInfo

func (m *CommentPageReq) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *CommentPageReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *CommentPageReq) GetCommentID() int64 {
	if m != nil {
		return m.CommentID
	}
	return 0
}

func (m *CommentPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CommentPageReq) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *CommentPageReq) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *CommentPageReq) GetReplayLimit() int32 {
	if m != nil {
		return m.ReplayLimit
	}
	return 0
}

type CommentPageRep struct {
	Comments             []*Comment `protobuf:"bytes,1,rep,name=Comments,proto3" json:"Comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CommentPageRep) Reset()         { *m = CommentPageRep{} }
func (m *CommentPageRep) String() string { return proto.CompactTextString(m) }
func (*CommentPageRep) ProtoMessage()    {}
func (*CommentPageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{4}
}
func (m *CommentPageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentPageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentPageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentPageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentPageRep.Merge(m, src)
}
func (m *CommentPageRep) XXX_Size() int {
	return m.Size()
}
func (m *CommentPageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentPageRep.DiscardUnknown(m)
}

var xxx_messageInfo_CommentPageRep proto.InternalMessageInfo

func (m *CommentPageRep) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type Comment struct {
	// ID 主键
	// @inject_tag: db:"id"
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" db:"id"`
	// CommentID 评论id
	// @inject_tag: db:"comment_id"
	CommentID int64 `protobuf:"varint,2,opt,name=CommentID,proto3" json:"CommentID,omitempty" db:"comment_id"`
	// ForumID 主贴id
	// @inject_tag: db:"forum_id"
	ForumID int64 `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty" db:"forum_id"`
	// @inject_tag: db:"forum_user"
	ForumUser int32 `protobuf:"varint,4,opt,name=ForumUser,proto3" json:"ForumUser,omitempty" db:"forum_user"`
	// Content 内容
	// @inject_tag: db:"content"
	Content string `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty" db:"content"`
	// ContentType 正文类别 1文字 2图片 3视频
	// @inject_tag: db:"content_type"
	ContentType int32 `protobuf:"varint,6,opt,name=ContentType,proto3" json:"ContentType,omitempty" db:"content_type"`
	// AtEntity @处理
	// @inject_tag: db:"at_entity"
	AtEntity string `protobuf:"bytes,7,opt,name=AtEntity,proto3" json:"AtEntity,omitempty" db:"at_entity"`
	// ThumbUp 点赞次数
	// @inject_tag: db:"thumb_up"
	ThumbUp int64 `protobuf:"varint,8,opt,name=ThumbUp,proto3" json:"ThumbUp,omitempty" db:"thumb_up"`
	// ReplayID 回复id
	// @inject_tag: db:"replay_id"
	ReplayID int64 `protobuf:"varint,9,opt,name=ReplayID,proto3" json:"ReplayID,omitempty" db:"replay_id"`
	// ReplayUID 回复人
	// @inject_tag: db:"replay_uid"
	ReplayUID int32 `protobuf:"varint,10,opt,name=ReplayUID,proto3" json:"ReplayUID,omitempty" db:"replay_uid"`
	// SupID 一级评论ID
	// @inject_tag: db:"sup_id"
	SupID int64 `protobuf:"varint,11,opt,name=SupID,proto3" json:"SupID,omitempty" db:"sup_id"`
	// SupUser 一级评论人
	// @inject_tag: db:"sup_user"
	SupUser int32 `protobuf:"varint,12,opt,name=SupUser,proto3" json:"SupUser,omitempty" db:"sup_user"`
	// CreateAt 回复时间
	// @inject_tag: db:"create_at"
	CreateAt int64 `protobuf:"varint,13,opt,name=CreateAt,proto3" json:"CreateAt,omitempty" db:"create_at"`
	// CreateBy 回复人
	// @inject_tag: db:"create_by"
	CreateBy int32 `protobuf:"varint,14,opt,name=CreateBy,proto3" json:"CreateBy,omitempty" db:"create_by"`
	//回复次数
	// @inject_tag: db:"sub_comments"
	SubComments int64 `protobuf:"varint,15,opt,name=SubComments,proto3" json:"SubComments,omitempty" db:"sub_comments"`
	HasThumb    bool  `protobuf:"varint,16,opt,name=HasThumb,proto3" json:"HasThumb,omitempty"`
	// 媒体文件
	Medias  []*Media     `protobuf:"bytes,17,rep,name=Medias,proto3" json:"Medias,omitempty"`
	Entitys []*HighLight `protobuf:"bytes,18,rep,name=Entitys,proto3" json:"Entitys,omitempty"`
	//回复人用户信息
	Creator              *imapigateway.UserInfo `protobuf:"bytes,19,opt,name=Creator,proto3" json:"Creator,omitempty"`
	ReplayUser           *imapigateway.UserInfo `protobuf:"bytes,20,opt,name=ReplayUser,proto3" json:"ReplayUser,omitempty"`
	SubComment           []*Comment             `protobuf:"bytes,21,rep,name=SubComment,proto3" json:"SubComment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{5}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return m.Size()
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Comment) GetCommentID() int64 {
	if m != nil {
		return m.CommentID
	}
	return 0
}

func (m *Comment) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *Comment) GetForumUser() int32 {
	if m != nil {
		return m.ForumUser
	}
	return 0
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetContentType() int32 {
	if m != nil {
		return m.ContentType
	}
	return 0
}

func (m *Comment) GetAtEntity() string {
	if m != nil {
		return m.AtEntity
	}
	return ""
}

func (m *Comment) GetThumbUp() int64 {
	if m != nil {
		return m.ThumbUp
	}
	return 0
}

func (m *Comment) GetReplayID() int64 {
	if m != nil {
		return m.ReplayID
	}
	return 0
}

func (m *Comment) GetReplayUID() int32 {
	if m != nil {
		return m.ReplayUID
	}
	return 0
}

func (m *Comment) GetSupID() int64 {
	if m != nil {
		return m.SupID
	}
	return 0
}

func (m *Comment) GetSupUser() int32 {
	if m != nil {
		return m.SupUser
	}
	return 0
}

func (m *Comment) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Comment) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *Comment) GetSubComments() int64 {
	if m != nil {
		return m.SubComments
	}
	return 0
}

func (m *Comment) GetHasThumb() bool {
	if m != nil {
		return m.HasThumb
	}
	return false
}

func (m *Comment) GetMedias() []*Media {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *Comment) GetEntitys() []*HighLight {
	if m != nil {
		return m.Entitys
	}
	return nil
}

func (m *Comment) GetCreator() *imapigateway.UserInfo {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Comment) GetReplayUser() *imapigateway.UserInfo {
	if m != nil {
		return m.ReplayUser
	}
	return nil
}

func (m *Comment) GetSubComment() []*Comment {
	if m != nil {
		return m.SubComment
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCommentCountResp)(nil), "moment.GetCommentCountResp")
	proto.RegisterType((*ReplayPageResp)(nil), "moment.ReplayPageResp")
	proto.RegisterType((*ReplayPageReq)(nil), "moment.ReplayPageReq")
	proto.RegisterType((*CommentPageReq)(nil), "moment.CommentPageReq")
	proto.RegisterType((*CommentPageRep)(nil), "moment.CommentPageRep")
	proto.RegisterType((*Comment)(nil), "moment.Comment")
}

func init() { proto.RegisterFile("comment.proto", fileDescriptor_749aee09ea917828) }

var fileDescriptor_749aee09ea917828 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x6a, 0x13, 0x41,
	0x18, 0xed, 0x66, 0x93, 0xdd, 0xe4, 0x4b, 0x93, 0xb6, 0xd3, 0x36, 0x0c, 0x41, 0xca, 0xb2, 0x20,
	0xa4, 0x54, 0xa2, 0x54, 0x10, 0xa1, 0xf4, 0x22, 0xc9, 0xda, 0x76, 0xa1, 0xa2, 0x6c, 0xda, 0x1b,
	0xef, 0xb6, 0xcd, 0x98, 0x2e, 0x64, 0x7f, 0xdc, 0x9d, 0x55, 0xf2, 0x1e, 0x3e, 0x88, 0x4f, 0x21,
	0x5e, 0xfa, 0x08, 0xd2, 0x5b, 0x5f, 0x42, 0xe6, 0x6f, 0xb3, 0x89, 0x55, 0x6a, 0xbd, 0x9b, 0x73,
	0x72, 0xce, 0xcc, 0x9c, 0xef, 0xfb, 0x76, 0x02, 0xad, 0xeb, 0x38, 0x0c, 0x49, 0x44, 0xfb, 0x49,
	0x1a, 0xd3, 0x18, 0x19, 0x61, 0xcc, 0x50, 0xb7, 0x19, 0x92, 0x49, 0xe0, 0x0b, 0xb2, 0xbb, 0xce,
	0x34, 0x71, 0x24, 0x90, 0x7d, 0x00, 0xdb, 0xa7, 0x84, 0x8e, 0x84, 0x6d, 0x14, 0xe7, 0x11, 0xf5,
	0x48, 0x96, 0xa0, 0x1d, 0xa8, 0x71, 0x80, 0x35, 0x4b, 0xeb, 0xe9, 0x9e, 0x00, 0xf6, 0x31, 0xb4,
	0x3d, 0x92, 0xcc, 0xfc, 0xf9, 0x5b, 0x7f, 0x4a, 0xb8, 0xee, 0x00, 0xea, 0xd2, 0x9b, 0x61, 0xcd,
	0xd2, 0x7b, 0xcd, 0xc3, 0x8d, 0xbe, 0x38, 0xb4, 0x2f, 0x79, 0xaf, 0x10, 0xd8, 0x3f, 0x35, 0x68,
	0x95, 0xfd, 0x1f, 0x50, 0x17, 0xea, 0xa3, 0x94, 0xf8, 0x94, 0x0c, 0xe7, 0xfc, 0xa4, 0x9a, 0x57,
	0x60, 0x84, 0xc1, 0x3c, 0x89, 0xd3, 0x3c, 0x74, 0x1d, 0x5c, 0xe1, 0x97, 0x50, 0x10, 0x75, 0xc0,
	0x18, 0xe7, 0xc9, 0xa5, 0xeb, 0x60, 0x9d, 0x7b, 0x24, 0x42, 0x8f, 0xa0, 0x21, 0xcf, 0x72, 0x1d,
	0x5c, 0xe5, 0x9e, 0x05, 0xc1, 0x22, 0x9d, 0x07, 0x61, 0x40, 0x71, 0x8d, 0x9b, 0x04, 0x60, 0xec,
	0x38, 0x4f, 0x5c, 0x07, 0x1b, 0x22, 0x28, 0x07, 0x08, 0x41, 0x75, 0x1c, 0xa7, 0x14, 0x9b, 0x96,
	0xd6, 0x6b, 0x78, 0x7c, 0xcd, 0x94, 0x6f, 0xd2, 0x09, 0x49, 0x71, 0x9d, 0x93, 0x02, 0xf0, 0x5b,
	0xa6, 0x01, 0x89, 0x26, 0x19, 0x6e, 0x58, 0x7a, 0xaf, 0xe6, 0x29, 0x68, 0x7f, 0xd5, 0xa0, 0x2d,
	0x4f, 0xff, 0xbf, 0xb8, 0x4b, 0xb1, 0xf4, 0x3f, 0xc6, 0xaa, 0x96, 0x63, 0xa9, 0x00, 0xb5, 0xbb,
	0x02, 0x18, 0xe5, 0x00, 0x16, 0x34, 0x45, 0x4f, 0xc4, 0x2e, 0x26, 0xdf, 0xa5, 0x4c, 0xb1, 0xae,
	0x2f, 0xe5, 0xf8, 0xc7, 0xae, 0x7f, 0xa9, 0x81, 0x29, 0x01, 0x6a, 0x43, 0xc5, 0x75, 0x64, 0xf4,
	0xca, 0x6a, 0xb4, 0xca, 0x6a, 0xb4, 0x52, 0x49, 0xf4, 0xdf, 0x4a, 0xc2, 0x97, 0x97, 0x19, 0x49,
	0x65, 0xf0, 0x05, 0xc1, 0x7c, 0xa3, 0x38, 0xa2, 0x24, 0x52, 0xf9, 0x15, 0x64, 0x61, 0xe5, 0xf2,
	0x62, 0x9e, 0x10, 0x5e, 0x88, 0x9a, 0x57, 0xa6, 0x58, 0x8b, 0x06, 0xf4, 0x55, 0x44, 0x03, 0x3a,
	0x97, 0xdd, 0x2f, 0x30, 0xdb, 0xf7, 0xe2, 0x26, 0x0f, 0xaf, 0x2e, 0x13, 0x3e, 0x03, 0xba, 0xa7,
	0x20, 0x73, 0x89, 0x8a, 0xb9, 0x0e, 0x6e, 0xf0, 0x9f, 0x0a, 0xcc, 0xee, 0x2a, 0xd6, 0x6c, 0x60,
	0x41, 0xdc, 0xb5, 0x20, 0x16, 0xf3, 0xd7, 0x2c, 0xcf, 0x1f, 0x06, 0x93, 0xcd, 0x34, 0x4b, 0xb7,
	0xce, 0x1d, 0x0a, 0x2e, 0x46, 0x68, 0x40, 0x71, 0x4b, 0x9c, 0xa4, 0xf0, 0xd2, 0x78, 0xb5, 0x57,
	0xc6, 0xcb, 0x82, 0xe6, 0x38, 0xbf, 0x2a, 0xba, 0xb6, 0xc1, 0xad, 0x65, 0x8a, 0xb9, 0xcf, 0xfc,
	0x8c, 0x27, 0xc2, 0x9b, 0x96, 0xd6, 0xab, 0x7b, 0x05, 0x46, 0x8f, 0xc1, 0x78, 0xcd, 0x9e, 0x90,
	0x0c, 0x6f, 0xf1, 0x76, 0xb7, 0x54, 0xbb, 0x39, 0xeb, 0xc9, 0x1f, 0xd1, 0x01, 0x98, 0xa2, 0x54,
	0x19, 0x46, 0x5c, 0xb7, 0xa5, 0x74, 0x67, 0xc1, 0xf4, 0xe6, 0x3c, 0x98, 0xde, 0x50, 0x4f, 0x29,
	0xd0, 0x33, 0x30, 0xf9, 0xed, 0xe2, 0x14, 0x6f, 0x5b, 0x5a, 0xaf, 0x79, 0xd8, 0xe9, 0x07, 0xa1,
	0x9f, 0x04, 0x53, 0x9f, 0x92, 0x4f, 0xfe, 0xbc, 0x9f, 0x67, 0x24, 0x75, 0xa3, 0xf7, 0xb1, 0xa7,
	0x64, 0xe8, 0x05, 0x80, 0x2c, 0x1c, 0x2b, 0xcc, 0xce, 0x5f, 0x4d, 0x25, 0x25, 0x7a, 0x0a, 0xb0,
	0x08, 0x8a, 0x77, 0xef, 0x1e, 0xd8, 0x92, 0xe4, 0xf0, 0xb3, 0x0e, 0x9b, 0x72, 0xed, 0x0c, 0xc7,
	0x24, 0xfd, 0x18, 0x5c, 0x13, 0xf4, 0x12, 0xaa, 0x6c, 0xfe, 0x51, 0x67, 0xc5, 0x29, 0x3f, 0xee,
	0xee, 0xdd, 0x7c, 0x62, 0xaf, 0xa1, 0x13, 0x40, 0x0c, 0xf0, 0xef, 0x6d, 0x38, 0xe7, 0x15, 0xcd,
	0x93, 0x07, 0xec, 0x73, 0x04, 0xe6, 0x60, 0x36, 0x7b, 0xe0, 0x25, 0x8e, 0x55, 0xf1, 0xb8, 0x7f,
	0x57, 0xe9, 0x96, 0xde, 0xe3, 0x85, 0x7d, 0xf9, 0x99, 0xb7, 0xd7, 0xd0, 0x3e, 0xe8, 0x83, 0xc9,
	0x04, 0xad, 0x96, 0xad, 0xbb, 0x4a, 0xd8, 0x6b, 0xe8, 0x09, 0x18, 0x0e, 0x99, 0x11, 0x4a, 0xee,
	0xa5, 0xde, 0x07, 0xfd, 0x94, 0xd0, 0xfb, 0x48, 0x87, 0x9d, 0x6f, 0xb7, 0x7b, 0xda, 0xf7, 0xdb,
	0x3d, 0xed, 0xc7, 0xed, 0x9e, 0xf6, 0xae, 0xde, 0x3f, 0x12, 0x8a, 0x2b, 0x83, 0xff, 0x95, 0x3d,
	0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xb6, 0xa6, 0x09, 0xfe, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentDBServiceClient is the client API for CommentDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentDBServiceClient interface {
	Page(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageRep, error)
	PageOrderByThumbup(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageRep, error)
	AllPage(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageRep, error)
	ReplayPage(ctx context.Context, in *ReplayPageReq, opts ...grpc.CallOption) (*ReplayPageResp, error)
	Add(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	Delete(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	Get(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
}

type commentDBServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentDBServiceClient(cc *grpc.ClientConn) CommentDBServiceClient {
	return &commentDBServiceClient{cc}
}

func (c *commentDBServiceClient) Page(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageRep, error) {
	out := new(CommentPageRep)
	err := c.cc.Invoke(ctx, "/moment.CommentDBService/Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentDBServiceClient) PageOrderByThumbup(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageRep, error) {
	out := new(CommentPageRep)
	err := c.cc.Invoke(ctx, "/moment.CommentDBService/PageOrderByThumbup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentDBServiceClient) AllPage(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageRep, error) {
	out := new(CommentPageRep)
	err := c.cc.Invoke(ctx, "/moment.CommentDBService/AllPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentDBServiceClient) ReplayPage(ctx context.Context, in *ReplayPageReq, opts ...grpc.CallOption) (*ReplayPageResp, error) {
	out := new(ReplayPageResp)
	err := c.cc.Invoke(ctx, "/moment.CommentDBService/ReplayPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentDBServiceClient) Add(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/moment.CommentDBService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentDBServiceClient) Delete(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/moment.CommentDBService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentDBServiceClient) Get(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/moment.CommentDBService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentDBServiceServer is the server API for CommentDBService service.
type CommentDBServiceServer interface {
	Page(context.Context, *CommentPageReq) (*CommentPageRep, error)
	PageOrderByThumbup(context.Context, *CommentPageReq) (*CommentPageRep, error)
	AllPage(context.Context, *CommentPageReq) (*CommentPageRep, error)
	ReplayPage(context.Context, *ReplayPageReq) (*ReplayPageResp, error)
	Add(context.Context, *Comment) (*Comment, error)
	Delete(context.Context, *Comment) (*Comment, error)
	Get(context.Context, *Comment) (*Comment, error)
}

// UnimplementedCommentDBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommentDBServiceServer struct {
}

func (*UnimplementedCommentDBServiceServer) Page(ctx context.Context, req *CommentPageReq) (*CommentPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (*UnimplementedCommentDBServiceServer) PageOrderByThumbup(ctx context.Context, req *CommentPageReq) (*CommentPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageOrderByThumbup not implemented")
}
func (*UnimplementedCommentDBServiceServer) AllPage(ctx context.Context, req *CommentPageReq) (*CommentPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPage not implemented")
}
func (*UnimplementedCommentDBServiceServer) ReplayPage(ctx context.Context, req *ReplayPageReq) (*ReplayPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplayPage not implemented")
}
func (*UnimplementedCommentDBServiceServer) Add(ctx context.Context, req *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCommentDBServiceServer) Delete(ctx context.Context, req *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCommentDBServiceServer) Get(ctx context.Context, req *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterCommentDBServiceServer(s *grpc.Server, srv CommentDBServiceServer) {
	s.RegisterService(&_CommentDBService_serviceDesc, srv)
}

func _CommentDBService_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDBServiceServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.CommentDBService/Page",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDBServiceServer).Page(ctx, req.(*CommentPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentDBService_PageOrderByThumbup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDBServiceServer).PageOrderByThumbup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.CommentDBService/PageOrderByThumbup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDBServiceServer).PageOrderByThumbup(ctx, req.(*CommentPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentDBService_AllPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDBServiceServer).AllPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.CommentDBService/AllPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDBServiceServer).AllPage(ctx, req.(*CommentPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentDBService_ReplayPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplayPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDBServiceServer).ReplayPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.CommentDBService/ReplayPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDBServiceServer).ReplayPage(ctx, req.(*ReplayPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentDBService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDBServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.CommentDBService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDBServiceServer).Add(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentDBService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDBServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.CommentDBService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDBServiceServer).Delete(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.CommentDBService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDBServiceServer).Get(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentDBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.CommentDBService",
	HandlerType: (*CommentDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Page",
			Handler:    _CommentDBService_Page_Handler,
		},
		{
			MethodName: "PageOrderByThumbup",
			Handler:    _CommentDBService_PageOrderByThumbup_Handler,
		},
		{
			MethodName: "AllPage",
			Handler:    _CommentDBService_AllPage_Handler,
		},
		{
			MethodName: "ReplayPage",
			Handler:    _CommentDBService_ReplayPage_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _CommentDBService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CommentDBService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CommentDBService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}

func (m *GetCommentCountResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentCountResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCommentCountResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplayPageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplayPageResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayPageResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplayPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplayPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Friends) > 0 {
		dAtA2 := make([]byte, len(m.Friends)*10)
		var j1 int
		for _, num1 := range m.Friends {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintComment(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sort) > 0 {
		i -= len(m.Sort)
		copy(dAtA[i:], m.Sort)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Sort)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SupID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.SupID))
		i--
		dAtA[i] = 0x30
	}
	if m.Limit != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.CommentID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CommentID))
		i--
		dAtA[i] = 0x20
	}
	if m.SupUID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.SupUID))
		i--
		dAtA[i] = 0x18
	}
	if m.ForumID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x10
	}
	if m.CreateBy != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommentPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReplayLimit != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ReplayLimit))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sort) > 0 {
		i -= len(m.Sort)
		copy(dAtA[i:], m.Sort)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Sort)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.CommentID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CommentID))
		i--
		dAtA[i] = 0x18
	}
	if m.ForumID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x10
	}
	if m.CreateBy != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommentPageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentPageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentPageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Comment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubComment) > 0 {
		for iNdEx := len(m.SubComment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubComment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.ReplayUser != nil {
		{
			size, err := m.ReplayUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Entitys) > 0 {
		for iNdEx := len(m.Entitys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entitys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Medias) > 0 {
		for iNdEx := len(m.Medias) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Medias[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.HasThumb {
		i--
		if m.HasThumb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SubComments != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.SubComments))
		i--
		dAtA[i] = 0x78
	}
	if m.CreateBy != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x70
	}
	if m.CreateAt != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x68
	}
	if m.SupUser != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.SupUser))
		i--
		dAtA[i] = 0x60
	}
	if m.SupID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.SupID))
		i--
		dAtA[i] = 0x58
	}
	if m.ReplayUID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ReplayUID))
		i--
		dAtA[i] = 0x50
	}
	if m.ReplayID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ReplayID))
		i--
		dAtA[i] = 0x48
	}
	if m.ThumbUp != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ThumbUp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.AtEntity) > 0 {
		i -= len(m.AtEntity)
		copy(dAtA[i:], m.AtEntity)
		i = encodeVarintComment(dAtA, i, uint64(len(m.AtEntity)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ContentType != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ContentType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ForumUser != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ForumUser))
		i--
		dAtA[i] = 0x20
	}
	if m.ForumID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if m.CommentID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CommentID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintComment(dAtA []byte, offset int, v uint64) int {
	offset -= sovComment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetCommentCountResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovComment(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplayPageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplayPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateBy != 0 {
		n += 1 + sovComment(uint64(m.CreateBy))
	}
	if m.ForumID != 0 {
		n += 1 + sovComment(uint64(m.ForumID))
	}
	if m.SupUID != 0 {
		n += 1 + sovComment(uint64(m.SupUID))
	}
	if m.CommentID != 0 {
		n += 1 + sovComment(uint64(m.CommentID))
	}
	if m.Limit != 0 {
		n += 1 + sovComment(uint64(m.Limit))
	}
	if m.SupID != 0 {
		n += 1 + sovComment(uint64(m.SupID))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if len(m.Friends) > 0 {
		l = 0
		for _, e := range m.Friends {
			l += sovComment(uint64(e))
		}
		n += 1 + sovComment(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateBy != 0 {
		n += 1 + sovComment(uint64(m.CreateBy))
	}
	if m.ForumID != 0 {
		n += 1 + sovComment(uint64(m.ForumID))
	}
	if m.CommentID != 0 {
		n += 1 + sovComment(uint64(m.CommentID))
	}
	if m.Limit != 0 {
		n += 1 + sovComment(uint64(m.Limit))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.ReplayLimit != 0 {
		n += 1 + sovComment(uint64(m.ReplayLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentPageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovComment(uint64(m.ID))
	}
	if m.CommentID != 0 {
		n += 1 + sovComment(uint64(m.CommentID))
	}
	if m.ForumID != 0 {
		n += 1 + sovComment(uint64(m.ForumID))
	}
	if m.ForumUser != 0 {
		n += 1 + sovComment(uint64(m.ForumUser))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.ContentType != 0 {
		n += 1 + sovComment(uint64(m.ContentType))
	}
	l = len(m.AtEntity)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.ThumbUp != 0 {
		n += 1 + sovComment(uint64(m.ThumbUp))
	}
	if m.ReplayID != 0 {
		n += 1 + sovComment(uint64(m.ReplayID))
	}
	if m.ReplayUID != 0 {
		n += 1 + sovComment(uint64(m.ReplayUID))
	}
	if m.SupID != 0 {
		n += 1 + sovComment(uint64(m.SupID))
	}
	if m.SupUser != 0 {
		n += 1 + sovComment(uint64(m.SupUser))
	}
	if m.CreateAt != 0 {
		n += 1 + sovComment(uint64(m.CreateAt))
	}
	if m.CreateBy != 0 {
		n += 1 + sovComment(uint64(m.CreateBy))
	}
	if m.SubComments != 0 {
		n += 1 + sovComment(uint64(m.SubComments))
	}
	if m.HasThumb {
		n += 3
	}
	if len(m.Medias) > 0 {
		for _, e := range m.Medias {
			l = e.Size()
			n += 2 + l + sovComment(uint64(l))
		}
	}
	if len(m.Entitys) > 0 {
		for _, e := range m.Entitys {
			l = e.Size()
			n += 2 + l + sovComment(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 2 + l + sovComment(uint64(l))
	}
	if m.ReplayUser != nil {
		l = m.ReplayUser.Size()
		n += 2 + l + sovComment(uint64(l))
	}
	if len(m.SubComment) > 0 {
		for _, e := range m.SubComment {
			l = e.Size()
			n += 2 + l + sovComment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComment(x uint64) (n int) {
	return sovComment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCommentCountResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentCountResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentCountResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplayPageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplayPageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplayPageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplayPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplayPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplayPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupUID", wireType)
			}
			m.SupUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupUID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentID", wireType)
			}
			m.CommentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupID", wireType)
			}
			m.SupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowComment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Friends = append(m.Friends, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowComment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthComment
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthComment
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Friends) == 0 {
					m.Friends = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Friends = append(m.Friends, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentID", wireType)
			}
			m.CommentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayLimit", wireType)
			}
			m.ReplayLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentPageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentPageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentPageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentID", wireType)
			}
			m.CommentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumUser", wireType)
			}
			m.ForumUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumUser |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			m.ContentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtEntity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AtEntity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUp", wireType)
			}
			m.ThumbUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbUp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayID", wireType)
			}
			m.ReplayID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayUID", wireType)
			}
			m.ReplayUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayUID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupID", wireType)
			}
			m.SupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupUser", wireType)
			}
			m.SupUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupUser |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubComments", wireType)
			}
			m.SubComments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubComments |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasThumb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasThumb = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medias = append(m.Medias, &Media{})
			if err := m.Medias[len(m.Medias)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entitys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entitys = append(m.Entitys, &HighLight{})
			if err := m.Entitys[len(m.Entitys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &imapigateway.UserInfo{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplayUser == nil {
				m.ReplayUser = &imapigateway.UserInfo{}
			}
			if err := m.ReplayUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubComment = append(m.SubComment, &Comment{})
			if err := m.SubComment[len(m.SubComment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComment = fmt.Errorf("proto: unexpected end of group")
)
