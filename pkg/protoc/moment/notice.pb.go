// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notice.proto

package moment

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//1点赞 2评论 3 关注 4 @ 5 提及
type NoticeType int32

const (
	NoticeType_Unknow_Type  NoticeType = 0
	NoticeType_Thumb_Type   NoticeType = 1
	NoticeType_Comment_Type NoticeType = 2
	NoticeType_Follow_Type  NoticeType = 3
	NoticeType_At_Type      NoticeType = 4
	NoticeType_Mention_Type NoticeType = 5
)

var NoticeType_name = map[int32]string{
	0: "Unknow_Type",
	1: "Thumb_Type",
	2: "Comment_Type",
	3: "Follow_Type",
	4: "At_Type",
	5: "Mention_Type",
}

var NoticeType_value = map[string]int32{
	"Unknow_Type":  0,
	"Thumb_Type":   1,
	"Comment_Type": 2,
	"Follow_Type":  3,
	"At_Type":      4,
	"Mention_Type": 5,
}

func (x NoticeType) String() string {
	return proto.EnumName(NoticeType_name, int32(x))
}

func (NoticeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{0}
}

type None struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *None) Reset()         { *m = None{} }
func (m *None) String() string { return proto.CompactTextString(m) }
func (*None) ProtoMessage()    {}
func (*None) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{0}
}
func (m *None) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *None) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_None.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *None) XXX_Merge(src proto.Message) {
	xxx_messageInfo_None.Merge(m, src)
}
func (m *None) XXX_Size() int {
	return m.Size()
}
func (m *None) XXX_DiscardUnknown() {
	xxx_messageInfo_None.DiscardUnknown(m)
}

var xxx_messageInfo_None proto.InternalMessageInfo

type UnReadCountRep struct {
	Notifier             int32    `protobuf:"varint,1,opt,name=Notifier,proto3" json:"Notifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnReadCountRep) Reset()         { *m = UnReadCountRep{} }
func (m *UnReadCountRep) String() string { return proto.CompactTextString(m) }
func (*UnReadCountRep) ProtoMessage()    {}
func (*UnReadCountRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{1}
}
func (m *UnReadCountRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnReadCountRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnReadCountRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnReadCountRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnReadCountRep.Merge(m, src)
}
func (m *UnReadCountRep) XXX_Size() int {
	return m.Size()
}
func (m *UnReadCountRep) XXX_DiscardUnknown() {
	xxx_messageInfo_UnReadCountRep.DiscardUnknown(m)
}

var xxx_messageInfo_UnReadCountRep proto.InternalMessageInfo

func (m *UnReadCountRep) GetNotifier() int32 {
	if m != nil {
		return m.Notifier
	}
	return 0
}

type NoticeAddBatchReq struct {
	Notices              []*Notice `protobuf:"bytes,1,rep,name=Notices,proto3" json:"Notices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NoticeAddBatchReq) Reset()         { *m = NoticeAddBatchReq{} }
func (m *NoticeAddBatchReq) String() string { return proto.CompactTextString(m) }
func (*NoticeAddBatchReq) ProtoMessage()    {}
func (*NoticeAddBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{2}
}
func (m *NoticeAddBatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticeAddBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticeAddBatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticeAddBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeAddBatchReq.Merge(m, src)
}
func (m *NoticeAddBatchReq) XXX_Size() int {
	return m.Size()
}
func (m *NoticeAddBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeAddBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeAddBatchReq proto.InternalMessageInfo

func (m *NoticeAddBatchReq) GetNotices() []*Notice {
	if m != nil {
		return m.Notices
	}
	return nil
}

type NoticePageRep struct {
	Notices              []*Notice `protobuf:"bytes,1,rep,name=Notices,proto3" json:"Notices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NoticePageRep) Reset()         { *m = NoticePageRep{} }
func (m *NoticePageRep) String() string { return proto.CompactTextString(m) }
func (*NoticePageRep) ProtoMessage()    {}
func (*NoticePageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{3}
}
func (m *NoticePageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticePageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticePageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticePageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticePageRep.Merge(m, src)
}
func (m *NoticePageRep) XXX_Size() int {
	return m.Size()
}
func (m *NoticePageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticePageRep.DiscardUnknown(m)
}

var xxx_messageInfo_NoticePageRep proto.InternalMessageInfo

func (m *NoticePageRep) GetNotices() []*Notice {
	if m != nil {
		return m.Notices
	}
	return nil
}

type NoticePageReq struct {
	// int64 RelationID = 1;
	NoticeID             int64    `protobuf:"varint,1,opt,name=NoticeID,proto3" json:"NoticeID,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	HasRead              bool     `protobuf:"varint,3,opt,name=HasRead,proto3" json:"HasRead,omitempty"`
	Notifier             int32    `protobuf:"varint,4,opt,name=Notifier,proto3" json:"Notifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticePageReq) Reset()         { *m = NoticePageReq{} }
func (m *NoticePageReq) String() string { return proto.CompactTextString(m) }
func (*NoticePageReq) ProtoMessage()    {}
func (*NoticePageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{4}
}
func (m *NoticePageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticePageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticePageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticePageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticePageReq.Merge(m, src)
}
func (m *NoticePageReq) XXX_Size() int {
	return m.Size()
}
func (m *NoticePageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticePageReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoticePageReq proto.InternalMessageInfo

func (m *NoticePageReq) GetNoticeID() int64 {
	if m != nil {
		return m.NoticeID
	}
	return 0
}

func (m *NoticePageReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *NoticePageReq) GetHasRead() bool {
	if m != nil {
		return m.HasRead
	}
	return false
}

func (m *NoticePageReq) GetNotifier() int32 {
	if m != nil {
		return m.Notifier
	}
	return 0
}

type Notice struct {
	// @inject_tag: db:"id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" db:"id"`
	// NoticeID 通知消息ID
	// @inject_tag: db:"notice_id"
	NoticeID int64 `protobuf:"varint,2,opt,name=NoticeID,proto3" json:"NoticeID,omitempty" db:"notice_id"`
	// Type 1点赞 2评论
	// @inject_tag: db:"type"
	Type NoticeType `protobuf:"varint,3,opt,name=Type,proto3,enum=moment.NoticeType" json:"Type,omitempty" db:"type"`
	// RelationID 帖子id
	// @inject_tag: db:"relation_id"
	RelationID int64 `protobuf:"varint,4,opt,name=RelationID,proto3" json:"RelationID,omitempty" db:"relation_id"`
	// Notifier 通知人
	// @inject_tag: db:"notifier"
	Notifier int32 `protobuf:"varint,5,opt,name=Notifier,proto3" json:"Notifier,omitempty" db:"notifier"`
	// Status 1为已读
	// @inject_tag: db:"status"
	Status int32 `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty" db:"status"`
	// CreateAt 通知时间
	// @inject_tag: db:"create_at"
	CreateAt int64 `protobuf:"varint,7,opt,name=CreateAt,proto3" json:"CreateAt,omitempty" db:"create_at"`
	// CreateBy 通知创建人
	// @inject_tag: db:"create_by"
	CreateBy             int32          `protobuf:"varint,8,opt,name=CreateBy,proto3" json:"CreateBy,omitempty" db:"create_by"`
	Content              *NoticeContent `protobuf:"bytes,9,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Notice) Reset()         { *m = Notice{} }
func (m *Notice) String() string { return proto.CompactTextString(m) }
func (*Notice) ProtoMessage()    {}
func (*Notice) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{5}
}
func (m *Notice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice.Merge(m, src)
}
func (m *Notice) XXX_Size() int {
	return m.Size()
}
func (m *Notice) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice.DiscardUnknown(m)
}

var xxx_messageInfo_Notice proto.InternalMessageInfo

func (m *Notice) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Notice) GetNoticeID() int64 {
	if m != nil {
		return m.NoticeID
	}
	return 0
}

func (m *Notice) GetType() NoticeType {
	if m != nil {
		return m.Type
	}
	return NoticeType_Unknow_Type
}

func (m *Notice) GetRelationID() int64 {
	if m != nil {
		return m.RelationID
	}
	return 0
}

func (m *Notice) GetNotifier() int32 {
	if m != nil {
		return m.Notifier
	}
	return 0
}

func (m *Notice) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Notice) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Notice) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *Notice) GetContent() *NoticeContent {
	if m != nil {
		return m.Content
	}
	return nil
}

type NoticeContent struct {
	//@inject_tag: db:"comment_id"
	CommentID int64 `protobuf:"varint,1,opt,name=CommentID,proto3" json:"CommentID,omitempty" db:"comment_id"`
	//@inject_tag: db:"comment_content"
	CommentContent string `protobuf:"bytes,2,opt,name=CommentContent,proto3" json:"CommentContent,omitempty" db:"comment_content"`
	//@inject_tag: db:"forum_id"
	ForumID int64 `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty" db:"forum_id"`
	//@inject_tag: db:"forum_content"
	ForumContent string `protobuf:"bytes,4,opt,name=ForumContent,proto3" json:"ForumContent,omitempty" db:"forum_content"`
	//@inject_tag: db:"media_content"
	MediaContent         string   `protobuf:"bytes,5,opt,name=MediaContent,proto3" json:"MediaContent,omitempty" db:"media_content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticeContent) Reset()         { *m = NoticeContent{} }
func (m *NoticeContent) String() string { return proto.CompactTextString(m) }
func (*NoticeContent) ProtoMessage()    {}
func (*NoticeContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{6}
}
func (m *NoticeContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticeContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticeContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticeContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeContent.Merge(m, src)
}
func (m *NoticeContent) XXX_Size() int {
	return m.Size()
}
func (m *NoticeContent) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeContent.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeContent proto.InternalMessageInfo

func (m *NoticeContent) GetCommentID() int64 {
	if m != nil {
		return m.CommentID
	}
	return 0
}

func (m *NoticeContent) GetCommentContent() string {
	if m != nil {
		return m.CommentContent
	}
	return ""
}

func (m *NoticeContent) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *NoticeContent) GetForumContent() string {
	if m != nil {
		return m.ForumContent
	}
	return ""
}

func (m *NoticeContent) GetMediaContent() string {
	if m != nil {
		return m.MediaContent
	}
	return ""
}

func init() {
	proto.RegisterEnum("moment.NoticeType", NoticeType_name, NoticeType_value)
	proto.RegisterType((*None)(nil), "moment.None")
	proto.RegisterType((*UnReadCountRep)(nil), "moment.UnReadCountRep")
	proto.RegisterType((*NoticeAddBatchReq)(nil), "moment.NoticeAddBatchReq")
	proto.RegisterType((*NoticePageRep)(nil), "moment.NoticePageRep")
	proto.RegisterType((*NoticePageReq)(nil), "moment.NoticePageReq")
	proto.RegisterType((*Notice)(nil), "moment.Notice")
	proto.RegisterType((*NoticeContent)(nil), "moment.NoticeContent")
}

func init() { proto.RegisterFile("notice.proto", fileDescriptor_642492014393dbdb) }

var fileDescriptor_642492014393dbdb = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0x12, 0x41,
	0x14, 0x66, 0x7f, 0x58, 0xe0, 0x80, 0xdb, 0x3a, 0x51, 0xb3, 0x12, 0x43, 0xc8, 0x5e, 0x54, 0xd2,
	0x18, 0x4c, 0x30, 0x9a, 0x78, 0xe1, 0x05, 0xb0, 0xa9, 0x92, 0x58, 0x62, 0xa6, 0xed, 0xb5, 0xd9,
	0xb2, 0x47, 0xbb, 0x91, 0x9d, 0xa1, 0x30, 0xd8, 0xf4, 0x51, 0x7c, 0x12, 0x5f, 0xc1, 0x4b, 0x1f,
	0xc1, 0xf0, 0x20, 0xc6, 0xcc, 0xcc, 0x0e, 0xb0, 0x1b, 0x93, 0xf6, 0x8e, 0xef, 0xfb, 0xce, 0x99,
	0xef, 0x3b, 0x73, 0x76, 0x80, 0x16, 0xe3, 0x22, 0x9d, 0x61, 0x7f, 0xb1, 0xe4, 0x82, 0x13, 0x2f,
	0xe3, 0x19, 0x32, 0x11, 0x7a, 0xe0, 0x4e, 0x39, 0xc3, 0xf0, 0x05, 0xf8, 0x17, 0x8c, 0x62, 0x9c,
	0x8c, 0xf9, 0x9a, 0x09, 0x8a, 0x0b, 0xd2, 0x86, 0xfa, 0x94, 0x8b, 0xf4, 0x4b, 0x8a, 0xcb, 0xc0,
	0xea, 0x5a, 0xbd, 0x2a, 0xdd, 0xe2, 0xf0, 0x1d, 0x3c, 0x9c, 0xaa, 0xd3, 0x86, 0x49, 0x32, 0x8a,
	0xc5, 0xec, 0x8a, 0xe2, 0x35, 0xe9, 0x41, 0x4d, 0x93, 0xab, 0xc0, 0xea, 0x3a, 0xbd, 0xe6, 0xc0,
	0xef, 0x6b, 0x93, 0xbe, 0xa6, 0xa9, 0x91, 0xc3, 0xb7, 0xf0, 0x40, 0xff, 0xfc, 0x14, 0x7f, 0x45,
	0xe9, 0x75, 0xff, 0xd6, 0x9b, 0x62, 0xeb, 0xb5, 0x89, 0x39, 0xc3, 0x49, 0xa4, 0x62, 0x3a, 0x74,
	0x8b, 0xc9, 0x23, 0xa8, 0x7e, 0x4c, 0xb3, 0x54, 0x04, 0xb6, 0x12, 0x34, 0x20, 0x01, 0xd4, 0x3e,
	0xc4, 0x2b, 0x39, 0x6b, 0xe0, 0x74, 0xad, 0x5e, 0x9d, 0x1a, 0x58, 0x18, 0xd9, 0x2d, 0x8d, 0xfc,
	0xc3, 0x06, 0x4f, 0x1f, 0x4c, 0x7c, 0xb0, 0xb7, 0x66, 0xf6, 0x24, 0x2a, 0x44, 0xb0, 0x4b, 0x11,
	0x8e, 0xc0, 0x3d, 0xbf, 0x5d, 0xa0, 0x72, 0xf2, 0x07, 0xa4, 0x38, 0x96, 0x54, 0xa8, 0xd2, 0x49,
	0x07, 0x80, 0xe2, 0x3c, 0x16, 0x29, 0x67, 0x93, 0x48, 0x99, 0x3b, 0x74, 0x8f, 0x29, 0x44, 0xab,
	0x16, 0xa3, 0x91, 0x27, 0xe0, 0x9d, 0x89, 0x58, 0xac, 0x57, 0x81, 0xa7, 0x94, 0x1c, 0xc9, 0x9e,
	0xf1, 0x12, 0x63, 0x81, 0x43, 0x11, 0xd4, 0x74, 0x2e, 0x83, 0x77, 0xda, 0xe8, 0x36, 0xa8, 0xeb,
	0xf3, 0x0c, 0x26, 0x2f, 0xa1, 0x36, 0xe6, 0x4c, 0x20, 0x13, 0x41, 0xa3, 0x6b, 0xf5, 0x9a, 0x83,
	0xc7, 0xc5, 0xd8, 0xb9, 0x48, 0x4d, 0x55, 0xf8, 0xd3, 0x32, 0x5b, 0xc9, 0x19, 0xf2, 0x0c, 0x1a,
	0x63, 0x9e, 0xc9, 0x9e, 0xed, 0x4d, 0xed, 0x08, 0x72, 0x04, 0x7e, 0x0e, 0x8c, 0x8f, 0xbc, 0xb6,
	0x06, 0x2d, 0xb1, 0x72, 0x53, 0x27, 0x7c, 0xb9, 0xce, 0x26, 0x91, 0xba, 0x3f, 0x87, 0x1a, 0x48,
	0x42, 0x68, 0xa9, 0x9f, 0xa6, 0xdf, 0x55, 0xfd, 0x05, 0x4e, 0xd6, 0x9c, 0x62, 0x92, 0xc6, 0xa6,
	0xa6, 0xaa, 0x6b, 0xf6, 0xb9, 0x63, 0x0e, 0xb0, 0x5b, 0x05, 0x39, 0x80, 0xe6, 0x05, 0xfb, 0xc6,
	0xf8, 0xcd, 0x67, 0x09, 0x0f, 0x2b, 0xc4, 0x07, 0x38, 0xbf, 0x5a, 0x67, 0x97, 0x1a, 0x5b, 0xe4,
	0x10, 0x5a, 0x79, 0x44, 0xcd, 0xd8, 0xb2, 0xe5, 0x84, 0xcf, 0xe7, 0xa6, 0xc5, 0x21, 0x4d, 0xa8,
	0x0d, 0x73, 0xd5, 0x95, 0xf5, 0xa7, 0xc8, 0xe4, 0x0a, 0x35, 0x53, 0x1d, 0xfc, 0xb5, 0xe0, 0x40,
	0x3b, 0x46, 0xa3, 0x33, 0x5c, 0x7e, 0x97, 0xdf, 0xd3, 0x73, 0x70, 0x86, 0x49, 0x42, 0x4a, 0xdf,
	0x7c, 0xbb, 0x84, 0xc3, 0x0a, 0x79, 0x0d, 0x75, 0xf3, 0xe0, 0xc8, 0xd3, 0xa2, 0xba, 0xf7, 0x10,
	0xdb, 0xad, 0x9d, 0xc4, 0x64, 0xdb, 0x31, 0x78, 0x11, 0xce, 0x51, 0xe0, 0x3d, 0x2c, 0xde, 0x80,
	0x2b, 0x5f, 0x16, 0x29, 0xad, 0x3c, 0x7f, 0x6d, 0xed, 0xff, 0xd2, 0x8b, 0xb0, 0x22, 0x67, 0x78,
	0x8f, 0xe2, 0x6e, 0x83, 0x51, 0xeb, 0xd7, 0xa6, 0x63, 0xfd, 0xde, 0x74, 0xac, 0x3f, 0x9b, 0x8e,
	0x75, 0xe9, 0xa9, 0x7f, 0xa3, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xcb, 0xc8, 0xe9,
	0x9d, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NoticeDBServiceClient is the client API for NoticeDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoticeDBServiceClient interface {
	Add(ctx context.Context, in *Notice, opts ...grpc.CallOption) (*Notice, error)
	AddBatch(ctx context.Context, in *NoticeAddBatchReq, opts ...grpc.CallOption) (*None, error)
	Delete(ctx context.Context, in *Notice, opts ...grpc.CallOption) (*Notice, error)
	Page(ctx context.Context, in *NoticePageReq, opts ...grpc.CallOption) (*NoticePageRep, error)
	Get(ctx context.Context, in *Notice, opts ...grpc.CallOption) (*Notice, error)
}

type noticeDBServiceClient struct {
	cc *grpc.ClientConn
}

func NewNoticeDBServiceClient(cc *grpc.ClientConn) NoticeDBServiceClient {
	return &noticeDBServiceClient{cc}
}

func (c *noticeDBServiceClient) Add(ctx context.Context, in *Notice, opts ...grpc.CallOption) (*Notice, error) {
	out := new(Notice)
	err := c.cc.Invoke(ctx, "/moment.NoticeDBService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeDBServiceClient) AddBatch(ctx context.Context, in *NoticeAddBatchReq, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := c.cc.Invoke(ctx, "/moment.NoticeDBService/AddBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeDBServiceClient) Delete(ctx context.Context, in *Notice, opts ...grpc.CallOption) (*Notice, error) {
	out := new(Notice)
	err := c.cc.Invoke(ctx, "/moment.NoticeDBService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeDBServiceClient) Page(ctx context.Context, in *NoticePageReq, opts ...grpc.CallOption) (*NoticePageRep, error) {
	out := new(NoticePageRep)
	err := c.cc.Invoke(ctx, "/moment.NoticeDBService/Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeDBServiceClient) Get(ctx context.Context, in *Notice, opts ...grpc.CallOption) (*Notice, error) {
	out := new(Notice)
	err := c.cc.Invoke(ctx, "/moment.NoticeDBService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeDBServiceServer is the server API for NoticeDBService service.
type NoticeDBServiceServer interface {
	Add(context.Context, *Notice) (*Notice, error)
	AddBatch(context.Context, *NoticeAddBatchReq) (*None, error)
	Delete(context.Context, *Notice) (*Notice, error)
	Page(context.Context, *NoticePageReq) (*NoticePageRep, error)
	Get(context.Context, *Notice) (*Notice, error)
}

// UnimplementedNoticeDBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNoticeDBServiceServer struct {
}

func (*UnimplementedNoticeDBServiceServer) Add(ctx context.Context, req *Notice) (*Notice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedNoticeDBServiceServer) AddBatch(ctx context.Context, req *NoticeAddBatchReq) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBatch not implemented")
}
func (*UnimplementedNoticeDBServiceServer) Delete(ctx context.Context, req *Notice) (*Notice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedNoticeDBServiceServer) Page(ctx context.Context, req *NoticePageReq) (*NoticePageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (*UnimplementedNoticeDBServiceServer) Get(ctx context.Context, req *Notice) (*Notice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterNoticeDBServiceServer(s *grpc.Server, srv NoticeDBServiceServer) {
	s.RegisterService(&_NoticeDBService_serviceDesc, srv)
}

func _NoticeDBService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeDBServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.NoticeDBService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeDBServiceServer).Add(ctx, req.(*Notice))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeDBService_AddBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeAddBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeDBServiceServer).AddBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.NoticeDBService/AddBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeDBServiceServer).AddBatch(ctx, req.(*NoticeAddBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeDBService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeDBServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.NoticeDBService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeDBServiceServer).Delete(ctx, req.(*Notice))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeDBService_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeDBServiceServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.NoticeDBService/Page",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeDBServiceServer).Page(ctx, req.(*NoticePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.NoticeDBService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeDBServiceServer).Get(ctx, req.(*Notice))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoticeDBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.NoticeDBService",
	HandlerType: (*NoticeDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _NoticeDBService_Add_Handler,
		},
		{
			MethodName: "AddBatch",
			Handler:    _NoticeDBService_AddBatch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NoticeDBService_Delete_Handler,
		},
		{
			MethodName: "Page",
			Handler:    _NoticeDBService_Page_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NoticeDBService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notice.proto",
}

func (m *None) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UnReadCountRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnReadCountRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnReadCountRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Notifier != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.Notifier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NoticeAddBatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeAddBatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoticeAddBatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notices) > 0 {
		for iNdEx := len(m.Notices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNotice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoticePageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticePageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoticePageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notices) > 0 {
		for iNdEx := len(m.Notices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNotice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoticePageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticePageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoticePageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Notifier != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.Notifier))
		i--
		dAtA[i] = 0x20
	}
	if m.HasRead {
		i--
		if m.HasRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.NoticeID != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.NoticeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Notice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CreateBy != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateAt != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Notifier != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.Notifier))
		i--
		dAtA[i] = 0x28
	}
	if m.RelationID != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.RelationID))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.NoticeID != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.NoticeID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NoticeContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoticeContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MediaContent) > 0 {
		i -= len(m.MediaContent)
		copy(dAtA[i:], m.MediaContent)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.MediaContent)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ForumContent) > 0 {
		i -= len(m.ForumContent)
		copy(dAtA[i:], m.ForumContent)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.ForumContent)))
		i--
		dAtA[i] = 0x22
	}
	if m.ForumID != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CommentContent) > 0 {
		i -= len(m.CommentContent)
		copy(dAtA[i:], m.CommentContent)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.CommentContent)))
		i--
		dAtA[i] = 0x12
	}
	if m.CommentID != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.CommentID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNotice(dAtA []byte, offset int, v uint64) int {
	offset -= sovNotice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnReadCountRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notifier != 0 {
		n += 1 + sovNotice(uint64(m.Notifier))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoticeAddBatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notices) > 0 {
		for _, e := range m.Notices {
			l = e.Size()
			n += 1 + l + sovNotice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoticePageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notices) > 0 {
		for _, e := range m.Notices {
			l = e.Size()
			n += 1 + l + sovNotice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoticePageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoticeID != 0 {
		n += 1 + sovNotice(uint64(m.NoticeID))
	}
	if m.Limit != 0 {
		n += 1 + sovNotice(uint64(m.Limit))
	}
	if m.HasRead {
		n += 2
	}
	if m.Notifier != 0 {
		n += 1 + sovNotice(uint64(m.Notifier))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Notice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovNotice(uint64(m.ID))
	}
	if m.NoticeID != 0 {
		n += 1 + sovNotice(uint64(m.NoticeID))
	}
	if m.Type != 0 {
		n += 1 + sovNotice(uint64(m.Type))
	}
	if m.RelationID != 0 {
		n += 1 + sovNotice(uint64(m.RelationID))
	}
	if m.Notifier != 0 {
		n += 1 + sovNotice(uint64(m.Notifier))
	}
	if m.Status != 0 {
		n += 1 + sovNotice(uint64(m.Status))
	}
	if m.CreateAt != 0 {
		n += 1 + sovNotice(uint64(m.CreateAt))
	}
	if m.CreateBy != 0 {
		n += 1 + sovNotice(uint64(m.CreateBy))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoticeContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommentID != 0 {
		n += 1 + sovNotice(uint64(m.CommentID))
	}
	l = len(m.CommentContent)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	if m.ForumID != 0 {
		n += 1 + sovNotice(uint64(m.ForumID))
	}
	l = len(m.ForumContent)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	l = len(m.MediaContent)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNotice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotice(x uint64) (n int) {
	return sovNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *None) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: None: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: None: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnReadCountRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnReadCountRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnReadCountRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifier", wireType)
			}
			m.Notifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Notifier |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeAddBatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeAddBatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeAddBatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notices = append(m.Notices, &Notice{})
			if err := m.Notices[len(m.Notices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticePageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticePageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticePageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notices = append(m.Notices, &Notice{})
			if err := m.Notices[len(m.Notices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticePageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticePageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticePageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeID", wireType)
			}
			m.NoticeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRead = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifier", wireType)
			}
			m.Notifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Notifier |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeID", wireType)
			}
			m.NoticeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NoticeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationID", wireType)
			}
			m.RelationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifier", wireType)
			}
			m.Notifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Notifier |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &NoticeContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentID", wireType)
			}
			m.CommentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForumContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNotice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNotice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNotice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNotice = fmt.Errorf("proto: unexpected end of group")
)
