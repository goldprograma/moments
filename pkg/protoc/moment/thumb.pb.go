// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thumb.proto

package moment

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	"gitlab.moments.im/pkg/protoc/imapigateway"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HasClickResp struct {
	State                bool     `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasClickResp) Reset()         { *m = HasClickResp{} }
func (m *HasClickResp) String() string { return proto.CompactTextString(m) }
func (*HasClickResp) ProtoMessage()    {}
func (*HasClickResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32b4c522175d58c, []int{0}
}
func (m *HasClickResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasClickResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasClickResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasClickResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasClickResp.Merge(m, src)
}
func (m *HasClickResp) XXX_Size() int {
	return m.Size()
}
func (m *HasClickResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HasClickResp.DiscardUnknown(m)
}

var xxx_messageInfo_HasClickResp proto.InternalMessageInfo

func (m *HasClickResp) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

type GetThumbCountResp struct {
	Count                int64    `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetThumbCountResp) Reset()         { *m = GetThumbCountResp{} }
func (m *GetThumbCountResp) String() string { return proto.CompactTextString(m) }
func (*GetThumbCountResp) ProtoMessage()    {}
func (*GetThumbCountResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32b4c522175d58c, []int{1}
}
func (m *GetThumbCountResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetThumbCountResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetThumbCountResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetThumbCountResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThumbCountResp.Merge(m, src)
}
func (m *GetThumbCountResp) XXX_Size() int {
	return m.Size()
}
func (m *GetThumbCountResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThumbCountResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetThumbCountResp proto.InternalMessageInfo

func (m *GetThumbCountResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ThumbUserIDResp struct {
	UserID               []int32  `protobuf:"varint,1,rep,packed,name=UserID,proto3" json:"UserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThumbUserIDResp) Reset()         { *m = ThumbUserIDResp{} }
func (m *ThumbUserIDResp) String() string { return proto.CompactTextString(m) }
func (*ThumbUserIDResp) ProtoMessage()    {}
func (*ThumbUserIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32b4c522175d58c, []int{2}
}
func (m *ThumbUserIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThumbUserIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThumbUserIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThumbUserIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbUserIDResp.Merge(m, src)
}
func (m *ThumbUserIDResp) XXX_Size() int {
	return m.Size()
}
func (m *ThumbUserIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbUserIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbUserIDResp proto.InternalMessageInfo

func (m *ThumbUserIDResp) GetUserID() []int32 {
	if m != nil {
		return m.UserID
	}
	return nil
}

type ThumbUserCountReq struct {
	UserID               int64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThumbUserCountReq) Reset()         { *m = ThumbUserCountReq{} }
func (m *ThumbUserCountReq) String() string { return proto.CompactTextString(m) }
func (*ThumbUserCountReq) ProtoMessage()    {}
func (*ThumbUserCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32b4c522175d58c, []int{3}
}
func (m *ThumbUserCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThumbUserCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThumbUserCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThumbUserCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbUserCountReq.Merge(m, src)
}
func (m *ThumbUserCountReq) XXX_Size() int {
	return m.Size()
}
func (m *ThumbUserCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbUserCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbUserCountReq proto.InternalMessageInfo

func (m *ThumbUserCountReq) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type ThumbUserCountRep struct {
	// @inject_tag: json:"Count"
	Count                int64    `protobuf:"varint,1,opt,name=Count,proto3" json:"Count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThumbUserCountRep) Reset()         { *m = ThumbUserCountRep{} }
func (m *ThumbUserCountRep) String() string { return proto.CompactTextString(m) }
func (*ThumbUserCountRep) ProtoMessage()    {}
func (*ThumbUserCountRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32b4c522175d58c, []int{4}
}
func (m *ThumbUserCountRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThumbUserCountRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThumbUserCountRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThumbUserCountRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbUserCountRep.Merge(m, src)
}
func (m *ThumbUserCountRep) XXX_Size() int {
	return m.Size()
}
func (m *ThumbUserCountRep) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbUserCountRep.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbUserCountRep proto.InternalMessageInfo

func (m *ThumbUserCountRep) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ThumbPageRep struct {
	Thumbs               []*Thumb                 `protobuf:"bytes,1,rep,name=Thumbs,proto3" json:"Thumbs,omitempty"`
	UserInfo             []*imapigateway.UserInfo `protobuf:"bytes,2,rep,name=UserInfo,proto3" json:"UserInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ThumbPageRep) Reset()         { *m = ThumbPageRep{} }
func (m *ThumbPageRep) String() string { return proto.CompactTextString(m) }
func (*ThumbPageRep) ProtoMessage()    {}
func (*ThumbPageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32b4c522175d58c, []int{5}
}
func (m *ThumbPageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThumbPageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThumbPageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThumbPageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbPageRep.Merge(m, src)
}
func (m *ThumbPageRep) XXX_Size() int {
	return m.Size()
}
func (m *ThumbPageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbPageRep.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbPageRep proto.InternalMessageInfo

func (m *ThumbPageRep) GetThumbs() []*Thumb {
	if m != nil {
		return m.Thumbs
	}
	return nil
}

func (m *ThumbPageRep) GetUserInfo() []*imapigateway.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type ThumbPageReq struct {
	ForumID              int64    `protobuf:"varint,1,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	CommentID            int64    `protobuf:"varint,2,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	UpDown               int32    `protobuf:"varint,4,opt,name=UpDown,proto3" json:"UpDown,omitempty"`
	ThumbID              int64    `protobuf:"varint,5,opt,name=ThumbID,proto3" json:"ThumbID,omitempty"`
	CreateBy             int32    `protobuf:"varint,6,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	Friends              []int32  `protobuf:"varint,7,rep,packed,name=Friends,proto3" json:"Friends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThumbPageReq) Reset()         { *m = ThumbPageReq{} }
func (m *ThumbPageReq) String() string { return proto.CompactTextString(m) }
func (*ThumbPageReq) ProtoMessage()    {}
func (*ThumbPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32b4c522175d58c, []int{6}
}
func (m *ThumbPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThumbPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThumbPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThumbPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbPageReq.Merge(m, src)
}
func (m *ThumbPageReq) XXX_Size() int {
	return m.Size()
}
func (m *ThumbPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbPageReq proto.InternalMessageInfo

func (m *ThumbPageReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ThumbPageReq) GetCommentID() int64 {
	if m != nil {
		return m.CommentID
	}
	return 0
}

func (m *ThumbPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ThumbPageReq) GetUpDown() int32 {
	if m != nil {
		return m.UpDown
	}
	return 0
}

func (m *ThumbPageReq) GetThumbID() int64 {
	if m != nil {
		return m.ThumbID
	}
	return 0
}

func (m *ThumbPageReq) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *ThumbPageReq) GetFriends() []int32 {
	if m != nil {
		return m.Friends
	}
	return nil
}

type Thumb struct {
	// @inject_tag: db:"id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" db:"id"`
	// ThumbID点赞Id
	// @inject_tag: db:"thumb_id"
	ThumbID int64 `protobuf:"varint,2,opt,name=ThumbID,proto3" json:"ThumbID,omitempty" db:"thumb_id"`
	// ForumID 帖子ID
	// @inject_tag: db:"forum_id"
	ForumID int64 `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty" db:"forum_id"`
	// ForumUID帖子拥有者Id
	// @inject_tag: db:"forum_uid"
	ForumUID int32 `protobuf:"varint,4,opt,name=ForumUID,proto3" json:"ForumUID,omitempty" db:"forum_uid"`
	// ForumID 帖子ID
	// @inject_tag: db:"comment_id"
	CommentID int64 `protobuf:"varint,5,opt,name=CommentID,proto3" json:"CommentID,omitempty" db:"comment_id"`
	// ForumUID帖子拥有者Id
	// @inject_tag: db:"comment_uid"
	CommentUID int32 `protobuf:"varint,6,opt,name=CommentUID,proto3" json:"CommentUID,omitempty" db:"comment_uid"`
	// UpDown 1点赞2踩
	// @inject_tag: db:"up_down"
	UpDown int32 `protobuf:"varint,7,opt,name=UpDown,proto3" json:"UpDown,omitempty" db:"up_down"`
	// @inject_tag: db:"create_at"
	// CreateAt 创建时间
	CreateAt int64 `protobuf:"varint,8,opt,name=CreateAt,proto3" json:"CreateAt,omitempty" db:"create_at"`
	// @inject_tag: db:"create_by"
	// CreateBy 创建人
	CreateBy             int32                  `protobuf:"varint,9,opt,name=CreateBy,proto3" json:"CreateBy,omitempty" db:"create_by"`
	Creator              *imapigateway.UserInfo `protobuf:"bytes,10,opt,name=Creator,proto3" json:"Creator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Thumb) Reset()         { *m = Thumb{} }
func (m *Thumb) String() string { return proto.CompactTextString(m) }
func (*Thumb) ProtoMessage()    {}
func (*Thumb) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32b4c522175d58c, []int{7}
}
func (m *Thumb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Thumb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Thumb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Thumb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thumb.Merge(m, src)
}
func (m *Thumb) XXX_Size() int {
	return m.Size()
}
func (m *Thumb) XXX_DiscardUnknown() {
	xxx_messageInfo_Thumb.DiscardUnknown(m)
}

var xxx_messageInfo_Thumb proto.InternalMessageInfo

func (m *Thumb) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Thumb) GetThumbID() int64 {
	if m != nil {
		return m.ThumbID
	}
	return 0
}

func (m *Thumb) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *Thumb) GetForumUID() int32 {
	if m != nil {
		return m.ForumUID
	}
	return 0
}

func (m *Thumb) GetCommentID() int64 {
	if m != nil {
		return m.CommentID
	}
	return 0
}

func (m *Thumb) GetCommentUID() int32 {
	if m != nil {
		return m.CommentUID
	}
	return 0
}

func (m *Thumb) GetUpDown() int32 {
	if m != nil {
		return m.UpDown
	}
	return 0
}

func (m *Thumb) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Thumb) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *Thumb) GetCreator() *imapigateway.UserInfo {
	if m != nil {
		return m.Creator
	}
	return nil
}

func init() {
	proto.RegisterType((*HasClickResp)(nil), "moment.HasClickResp")
	proto.RegisterType((*GetThumbCountResp)(nil), "moment.GetThumbCountResp")
	proto.RegisterType((*ThumbUserIDResp)(nil), "moment.ThumbUserIDResp")
	proto.RegisterType((*ThumbUserCountReq)(nil), "moment.ThumbUserCountReq")
	proto.RegisterType((*ThumbUserCountRep)(nil), "moment.ThumbUserCountRep")
	proto.RegisterType((*ThumbPageRep)(nil), "moment.ThumbPageRep")
	proto.RegisterType((*ThumbPageReq)(nil), "moment.ThumbPageReq")
	proto.RegisterType((*Thumb)(nil), "moment.Thumb")
}

func init() { proto.RegisterFile("thumb.proto", fileDescriptor_f32b4c522175d58c) }

var fileDescriptor_f32b4c522175d58c = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xed, 0xda, 0x71, 0xa7, 0x69, 0xab, 0xae, 0xa2, 0xb0, 0x58, 0x28, 0x8a, 0x2c, 0x2a,
	0x25, 0x42, 0xb2, 0x20, 0x70, 0x41, 0x9c, 0x9a, 0x58, 0x84, 0x48, 0x1c, 0x90, 0x4b, 0x2f, 0xdc,
	0xdc, 0x64, 0x29, 0x16, 0xb5, 0x37, 0x75, 0x36, 0x54, 0xfd, 0x22, 0x7e, 0x84, 0x03, 0x47, 0x0e,
	0x7c, 0x00, 0xca, 0x97, 0x20, 0xcf, 0xda, 0x8b, 0x37, 0x69, 0x40, 0xe2, 0xe6, 0x37, 0xf3, 0xf6,
	0xbd, 0xd9, 0xf1, 0xcc, 0xc2, 0x81, 0xf8, 0xb4, 0x4a, 0x2f, 0x83, 0x45, 0xce, 0x05, 0x27, 0x4e,
	0xca, 0x53, 0x96, 0x09, 0xaf, 0x35, 0xe3, 0x69, 0xca, 0x33, 0x19, 0xf5, 0x1f, 0x43, 0xeb, 0x4d,
	0xbc, 0x1c, 0x5f, 0x27, 0xb3, 0xcf, 0x11, 0x5b, 0x2e, 0x48, 0x1b, 0xec, 0x73, 0x11, 0x0b, 0x46,
	0x8d, 0x9e, 0xd1, 0x77, 0x23, 0x09, 0xfc, 0x01, 0x9c, 0x4c, 0x98, 0x78, 0x5f, 0xa8, 0x8d, 0xf9,
	0x2a, 0x13, 0x15, 0x15, 0x01, 0x52, 0xad, 0x48, 0x02, 0x7f, 0x00, 0xc7, 0xc8, 0xbb, 0x58, 0xb2,
	0x7c, 0x1a, 0x22, 0xb1, 0x03, 0x8e, 0x44, 0xd4, 0xe8, 0x59, 0x7d, 0x3b, 0x2a, 0x91, 0xff, 0x04,
	0x4e, 0x14, 0xb5, 0x94, 0xbd, 0xd1, 0xc8, 0x85, 0x6c, 0x45, 0x1e, 0x6c, 0x93, 0x77, 0x95, 0x90,
	0x40, 0x0b, 0xa9, 0xef, 0xe2, 0x2b, 0x56, 0xb0, 0x4e, 0xc1, 0x41, 0xbc, 0x44, 0xff, 0x83, 0xe1,
	0x61, 0x20, 0x5b, 0x11, 0x60, 0x34, 0x2a, 0x93, 0x64, 0x08, 0x2e, 0x7a, 0x65, 0x1f, 0x39, 0x35,
	0x91, 0xd8, 0x09, 0x92, 0x34, 0x5e, 0x24, 0x57, 0xb1, 0x60, 0xb7, 0xf1, 0x5d, 0xb0, 0x2a, 0xb3,
	0x91, 0xe2, 0xf9, 0xdf, 0x0c, 0xcd, 0xeb, 0x86, 0x50, 0x68, 0xbe, 0xe6, 0xf9, 0x2a, 0x55, 0xf5,
	0x57, 0x90, 0x3c, 0x82, 0xfd, 0x31, 0x4f, 0x0b, 0xdf, 0x69, 0x48, 0x4d, 0xcc, 0xfd, 0x09, 0x14,
	0x37, 0x79, 0x9b, 0xa4, 0x89, 0xa0, 0x56, 0xcf, 0xe8, 0xdb, 0x91, 0x04, 0xd8, 0x8c, 0x45, 0xc8,
	0x6f, 0x33, 0xba, 0x87, 0xe1, 0x12, 0x15, 0x2e, 0xe8, 0x3a, 0x0d, 0xa9, 0x2d, 0x5d, 0x4a, 0x48,
	0x3c, 0x70, 0xc7, 0x39, 0x8b, 0x05, 0x1b, 0xdd, 0x51, 0x07, 0xcf, 0x28, 0x8c, 0xb5, 0xe5, 0x09,
	0xcb, 0xe6, 0x4b, 0xda, 0xc4, 0x1f, 0x51, 0x41, 0xff, 0xab, 0x09, 0x36, 0x2a, 0x90, 0x23, 0x30,
	0x55, 0xe9, 0xe6, 0x34, 0xac, 0x3b, 0x99, 0xba, 0x53, 0xed, 0xa6, 0x96, 0x7e, 0x53, 0x0f, 0x5c,
	0xfc, 0xbc, 0x98, 0x86, 0x65, 0xdd, 0x0a, 0xeb, 0x5d, 0xb0, 0x37, 0xbb, 0xd0, 0x05, 0x28, 0x41,
	0x71, 0x56, 0xd6, 0x5f, 0x8b, 0xd4, 0xfa, 0xd1, 0xd4, 0xfa, 0xa1, 0x6e, 0x7d, 0x26, 0xa8, 0x8b,
	0xa2, 0x0a, 0x6b, 0x1d, 0xd9, 0xdf, 0xe8, 0xc8, 0x53, 0x68, 0xe2, 0x37, 0xcf, 0x29, 0xf4, 0x8c,
	0xbf, 0xfc, 0xf1, 0x8a, 0x36, 0xfc, 0x69, 0xc1, 0x11, 0x76, 0x20, 0x1c, 0x9d, 0xb3, 0xfc, 0x4b,
	0x32, 0x63, 0xe4, 0x14, 0xac, 0xb3, 0xf9, 0x9c, 0xe8, 0x53, 0xe5, 0xe9, 0xd0, 0x6f, 0x90, 0x67,
	0xe0, 0x56, 0x9b, 0xb6, 0xc9, 0x6d, 0x57, 0xb0, 0xbe, 0x8a, 0x7e, 0x83, 0xf4, 0xc1, 0x09, 0xd9,
	0x35, 0x13, 0xec, 0x9f, 0xe2, 0x2f, 0x60, 0xaf, 0x98, 0x40, 0xd2, 0xd6, 0x12, 0xe5, 0x50, 0x7a,
	0xf7, 0x45, 0x0b, 0xfd, 0x31, 0xec, 0xab, 0x75, 0x22, 0x0f, 0x35, 0x52, 0x7d, 0x27, 0xbd, 0x9d,
	0xa9, 0x42, 0xe4, 0x65, 0xb5, 0xb0, 0x3b, 0xcc, 0x1f, 0x6c, 0x1d, 0x96, 0xcf, 0x82, 0xdf, 0x20,
	0x23, 0x38, 0x9c, 0x30, 0x81, 0xb3, 0x21, 0x6b, 0xb8, 0x5f, 0x41, 0xd9, 0x6f, 0xbd, 0x41, 0x7e,
	0x83, 0x84, 0x70, 0x3c, 0x61, 0xa2, 0x9c, 0x91, 0xff, 0x55, 0x19, 0x75, 0xbe, 0xaf, 0xbb, 0xc6,
	0x8f, 0x75, 0xd7, 0xf8, 0xb5, 0xee, 0x1a, 0x1f, 0xdc, 0xe0, 0x95, 0xe4, 0x5e, 0x3a, 0xf8, 0x4a,
	0x3e, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x35, 0x71, 0xa8, 0x0b, 0x4a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThumbDBServiceClient is the client API for ThumbDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThumbDBServiceClient interface {
	Add(ctx context.Context, in *Thumb, opts ...grpc.CallOption) (*Thumb, error)
	HasClick(ctx context.Context, in *Thumb, opts ...grpc.CallOption) (*HasClickResp, error)
	Delete(ctx context.Context, in *Thumb, opts ...grpc.CallOption) (*Thumb, error)
	Page(ctx context.Context, in *ThumbPageReq, opts ...grpc.CallOption) (*ThumbPageRep, error)
	UserCount(ctx context.Context, in *ThumbUserCountReq, opts ...grpc.CallOption) (*ThumbUserCountRep, error)
	UserID(ctx context.Context, in *ThumbPageReq, opts ...grpc.CallOption) (*ThumbUserIDResp, error)
	GetForumCount(ctx context.Context, in *ThumbPageReq, opts ...grpc.CallOption) (*GetThumbCountResp, error)
	GetCommentCount(ctx context.Context, in *ThumbPageReq, opts ...grpc.CallOption) (*GetThumbCountResp, error)
}

type thumbDBServiceClient struct {
	cc *grpc.ClientConn
}

func NewThumbDBServiceClient(cc *grpc.ClientConn) ThumbDBServiceClient {
	return &thumbDBServiceClient{cc}
}

func (c *thumbDBServiceClient) Add(ctx context.Context, in *Thumb, opts ...grpc.CallOption) (*Thumb, error) {
	out := new(Thumb)
	err := c.cc.Invoke(ctx, "/moment.ThumbDBService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbDBServiceClient) HasClick(ctx context.Context, in *Thumb, opts ...grpc.CallOption) (*HasClickResp, error) {
	out := new(HasClickResp)
	err := c.cc.Invoke(ctx, "/moment.ThumbDBService/HasClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbDBServiceClient) Delete(ctx context.Context, in *Thumb, opts ...grpc.CallOption) (*Thumb, error) {
	out := new(Thumb)
	err := c.cc.Invoke(ctx, "/moment.ThumbDBService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbDBServiceClient) Page(ctx context.Context, in *ThumbPageReq, opts ...grpc.CallOption) (*ThumbPageRep, error) {
	out := new(ThumbPageRep)
	err := c.cc.Invoke(ctx, "/moment.ThumbDBService/Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbDBServiceClient) UserCount(ctx context.Context, in *ThumbUserCountReq, opts ...grpc.CallOption) (*ThumbUserCountRep, error) {
	out := new(ThumbUserCountRep)
	err := c.cc.Invoke(ctx, "/moment.ThumbDBService/UserCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbDBServiceClient) UserID(ctx context.Context, in *ThumbPageReq, opts ...grpc.CallOption) (*ThumbUserIDResp, error) {
	out := new(ThumbUserIDResp)
	err := c.cc.Invoke(ctx, "/moment.ThumbDBService/UserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbDBServiceClient) GetForumCount(ctx context.Context, in *ThumbPageReq, opts ...grpc.CallOption) (*GetThumbCountResp, error) {
	out := new(GetThumbCountResp)
	err := c.cc.Invoke(ctx, "/moment.ThumbDBService/GetForumCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbDBServiceClient) GetCommentCount(ctx context.Context, in *ThumbPageReq, opts ...grpc.CallOption) (*GetThumbCountResp, error) {
	out := new(GetThumbCountResp)
	err := c.cc.Invoke(ctx, "/moment.ThumbDBService/GetCommentCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThumbDBServiceServer is the server API for ThumbDBService service.
type ThumbDBServiceServer interface {
	Add(context.Context, *Thumb) (*Thumb, error)
	HasClick(context.Context, *Thumb) (*HasClickResp, error)
	Delete(context.Context, *Thumb) (*Thumb, error)
	Page(context.Context, *ThumbPageReq) (*ThumbPageRep, error)
	UserCount(context.Context, *ThumbUserCountReq) (*ThumbUserCountRep, error)
	UserID(context.Context, *ThumbPageReq) (*ThumbUserIDResp, error)
	GetForumCount(context.Context, *ThumbPageReq) (*GetThumbCountResp, error)
	GetCommentCount(context.Context, *ThumbPageReq) (*GetThumbCountResp, error)
}

// UnimplementedThumbDBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedThumbDBServiceServer struct {
}

func (*UnimplementedThumbDBServiceServer) Add(ctx context.Context, req *Thumb) (*Thumb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedThumbDBServiceServer) HasClick(ctx context.Context, req *Thumb) (*HasClickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasClick not implemented")
}
func (*UnimplementedThumbDBServiceServer) Delete(ctx context.Context, req *Thumb) (*Thumb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedThumbDBServiceServer) Page(ctx context.Context, req *ThumbPageReq) (*ThumbPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (*UnimplementedThumbDBServiceServer) UserCount(ctx context.Context, req *ThumbUserCountReq) (*ThumbUserCountRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCount not implemented")
}
func (*UnimplementedThumbDBServiceServer) UserID(ctx context.Context, req *ThumbPageReq) (*ThumbUserIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserID not implemented")
}
func (*UnimplementedThumbDBServiceServer) GetForumCount(ctx context.Context, req *ThumbPageReq) (*GetThumbCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForumCount not implemented")
}
func (*UnimplementedThumbDBServiceServer) GetCommentCount(ctx context.Context, req *ThumbPageReq) (*GetThumbCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCount not implemented")
}

func RegisterThumbDBServiceServer(s *grpc.Server, srv ThumbDBServiceServer) {
	s.RegisterService(&_ThumbDBService_serviceDesc, srv)
}

func _ThumbDBService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thumb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbDBServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ThumbDBService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbDBServiceServer).Add(ctx, req.(*Thumb))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbDBService_HasClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thumb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbDBServiceServer).HasClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ThumbDBService/HasClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbDBServiceServer).HasClick(ctx, req.(*Thumb))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbDBService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thumb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbDBServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ThumbDBService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbDBServiceServer).Delete(ctx, req.(*Thumb))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbDBService_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbDBServiceServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ThumbDBService/Page",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbDBServiceServer).Page(ctx, req.(*ThumbPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbDBService_UserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbUserCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbDBServiceServer).UserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ThumbDBService/UserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbDBServiceServer).UserCount(ctx, req.(*ThumbUserCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbDBService_UserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbDBServiceServer).UserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ThumbDBService/UserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbDBServiceServer).UserID(ctx, req.(*ThumbPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbDBService_GetForumCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbDBServiceServer).GetForumCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ThumbDBService/GetForumCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbDBServiceServer).GetForumCount(ctx, req.(*ThumbPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbDBService_GetCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbDBServiceServer).GetCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ThumbDBService/GetCommentCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbDBServiceServer).GetCommentCount(ctx, req.(*ThumbPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThumbDBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.ThumbDBService",
	HandlerType: (*ThumbDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ThumbDBService_Add_Handler,
		},
		{
			MethodName: "HasClick",
			Handler:    _ThumbDBService_HasClick_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ThumbDBService_Delete_Handler,
		},
		{
			MethodName: "Page",
			Handler:    _ThumbDBService_Page_Handler,
		},
		{
			MethodName: "UserCount",
			Handler:    _ThumbDBService_UserCount_Handler,
		},
		{
			MethodName: "UserID",
			Handler:    _ThumbDBService_UserID_Handler,
		},
		{
			MethodName: "GetForumCount",
			Handler:    _ThumbDBService_GetForumCount_Handler,
		},
		{
			MethodName: "GetCommentCount",
			Handler:    _ThumbDBService_GetCommentCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thumb.proto",
}

func (m *HasClickResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasClickResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasClickResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State {
		i--
		if m.State {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetThumbCountResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetThumbCountResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetThumbCountResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThumbUserIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThumbUserIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThumbUserIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserID) > 0 {
		dAtA2 := make([]byte, len(m.UserID)*10)
		var j1 int
		for _, num1 := range m.UserID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintThumb(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThumbUserCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThumbUserCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThumbUserCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThumbUserCountRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThumbUserCountRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThumbUserCountRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThumbPageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThumbPageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThumbPageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserInfo) > 0 {
		for iNdEx := len(m.UserInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThumb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Thumbs) > 0 {
		for iNdEx := len(m.Thumbs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Thumbs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThumb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ThumbPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThumbPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThumbPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Friends) > 0 {
		dAtA4 := make([]byte, len(m.Friends)*10)
		var j3 int
		for _, num1 := range m.Friends {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintThumb(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreateBy != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x30
	}
	if m.ThumbID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.ThumbID))
		i--
		dAtA[i] = 0x28
	}
	if m.UpDown != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.UpDown))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.CommentID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.CommentID))
		i--
		dAtA[i] = 0x10
	}
	if m.ForumID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Thumb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Thumb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Thumb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThumb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CreateBy != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateAt != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x40
	}
	if m.UpDown != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.UpDown))
		i--
		dAtA[i] = 0x38
	}
	if m.CommentUID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.CommentUID))
		i--
		dAtA[i] = 0x30
	}
	if m.CommentID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.CommentID))
		i--
		dAtA[i] = 0x28
	}
	if m.ForumUID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.ForumUID))
		i--
		dAtA[i] = 0x20
	}
	if m.ForumID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if m.ThumbID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.ThumbID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintThumb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintThumb(dAtA []byte, offset int, v uint64) int {
	offset -= sovThumb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HasClickResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetThumbCountResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovThumb(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThumbUserIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserID) > 0 {
		l = 0
		for _, e := range m.UserID {
			l += sovThumb(uint64(e))
		}
		n += 1 + sovThumb(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThumbUserCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovThumb(uint64(m.UserID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThumbUserCountRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovThumb(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThumbPageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Thumbs) > 0 {
		for _, e := range m.Thumbs {
			l = e.Size()
			n += 1 + l + sovThumb(uint64(l))
		}
	}
	if len(m.UserInfo) > 0 {
		for _, e := range m.UserInfo {
			l = e.Size()
			n += 1 + l + sovThumb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThumbPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForumID != 0 {
		n += 1 + sovThumb(uint64(m.ForumID))
	}
	if m.CommentID != 0 {
		n += 1 + sovThumb(uint64(m.CommentID))
	}
	if m.Limit != 0 {
		n += 1 + sovThumb(uint64(m.Limit))
	}
	if m.UpDown != 0 {
		n += 1 + sovThumb(uint64(m.UpDown))
	}
	if m.ThumbID != 0 {
		n += 1 + sovThumb(uint64(m.ThumbID))
	}
	if m.CreateBy != 0 {
		n += 1 + sovThumb(uint64(m.CreateBy))
	}
	if len(m.Friends) > 0 {
		l = 0
		for _, e := range m.Friends {
			l += sovThumb(uint64(e))
		}
		n += 1 + sovThumb(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Thumb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovThumb(uint64(m.ID))
	}
	if m.ThumbID != 0 {
		n += 1 + sovThumb(uint64(m.ThumbID))
	}
	if m.ForumID != 0 {
		n += 1 + sovThumb(uint64(m.ForumID))
	}
	if m.ForumUID != 0 {
		n += 1 + sovThumb(uint64(m.ForumUID))
	}
	if m.CommentID != 0 {
		n += 1 + sovThumb(uint64(m.CommentID))
	}
	if m.CommentUID != 0 {
		n += 1 + sovThumb(uint64(m.CommentUID))
	}
	if m.UpDown != 0 {
		n += 1 + sovThumb(uint64(m.UpDown))
	}
	if m.CreateAt != 0 {
		n += 1 + sovThumb(uint64(m.CreateAt))
	}
	if m.CreateBy != 0 {
		n += 1 + sovThumb(uint64(m.CreateBy))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovThumb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovThumb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozThumb(x uint64) (n int) {
	return sovThumb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HasClickResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasClickResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasClickResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipThumb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetThumbCountResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetThumbCountResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetThumbCountResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThumb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThumbUserIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThumbUserIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThumbUserIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThumb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserID = append(m.UserID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThumb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthThumb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthThumb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserID) == 0 {
					m.UserID = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThumb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserID = append(m.UserID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThumb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThumbUserCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThumbUserCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThumbUserCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThumb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThumbUserCountRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThumbUserCountRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThumbUserCountRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThumb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThumbPageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThumbPageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThumbPageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThumb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThumb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbs = append(m.Thumbs, &Thumb{})
			if err := m.Thumbs[len(m.Thumbs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThumb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThumb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfo = append(m.UserInfo, &imapigateway.UserInfo{})
			if err := m.UserInfo[len(m.UserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThumb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThumbPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThumbPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThumbPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentID", wireType)
			}
			m.CommentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpDown", wireType)
			}
			m.UpDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpDown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbID", wireType)
			}
			m.ThumbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThumb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Friends = append(m.Friends, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThumb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthThumb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthThumb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Friends) == 0 {
					m.Friends = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThumb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Friends = append(m.Friends, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThumb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Thumb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thumb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thumb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbID", wireType)
			}
			m.ThumbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumUID", wireType)
			}
			m.ForumUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumUID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentID", wireType)
			}
			m.CommentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentUID", wireType)
			}
			m.CommentUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentUID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpDown", wireType)
			}
			m.UpDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpDown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThumb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThumb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &imapigateway.UserInfo{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThumb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThumb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThumb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThumb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThumb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThumb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupThumb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthThumb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthThumb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThumb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupThumb = fmt.Errorf("proto: unexpected end of group")
)
