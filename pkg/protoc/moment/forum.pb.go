// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: forum.proto

package moment

import (
	context "context"
	encoding_binary "encoding/binary"
	"encoding/json"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	"gitlab.moments.im/pkg/protoc/imapigateway"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ForumGetWithMediaReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	FriendID             int32    `protobuf:"varint,2,opt,name=FriendID,proto3" json:"FriendID,omitempty"`
	ForumID              int64    `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumGetWithMediaReq) Reset()         { *m = ForumGetWithMediaReq{} }
func (m *ForumGetWithMediaReq) String() string { return proto.CompactTextString(m) }
func (*ForumGetWithMediaReq) ProtoMessage()    {}
func (*ForumGetWithMediaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{0}
}
func (m *ForumGetWithMediaReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumGetWithMediaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumGetWithMediaReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumGetWithMediaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumGetWithMediaReq.Merge(m, src)
}
func (m *ForumGetWithMediaReq) XXX_Size() int {
	return m.Size()
}
func (m *ForumGetWithMediaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumGetWithMediaReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForumGetWithMediaReq proto.InternalMessageInfo

func (m *ForumGetWithMediaReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ForumGetWithMediaReq) GetFriendID() int32 {
	if m != nil {
		return m.FriendID
	}
	return 0
}

func (m *ForumGetWithMediaReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ForumGetWithMediaReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ForumGetWithMediaResp struct {
	Forums               []*ForumFriend `protobuf:"bytes,1,rep,name=Forums,proto3" json:"Forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ForumGetWithMediaResp) Reset()         { *m = ForumGetWithMediaResp{} }
func (m *ForumGetWithMediaResp) String() string { return proto.CompactTextString(m) }
func (*ForumGetWithMediaResp) ProtoMessage()    {}
func (*ForumGetWithMediaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{1}
}
func (m *ForumGetWithMediaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumGetWithMediaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumGetWithMediaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumGetWithMediaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumGetWithMediaResp.Merge(m, src)
}
func (m *ForumGetWithMediaResp) XXX_Size() int {
	return m.Size()
}
func (m *ForumGetWithMediaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumGetWithMediaResp.DiscardUnknown(m)
}

var xxx_messageInfo_ForumGetWithMediaResp proto.InternalMessageInfo

func (m *ForumGetWithMediaResp) GetForums() []*ForumFriend {
	if m != nil {
		return m.Forums
	}
	return nil
}

type ForumOtherMainByMouthReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	FriendID             int32    `protobuf:"varint,2,opt,name=FriendID,proto3" json:"FriendID,omitempty"`
	StartAt              int64    `protobuf:"varint,3,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	EndAt                int64    `protobuf:"varint,4,opt,name=EndAt,proto3" json:"EndAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumOtherMainByMouthReq) Reset()         { *m = ForumOtherMainByMouthReq{} }
func (m *ForumOtherMainByMouthReq) String() string { return proto.CompactTextString(m) }
func (*ForumOtherMainByMouthReq) ProtoMessage()    {}
func (*ForumOtherMainByMouthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{2}
}
func (m *ForumOtherMainByMouthReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumOtherMainByMouthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumOtherMainByMouthReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumOtherMainByMouthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumOtherMainByMouthReq.Merge(m, src)
}
func (m *ForumOtherMainByMouthReq) XXX_Size() int {
	return m.Size()
}
func (m *ForumOtherMainByMouthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumOtherMainByMouthReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForumOtherMainByMouthReq proto.InternalMessageInfo

func (m *ForumOtherMainByMouthReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ForumOtherMainByMouthReq) GetFriendID() int32 {
	if m != nil {
		return m.FriendID
	}
	return 0
}

func (m *ForumOtherMainByMouthReq) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *ForumOtherMainByMouthReq) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

type ForumOtherMainByMouthResp struct {
	Forums               []*ForumFriend `protobuf:"bytes,1,rep,name=Forums,proto3" json:"Forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ForumOtherMainByMouthResp) Reset()         { *m = ForumOtherMainByMouthResp{} }
func (m *ForumOtherMainByMouthResp) String() string { return proto.CompactTextString(m) }
func (*ForumOtherMainByMouthResp) ProtoMessage()    {}
func (*ForumOtherMainByMouthResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{3}
}
func (m *ForumOtherMainByMouthResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumOtherMainByMouthResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumOtherMainByMouthResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumOtherMainByMouthResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumOtherMainByMouthResp.Merge(m, src)
}
func (m *ForumOtherMainByMouthResp) XXX_Size() int {
	return m.Size()
}
func (m *ForumOtherMainByMouthResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumOtherMainByMouthResp.DiscardUnknown(m)
}

var xxx_messageInfo_ForumOtherMainByMouthResp proto.InternalMessageInfo

func (m *ForumOtherMainByMouthResp) GetForums() []*ForumFriend {
	if m != nil {
		return m.Forums
	}
	return nil
}

type OtherMainPageReq struct {
	FriendID             int32    `protobuf:"varint,1,opt,name=FriendID,proto3" json:"FriendID,omitempty"`
	UserID               int32    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ForumID              int64    `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	RoundNum             int32    `protobuf:"varint,4,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	Limit                int32    `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OtherMainPageReq) Reset()         { *m = OtherMainPageReq{} }
func (m *OtherMainPageReq) String() string { return proto.CompactTextString(m) }
func (*OtherMainPageReq) ProtoMessage()    {}
func (*OtherMainPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{4}
}
func (m *OtherMainPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OtherMainPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OtherMainPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OtherMainPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherMainPageReq.Merge(m, src)
}
func (m *OtherMainPageReq) XXX_Size() int {
	return m.Size()
}
func (m *OtherMainPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherMainPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_OtherMainPageReq proto.InternalMessageInfo

func (m *OtherMainPageReq) GetFriendID() int32 {
	if m != nil {
		return m.FriendID
	}
	return 0
}

func (m *OtherMainPageReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *OtherMainPageReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *OtherMainPageReq) GetRoundNum() int32 {
	if m != nil {
		return m.RoundNum
	}
	return 0
}

func (m *OtherMainPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type OtherMainPageRep struct {
	Forums               []*ForumFriend `protobuf:"bytes,1,rep,name=Forums,proto3" json:"Forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *OtherMainPageRep) Reset()         { *m = OtherMainPageRep{} }
func (m *OtherMainPageRep) String() string { return proto.CompactTextString(m) }
func (*OtherMainPageRep) ProtoMessage()    {}
func (*OtherMainPageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{5}
}
func (m *OtherMainPageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OtherMainPageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OtherMainPageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OtherMainPageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherMainPageRep.Merge(m, src)
}
func (m *OtherMainPageRep) XXX_Size() int {
	return m.Size()
}
func (m *OtherMainPageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherMainPageRep.DiscardUnknown(m)
}

var xxx_messageInfo_OtherMainPageRep proto.InternalMessageInfo

func (m *OtherMainPageRep) GetForums() []*ForumFriend {
	if m != nil {
		return m.Forums
	}
	return nil
}

type SelfMainPageReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ForumID              int64    `protobuf:"varint,2,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelfMainPageReq) Reset()         { *m = SelfMainPageReq{} }
func (m *SelfMainPageReq) String() string { return proto.CompactTextString(m) }
func (*SelfMainPageReq) ProtoMessage()    {}
func (*SelfMainPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{6}
}
func (m *SelfMainPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelfMainPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelfMainPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelfMainPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelfMainPageReq.Merge(m, src)
}
func (m *SelfMainPageReq) XXX_Size() int {
	return m.Size()
}
func (m *SelfMainPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelfMainPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelfMainPageReq proto.InternalMessageInfo

func (m *SelfMainPageReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *SelfMainPageReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *SelfMainPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SelfMainPageRep struct {
	Forums               []*ForumFriend `protobuf:"bytes,1,rep,name=Forums,proto3" json:"Forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SelfMainPageRep) Reset()         { *m = SelfMainPageRep{} }
func (m *SelfMainPageRep) String() string { return proto.CompactTextString(m) }
func (*SelfMainPageRep) ProtoMessage()    {}
func (*SelfMainPageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{7}
}
func (m *SelfMainPageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelfMainPageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelfMainPageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelfMainPageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelfMainPageRep.Merge(m, src)
}
func (m *SelfMainPageRep) XXX_Size() int {
	return m.Size()
}
func (m *SelfMainPageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_SelfMainPageRep.DiscardUnknown(m)
}

var xxx_messageInfo_SelfMainPageRep proto.InternalMessageInfo

func (m *SelfMainPageRep) GetForums() []*ForumFriend {
	if m != nil {
		return m.Forums
	}
	return nil
}

type FollowFourmPageReq struct {
	CreateAt             int32    `protobuf:"varint,1,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UserID               int32    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	CommentLimit         int32    `protobuf:"varint,4,opt,name=CommentLimit,proto3" json:"CommentLimit,omitempty"`
	ThumbLimit           int32    `protobuf:"varint,5,opt,name=ThumbLimit,proto3" json:"ThumbLimit,omitempty"`
	ReplayLimit          int32    `protobuf:"varint,6,opt,name=ReplayLimit,proto3" json:"ReplayLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowFourmPageReq) Reset()         { *m = FollowFourmPageReq{} }
func (m *FollowFourmPageReq) String() string { return proto.CompactTextString(m) }
func (*FollowFourmPageReq) ProtoMessage()    {}
func (*FollowFourmPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{8}
}
func (m *FollowFourmPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowFourmPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowFourmPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowFourmPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowFourmPageReq.Merge(m, src)
}
func (m *FollowFourmPageReq) XXX_Size() int {
	return m.Size()
}
func (m *FollowFourmPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowFourmPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_FollowFourmPageReq proto.InternalMessageInfo

func (m *FollowFourmPageReq) GetCreateAt() int32 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *FollowFourmPageReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *FollowFourmPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FollowFourmPageReq) GetCommentLimit() int32 {
	if m != nil {
		return m.CommentLimit
	}
	return 0
}

func (m *FollowFourmPageReq) GetThumbLimit() int32 {
	if m != nil {
		return m.ThumbLimit
	}
	return 0
}

func (m *FollowFourmPageReq) GetReplayLimit() int32 {
	if m != nil {
		return m.ReplayLimit
	}
	return 0
}

type FollowFourmPageRep struct {
	Forums               []*ForumFriend `protobuf:"bytes,1,rep,name=Forums,proto3" json:"Forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FollowFourmPageRep) Reset()         { *m = FollowFourmPageRep{} }
func (m *FollowFourmPageRep) String() string { return proto.CompactTextString(m) }
func (*FollowFourmPageRep) ProtoMessage()    {}
func (*FollowFourmPageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{9}
}
func (m *FollowFourmPageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowFourmPageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowFourmPageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowFourmPageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowFourmPageRep.Merge(m, src)
}
func (m *FollowFourmPageRep) XXX_Size() int {
	return m.Size()
}
func (m *FollowFourmPageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowFourmPageRep.DiscardUnknown(m)
}

var xxx_messageInfo_FollowFourmPageRep proto.InternalMessageInfo

func (m *FollowFourmPageRep) GetForums() []*ForumFriend {
	if m != nil {
		return m.Forums
	}
	return nil
}

type RecommendPageReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ForumID              int64    `protobuf:"varint,2,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecommendPageReq) Reset()         { *m = RecommendPageReq{} }
func (m *RecommendPageReq) String() string { return proto.CompactTextString(m) }
func (*RecommendPageReq) ProtoMessage()    {}
func (*RecommendPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{10}
}
func (m *RecommendPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecommendPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecommendPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecommendPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecommendPageReq.Merge(m, src)
}
func (m *RecommendPageReq) XXX_Size() int {
	return m.Size()
}
func (m *RecommendPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecommendPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecommendPageReq proto.InternalMessageInfo

func (m *RecommendPageReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *RecommendPageReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *RecommendPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type RecommendPageRep struct {
	Forums               []*ForumRecommend `protobuf:"bytes,1,rep,name=Forums,proto3" json:"Forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecommendPageRep) Reset()         { *m = RecommendPageRep{} }
func (m *RecommendPageRep) String() string { return proto.CompactTextString(m) }
func (*RecommendPageRep) ProtoMessage()    {}
func (*RecommendPageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{11}
}
func (m *RecommendPageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecommendPageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecommendPageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecommendPageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecommendPageRep.Merge(m, src)
}
func (m *RecommendPageRep) XXX_Size() int {
	return m.Size()
}
func (m *RecommendPageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_RecommendPageRep.DiscardUnknown(m)
}

var xxx_messageInfo_RecommendPageRep proto.InternalMessageInfo

func (m *RecommendPageRep) GetForums() []*ForumRecommend {
	if m != nil {
		return m.Forums
	}
	return nil
}

type ForumGetReq struct {
	//操作人
	CreateBy int32 `protobuf:"varint,1,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	//帖子号
	ForumID int64 `protobuf:"varint,2,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	// 发帖人
	ForumUser int32 `protobuf:"varint,3,opt,name=ForumUser,proto3" json:"ForumUser,omitempty"`
	//  int64 CommentLimit     =4;
	//  string CommentSort = 5;
	//  string CommentOrder = 6;
	//ReplayLimit 回复条数
	//  int64 ReplayLimit     =7;
	//  string ReplaySort = 8;
	//  string ReplayOrder = 9;
	//  bool IsFriend = 10;
	//  int64 ThumbupLimit =11;
	Friends              []int32  `protobuf:"varint,12,rep,packed,name=Friends,proto3" json:"Friends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumGetReq) Reset()         { *m = ForumGetReq{} }
func (m *ForumGetReq) String() string { return proto.CompactTextString(m) }
func (*ForumGetReq) ProtoMessage()    {}
func (*ForumGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{12}
}
func (m *ForumGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumGetReq.Merge(m, src)
}
func (m *ForumGetReq) XXX_Size() int {
	return m.Size()
}
func (m *ForumGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForumGetReq proto.InternalMessageInfo

func (m *ForumGetReq) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *ForumGetReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ForumGetReq) GetForumUser() int32 {
	if m != nil {
		return m.ForumUser
	}
	return 0
}

func (m *ForumGetReq) GetFriends() []int32 {
	if m != nil {
		return m.Friends
	}
	return nil
}

type ParticipatingFriendsMsg struct {
	ForumID              int64    `protobuf:"varint,1,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	Friends              []int32  `protobuf:"varint,2,rep,packed,name=friends,proto3" json:"friends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParticipatingFriendsMsg) Reset()         { *m = ParticipatingFriendsMsg{} }
func (m *ParticipatingFriendsMsg) String() string { return proto.CompactTextString(m) }
func (*ParticipatingFriendsMsg) ProtoMessage()    {}
func (*ParticipatingFriendsMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{13}
}
func (m *ParticipatingFriendsMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipatingFriendsMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipatingFriendsMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipatingFriendsMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipatingFriendsMsg.Merge(m, src)
}
func (m *ParticipatingFriendsMsg) XXX_Size() int {
	return m.Size()
}
func (m *ParticipatingFriendsMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipatingFriendsMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipatingFriendsMsg proto.InternalMessageInfo

func (m *ParticipatingFriendsMsg) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ParticipatingFriendsMsg) GetFriends() []int32 {
	if m != nil {
		return m.Friends
	}
	return nil
}

type ForumFriendPageReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ForumID              int64    `protobuf:"varint,2,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumFriendPageReq) Reset()         { *m = ForumFriendPageReq{} }
func (m *ForumFriendPageReq) String() string { return proto.CompactTextString(m) }
func (*ForumFriendPageReq) ProtoMessage()    {}
func (*ForumFriendPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{14}
}
func (m *ForumFriendPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumFriendPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumFriendPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumFriendPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumFriendPageReq.Merge(m, src)
}
func (m *ForumFriendPageReq) XXX_Size() int {
	return m.Size()
}
func (m *ForumFriendPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumFriendPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForumFriendPageReq proto.InternalMessageInfo

func (m *ForumFriendPageReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ForumFriendPageReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ForumFriendPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ForumFriendPageRep struct {
	Forums               []*ForumFriend `protobuf:"bytes,1,rep,name=Forums,proto3" json:"Forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ForumFriendPageRep) Reset()         { *m = ForumFriendPageRep{} }
func (m *ForumFriendPageRep) String() string { return proto.CompactTextString(m) }
func (*ForumFriendPageRep) ProtoMessage()    {}
func (*ForumFriendPageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{15}
}
func (m *ForumFriendPageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumFriendPageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumFriendPageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumFriendPageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumFriendPageRep.Merge(m, src)
}
func (m *ForumFriendPageRep) XXX_Size() int {
	return m.Size()
}
func (m *ForumFriendPageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumFriendPageRep.DiscardUnknown(m)
}

var xxx_messageInfo_ForumFriendPageRep proto.InternalMessageInfo

func (m *ForumFriendPageRep) GetForums() []*ForumFriend {
	if m != nil {
		return m.Forums
	}
	return nil
}

type ForumTopicPageReq struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
	UserID               int32    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ForumID              int64    `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumTopicPageReq) Reset()         { *m = ForumTopicPageReq{} }
func (m *ForumTopicPageReq) String() string { return proto.CompactTextString(m) }
func (*ForumTopicPageReq) ProtoMessage()    {}
func (*ForumTopicPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{16}
}
func (m *ForumTopicPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumTopicPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumTopicPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumTopicPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumTopicPageReq.Merge(m, src)
}
func (m *ForumTopicPageReq) XXX_Size() int {
	return m.Size()
}
func (m *ForumTopicPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumTopicPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForumTopicPageReq proto.InternalMessageInfo

func (m *ForumTopicPageReq) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *ForumTopicPageReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ForumTopicPageReq) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ForumTopicPageReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ForumTopicPageRep struct {
	Forums               []*ForumTopic `protobuf:"bytes,1,rep,name=Forums,proto3" json:"Forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ForumTopicPageRep) Reset()         { *m = ForumTopicPageRep{} }
func (m *ForumTopicPageRep) String() string { return proto.CompactTextString(m) }
func (*ForumTopicPageRep) ProtoMessage()    {}
func (*ForumTopicPageRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{17}
}
func (m *ForumTopicPageRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumTopicPageRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumTopicPageRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumTopicPageRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumTopicPageRep.Merge(m, src)
}
func (m *ForumTopicPageRep) XXX_Size() int {
	return m.Size()
}
func (m *ForumTopicPageRep) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumTopicPageRep.DiscardUnknown(m)
}

var xxx_messageInfo_ForumTopicPageRep proto.InternalMessageInfo

func (m *ForumTopicPageRep) GetForums() []*ForumTopic {
	if m != nil {
		return m.Forums
	}
	return nil
}

type ForumIgnore struct {
	// @inject_tag: db:"id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" db:"id"`
	// @inject_tag: db:"ignore_id"
	IgnoreID int64 `protobuf:"varint,2,opt,name=IgnoreID,proto3" json:"IgnoreID,omitempty" db:"ignore_id"`
	// @inject_tag: db:"forum_id"
	ForumID int64 `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty" db:"forum_id"`
	// CreateBy 用户编号
	// @inject_tag: db:"create_by"
	CreateBy int32 `protobuf:"varint,4,opt,name=CreateBy,proto3" json:"CreateBy,omitempty" db:"create_by"`
	// CreateAt 发贴时间
	// @inject_tag: db:"create_at"
	CreateAt             int64    `protobuf:"varint,5,opt,name=CreateAt,proto3" json:"CreateAt,omitempty" db:"create_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumIgnore) Reset()         { *m = ForumIgnore{} }
func (m *ForumIgnore) String() string { return proto.CompactTextString(m) }
func (*ForumIgnore) ProtoMessage()    {}
func (*ForumIgnore) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{18}
}
func (m *ForumIgnore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumIgnore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumIgnore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumIgnore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumIgnore.Merge(m, src)
}
func (m *ForumIgnore) XXX_Size() int {
	return m.Size()
}
func (m *ForumIgnore) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumIgnore.DiscardUnknown(m)
}

var xxx_messageInfo_ForumIgnore proto.InternalMessageInfo

func (m *ForumIgnore) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ForumIgnore) GetIgnoreID() int64 {
	if m != nil {
		return m.IgnoreID
	}
	return 0
}

func (m *ForumIgnore) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ForumIgnore) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *ForumIgnore) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

type ForumRecommend struct {
	//
	// @inject_tag: db:"id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" db:"id"`
	//发贴编号
	// @inject_tag: db:"forum_id"
	ForumID int64 `protobuf:"varint,2,opt,name=ForumID,proto3" json:"ForumID,omitempty" db:"forum_id"`
	//帖子类型 同城 足球 电影。。。
	// @inject_tag: db:"type"
	Type int32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty" db:"type"`
	//1纯文字 2图片 3视频
	// @inject_tag: db:"content_type"
	ContentType int32 `protobuf:"varint,4,opt,name=ContentType,proto3" json:"ContentType,omitempty" db:"content_type"`
	//发贴正文
	// @inject_tag: db:"content"
	Content string `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty" db:"content"`
	//经度
	// @inject_tag: db:"longitude"
	Longitude float64 `protobuf:"fixed64,6,opt,name=Longitude,proto3" json:"Longitude,omitempty" db:"longitude"`
	//纬度
	// @inject_tag: db:"latitude"
	Latitude float64 `protobuf:"fixed64,7,opt,name=Latitude,proto3" json:"Latitude,omitempty" db:"latitude"`
	//地理位置城市
	// @inject_tag: db:"location_city"
	LocationCity string `protobuf:"bytes,8,opt,name=LocationCity,proto3" json:"LocationCity,omitempty" db:"location_city"`
	//地理位置名称
	// @inject_tag: db:"location_name"
	LocationName string `protobuf:"bytes,9,opt,name=LocationName,proto3" json:"LocationName,omitempty" db:"location_name"`
	//地理位置名称详细名称
	// @inject_tag: db:"location_address"
	LocationAddress string `protobuf:"bytes,10,opt,name=LocationAddress,proto3" json:"LocationAddress,omitempty" db:"location_address"`
	//发贴时间
	// @inject_tag: db:"create_at"
	CreateAt int64 `protobuf:"varint,11,opt,name=CreateAt,proto3" json:"CreateAt,omitempty" db:"create_at"`
	//用户编号
	// @inject_tag: db:"create_by"
	CreateBy int32 `protobuf:"varint,12,opt,name=CreateBy,proto3" json:"CreateBy,omitempty" db:"create_by"`
	//内容解析@7 URL高亮
	// @inject_tag: db:"content_entity"
	ContentEntity string `protobuf:"bytes,13,opt,name=ContentEntity,proto3" json:"ContentEntity,omitempty" db:"content_entity"`
	//提及到
	// @inject_tag: db:"mention"
	Mention string `protobuf:"bytes,14,opt,name=Mention,proto3" json:"Mention,omitempty" db:"mention"`
	//话题
	// @inject_tag: db:"topic"
	Topic json.RawMessage `protobuf:"bytes,15,opt,name=Topic,proto3" json:"Topic,omitempty" db:"topic"`
	//点赞次数
	// @inject_tag: db:"thumb_up"
	ThumbUp int64 `protobuf:"varint,16,opt,name=ThumbUp,proto3" json:"ThumbUp,omitempty" db:"thumb_up"`
	//回复次数
	// @inject_tag: db:"comment_count"
	CommentCount int64 `protobuf:"varint,17,opt,name=CommentCount,proto3" json:"CommentCount,omitempty" db:"comment_count"`
	// 媒体文件
	Medias  []*Media     `protobuf:"bytes,18,rep,name=Medias,proto3" json:"Medias,omitempty"`
	Entitys []*HighLight `protobuf:"bytes,19,rep,name=Entitys,proto3" json:"Entitys,omitempty"`
	// HasThumb 是否点赞
	HasThumb bool `protobuf:"varint,20,opt,name=HasThumb,proto3" json:"HasThumb,omitempty"`
	//  HasFollow 是否关注
	HasFollow bool `protobuf:"varint,21,opt,name=HasFollow,proto3" json:"HasFollow,omitempty"`
	//ThumbUsers 点赞用户 默认给10条 如果有更多 请求点赞的page路由
	ThumbUsers []int32 `protobuf:"varint,22,rep,packed,name=ThumbUsers,proto3" json:"ThumbUsers,omitempty"`
	// Comments 评论
	Comments []*Comment `protobuf:"bytes,23,rep,name=Comments,proto3" json:"Comments,omitempty"`
	//ThumbUserInfos 点赞人的用户信息
	ThumbUserInfos []*imapigateway.UserInfo `protobuf:"bytes,24,rep,name=ThumbUserInfos,proto3" json:"ThumbUserInfos,omitempty"`
	//Creator 发帖人
	Creator *imapigateway.UserInfo `protobuf:"bytes,25,opt,name=Creator,proto3" json:"Creator,omitempty"`
	//IsRecommend 是否推荐帖子
	IsRecommend bool `protobuf:"varint,26,opt,name=IsRecommend,proto3" json:"IsRecommend,omitempty"`
	//推荐帖子回复限制VIP等级
	LimitVIP             int32    `protobuf:"varint,27,opt,name=LimitVIP,proto3" json:"LimitVIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumRecommend) Reset()         { *m = ForumRecommend{} }
func (m *ForumRecommend) String() string { return proto.CompactTextString(m) }
func (*ForumRecommend) ProtoMessage()    {}
func (*ForumRecommend) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{19}
}
func (m *ForumRecommend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumRecommend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumRecommend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumRecommend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumRecommend.Merge(m, src)
}
func (m *ForumRecommend) XXX_Size() int {
	return m.Size()
}
func (m *ForumRecommend) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumRecommend.DiscardUnknown(m)
}

var xxx_messageInfo_ForumRecommend proto.InternalMessageInfo

func (m *ForumRecommend) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ForumRecommend) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ForumRecommend) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ForumRecommend) GetContentType() int32 {
	if m != nil {
		return m.ContentType
	}
	return 0
}

func (m *ForumRecommend) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ForumRecommend) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *ForumRecommend) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *ForumRecommend) GetLocationCity() string {
	if m != nil {
		return m.LocationCity
	}
	return ""
}

func (m *ForumRecommend) GetLocationName() string {
	if m != nil {
		return m.LocationName
	}
	return ""
}

func (m *ForumRecommend) GetLocationAddress() string {
	if m != nil {
		return m.LocationAddress
	}
	return ""
}

func (m *ForumRecommend) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ForumRecommend) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *ForumRecommend) GetContentEntity() string {
	if m != nil {
		return m.ContentEntity
	}
	return ""
}

func (m *ForumRecommend) GetMention() string {
	if m != nil {
		return m.Mention
	}
	return ""
}

func (m *ForumRecommend) GetTopic() json.RawMessage {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *ForumRecommend) GetThumbUp() int64 {
	if m != nil {
		return m.ThumbUp
	}
	return 0
}

func (m *ForumRecommend) GetCommentCount() int64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *ForumRecommend) GetMedias() []*Media {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *ForumRecommend) GetEntitys() []*HighLight {
	if m != nil {
		return m.Entitys
	}
	return nil
}

func (m *ForumRecommend) GetHasThumb() bool {
	if m != nil {
		return m.HasThumb
	}
	return false
}

func (m *ForumRecommend) GetHasFollow() bool {
	if m != nil {
		return m.HasFollow
	}
	return false
}

func (m *ForumRecommend) GetThumbUsers() []int32 {
	if m != nil {
		return m.ThumbUsers
	}
	return nil
}

func (m *ForumRecommend) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *ForumRecommend) GetThumbUserInfos() []*imapigateway.UserInfo {
	if m != nil {
		return m.ThumbUserInfos
	}
	return nil
}

func (m *ForumRecommend) GetCreator() *imapigateway.UserInfo {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ForumRecommend) GetIsRecommend() bool {
	if m != nil {
		return m.IsRecommend
	}
	return false
}

func (m *ForumRecommend) GetLimitVIP() int32 {
	if m != nil {
		return m.LimitVIP
	}
	return 0
}

type ForumFriend struct {
	//
	// @inject_tag: db:"id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" db:"id"`
	//所属用户ID
	// @inject_tag: db:"user_id"
	UserID int32 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty" db:"user_id"`
	//发贴编号
	// @inject_tag: db:"forum_id"
	ForumID int64 `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty" db:"forum_id"`
	//帖子类型 同城 足球 电影。。。
	// @inject_tag: db:"type"
	Type int32 `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty" db:"type"`
	//1纯文字 2图片 3视频
	// @inject_tag: db:"content_type"
	ContentType int32 `protobuf:"varint,5,opt,name=ContentType,proto3" json:"ContentType,omitempty" db:"content_type"`
	//发贴正文
	// @inject_tag: db:"content"
	Content string `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty" db:"content"`
	//经度
	// @inject_tag: db:"longitude"
	Longitude float64 `protobuf:"fixed64,7,opt,name=Longitude,proto3" json:"Longitude,omitempty" db:"longitude"`
	//纬度
	// @inject_tag: db:"latitude"
	Latitude float64 `protobuf:"fixed64,8,opt,name=Latitude,proto3" json:"Latitude,omitempty" db:"latitude"`
	//地理位置城市
	// @inject_tag: db:"location_city"
	LocationCity string `protobuf:"bytes,9,opt,name=LocationCity,proto3" json:"LocationCity,omitempty" db:"location_city"`
	//地理位置名称
	// @inject_tag: db:"location_name"
	LocationName string `protobuf:"bytes,10,opt,name=LocationName,proto3" json:"LocationName,omitempty" db:"location_name"`
	//地理位置名称详细名称
	// @inject_tag: db:"location_address"
	LocationAddress string `protobuf:"bytes,11,opt,name=LocationAddress,proto3" json:"LocationAddress,omitempty" db:"location_address"`
	//发贴时间
	// @inject_tag: db:"create_at"
	CreateAt int64 `protobuf:"varint,12,opt,name=CreateAt,proto3" json:"CreateAt,omitempty" db:"create_at"`
	//用户编号
	// @inject_tag: db:"create_by"
	CreateBy int32 `protobuf:"varint,13,opt,name=CreateBy,proto3" json:"CreateBy,omitempty" db:"create_by"`
	//内容解析@7 URL高亮
	// @inject_tag: db:"content_entity"
	ContentEntity string `protobuf:"bytes,14,opt,name=ContentEntity,proto3" json:"ContentEntity,omitempty" db:"content_entity"`
	//提及到
	// @inject_tag: db:"mention"
	Mention string `protobuf:"bytes,15,opt,name=Mention,proto3" json:"Mention,omitempty" db:"mention"`
	//话题
	// @inject_tag: db:"topic"
	Topic json.RawMessage `protobuf:"bytes,16,opt,name=Topic,proto3" json:"Topic,omitempty" db:"topic"`
	//权限1公开2私密3粉丝4指定部分可见5不给谁看
	// @inject_tag: db:"permission"
	Permission int32 `protobuf:"varint,17,opt,name=Permission,proto3" json:"Permission,omitempty" db:"permission"`
	//特别用户
	// @inject_tag: db:"permission_user"
	PermissionUser string `protobuf:"bytes,18,opt,name=PermissionUser,proto3" json:"PermissionUser,omitempty" db:"permission_user"`
	//点赞次数
	// @inject_tag: db:"thumb_up"
	ThumbUp int64 `protobuf:"varint,19,opt,name=ThumbUp,proto3" json:"ThumbUp,omitempty" db:"thumb_up"`
	//回复次数
	// @inject_tag: db:"comment_count"
	CommentCount int64 `protobuf:"varint,20,opt,name=CommentCount,proto3" json:"CommentCount,omitempty" db:"comment_count"`
	//可见状态
	// @inject_tag: db:"view_state"
	ViewState int64 `protobuf:"varint,21,opt,name=ViewState,proto3" json:"ViewState,omitempty" db:"view_state"`
	// 媒体文件
	Medias  []*Media     `protobuf:"bytes,22,rep,name=Medias,proto3" json:"Medias,omitempty"`
	Entitys []*HighLight `protobuf:"bytes,23,rep,name=Entitys,proto3" json:"Entitys,omitempty"`
	// HasThumb 是否点赞
	HasThumb bool `protobuf:"varint,24,opt,name=HasThumb,proto3" json:"HasThumb,omitempty"`
	//  HasFollow 是否关注
	HasFollow bool `protobuf:"varint,25,opt,name=HasFollow,proto3" json:"HasFollow,omitempty"`
	//ThumbUsers 点赞用户 默认给10条 如果有更多 请求点赞的page路由
	ThumbUsers []int32 `protobuf:"varint,26,rep,packed,name=ThumbUsers,proto3" json:"ThumbUsers,omitempty"`
	// Comments 评论
	Comments []*Comment `protobuf:"bytes,27,rep,name=Comments,proto3" json:"Comments,omitempty"`
	//ThumbUserInfos 点赞人的用户信息
	ThumbUserInfos []*imapigateway.UserInfo `protobuf:"bytes,28,rep,name=ThumbUserInfos,proto3" json:"ThumbUserInfos,omitempty"`
	//Creator 发帖人
	Creator *imapigateway.UserInfo `protobuf:"bytes,29,opt,name=Creator,proto3" json:"Creator,omitempty"`
	//IsRecommend 是否推荐帖子
	IsRecommend bool `protobuf:"varint,30,opt,name=IsRecommend,proto3" json:"IsRecommend,omitempty"`
	//推荐帖子回复限制VIP等级
	LimitVIP             int32    `protobuf:"varint,31,opt,name=LimitVIP,proto3" json:"LimitVIP,omitempty"`
	RoundNum             int32    `protobuf:"varint,32,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumFriend) Reset()         { *m = ForumFriend{} }
func (m *ForumFriend) String() string { return proto.CompactTextString(m) }
func (*ForumFriend) ProtoMessage()    {}
func (*ForumFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{20}
}
func (m *ForumFriend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumFriend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumFriend.Merge(m, src)
}
func (m *ForumFriend) XXX_Size() int {
	return m.Size()
}
func (m *ForumFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumFriend.DiscardUnknown(m)
}

var xxx_messageInfo_ForumFriend proto.InternalMessageInfo

func (m *ForumFriend) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ForumFriend) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ForumFriend) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ForumFriend) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ForumFriend) GetContentType() int32 {
	if m != nil {
		return m.ContentType
	}
	return 0
}

func (m *ForumFriend) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ForumFriend) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *ForumFriend) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *ForumFriend) GetLocationCity() string {
	if m != nil {
		return m.LocationCity
	}
	return ""
}

func (m *ForumFriend) GetLocationName() string {
	if m != nil {
		return m.LocationName
	}
	return ""
}

func (m *ForumFriend) GetLocationAddress() string {
	if m != nil {
		return m.LocationAddress
	}
	return ""
}

func (m *ForumFriend) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ForumFriend) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *ForumFriend) GetContentEntity() string {
	if m != nil {
		return m.ContentEntity
	}
	return ""
}

func (m *ForumFriend) GetMention() string {
	if m != nil {
		return m.Mention
	}
	return ""
}

func (m *ForumFriend) GetTopic() json.RawMessage {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *ForumFriend) GetPermission() int32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

func (m *ForumFriend) GetPermissionUser() string {
	if m != nil {
		return m.PermissionUser
	}
	return ""
}

func (m *ForumFriend) GetThumbUp() int64 {
	if m != nil {
		return m.ThumbUp
	}
	return 0
}

func (m *ForumFriend) GetCommentCount() int64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *ForumFriend) GetViewState() int64 {
	if m != nil {
		return m.ViewState
	}
	return 0
}

func (m *ForumFriend) GetMedias() []*Media {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *ForumFriend) GetEntitys() []*HighLight {
	if m != nil {
		return m.Entitys
	}
	return nil
}

func (m *ForumFriend) GetHasThumb() bool {
	if m != nil {
		return m.HasThumb
	}
	return false
}

func (m *ForumFriend) GetHasFollow() bool {
	if m != nil {
		return m.HasFollow
	}
	return false
}

func (m *ForumFriend) GetThumbUsers() []int32 {
	if m != nil {
		return m.ThumbUsers
	}
	return nil
}

func (m *ForumFriend) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *ForumFriend) GetThumbUserInfos() []*imapigateway.UserInfo {
	if m != nil {
		return m.ThumbUserInfos
	}
	return nil
}

func (m *ForumFriend) GetCreator() *imapigateway.UserInfo {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ForumFriend) GetIsRecommend() bool {
	if m != nil {
		return m.IsRecommend
	}
	return false
}

func (m *ForumFriend) GetLimitVIP() int32 {
	if m != nil {
		return m.LimitVIP
	}
	return 0
}

func (m *ForumFriend) GetRoundNum() int32 {
	if m != nil {
		return m.RoundNum
	}
	return 0
}

type ForumTopic struct {
	//
	// @inject_tag: db:"id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" db:"id"`
	//所属用户id
	// @inject_tag: db:"topic_id"
	TopicID int64 `protobuf:"varint,2,opt,name=TopicID,proto3" json:"TopicID,omitempty" db:"topic_id"`
	//发贴编号
	// @inject_tag: db:"forum_id"
	ForumID int64 `protobuf:"varint,3,opt,name=ForumID,proto3" json:"ForumID,omitempty" db:"forum_id"`
	//帖子类型 同城 足球 电影。。。
	// @inject_tag: db:"type"
	Type int32 `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty" db:"type"`
	//1纯文字 2图片 3视频
	// @inject_tag: db:"content_type"
	ContentType int32 `protobuf:"varint,5,opt,name=ContentType,proto3" json:"ContentType,omitempty" db:"content_type"`
	//发贴正文
	// @inject_tag: db:"content"
	Content string `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty" db:"content"`
	//经度
	// @inject_tag: db:"longitude"
	Longitude float64 `protobuf:"fixed64,7,opt,name=Longitude,proto3" json:"Longitude,omitempty" db:"longitude"`
	//纬度
	// @inject_tag: db:"latitude"
	Latitude float64 `protobuf:"fixed64,8,opt,name=Latitude,proto3" json:"Latitude,omitempty" db:"latitude"`
	//地理位置城市
	// @inject_tag: db:"location_city"
	LocationCity string `protobuf:"bytes,9,opt,name=LocationCity,proto3" json:"LocationCity,omitempty" db:"location_city"`
	//地理位置名称
	// @inject_tag: db:"location_name"
	LocationName string `protobuf:"bytes,10,opt,name=LocationName,proto3" json:"LocationName,omitempty" db:"location_name"`
	//地理位置名称详细名称
	// @inject_tag: db:"location_address"
	LocationAddress string `protobuf:"bytes,11,opt,name=LocationAddress,proto3" json:"LocationAddress,omitempty" db:"location_address"`
	//发贴时间
	// @inject_tag: db:"create_at"
	CreateAt int64 `protobuf:"varint,12,opt,name=CreateAt,proto3" json:"CreateAt,omitempty" db:"create_at"`
	//用户编号
	// @inject_tag: db:"create_by"
	CreateBy int32 `protobuf:"varint,13,opt,name=CreateBy,proto3" json:"CreateBy,omitempty" db:"create_by"`
	//内容解析@7 URL高亮
	// @inject_tag: db:"content_entity"
	ContentEntity string `protobuf:"bytes,14,opt,name=ContentEntity,proto3" json:"ContentEntity,omitempty" db:"content_entity"`
	//提及到
	// @inject_tag: db:"mention"
	Mention string `protobuf:"bytes,15,opt,name=Mention,proto3" json:"Mention,omitempty" db:"mention"`
	//话题
	// @inject_tag: db:"topic"
	Topic json.RawMessage `protobuf:"bytes,16,opt,name=Topic,proto3" json:"Topic,omitempty" db:"topic"`
	//点赞次数
	// @inject_tag: db:"thumb_up"
	ThumbUp int64 `protobuf:"varint,17,opt,name=ThumbUp,proto3" json:"ThumbUp,omitempty" db:"thumb_up"`
	//回复次数
	// @inject_tag: db:"comment_count"
	CommentCount int64 `protobuf:"varint,18,opt,name=CommentCount,proto3" json:"CommentCount,omitempty" db:"comment_count"`
	// 媒体文件
	Medias  []*Media     `protobuf:"bytes,19,rep,name=Medias,proto3" json:"Medias,omitempty"`
	Entitys []*HighLight `protobuf:"bytes,20,rep,name=Entitys,proto3" json:"Entitys,omitempty"`
	// HasThumb 是否点赞
	HasThumb bool `protobuf:"varint,21,opt,name=HasThumb,proto3" json:"HasThumb,omitempty"`
	//  HasFollow 是否关注
	HasFollow bool `protobuf:"varint,22,opt,name=HasFollow,proto3" json:"HasFollow,omitempty"`
	//ThumbUsers 点赞用户 默认给10条 如果有更多 请求点赞的page路由
	ThumbUsers []int32 `protobuf:"varint,23,rep,packed,name=ThumbUsers,proto3" json:"ThumbUsers,omitempty"`
	// Comments 评论
	Comments []*Comment `protobuf:"bytes,24,rep,name=Comments,proto3" json:"Comments,omitempty"`
	//ThumbUserInfos 点赞人的用户信息
	ThumbUserInfos []*imapigateway.UserInfo `protobuf:"bytes,25,rep,name=ThumbUserInfos,proto3" json:"ThumbUserInfos,omitempty"`
	//Creator 发帖人
	Creator *imapigateway.UserInfo `protobuf:"bytes,26,opt,name=Creator,proto3" json:"Creator,omitempty"`
	//IsRecommend 是否推荐帖子
	IsRecommend bool `protobuf:"varint,27,opt,name=IsRecommend,proto3" json:"IsRecommend,omitempty"`
	//推荐帖子回复限制VIP等级
	LimitVIP             int32    `protobuf:"varint,28,opt,name=LimitVIP,proto3" json:"LimitVIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForumTopic) Reset()         { *m = ForumTopic{} }
func (m *ForumTopic) String() string { return proto.CompactTextString(m) }
func (*ForumTopic) ProtoMessage()    {}
func (*ForumTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a205334ecc361c, []int{21}
}
func (m *ForumTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForumTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForumTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForumTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForumTopic.Merge(m, src)
}
func (m *ForumTopic) XXX_Size() int {
	return m.Size()
}
func (m *ForumTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_ForumTopic.DiscardUnknown(m)
}

var xxx_messageInfo_ForumTopic proto.InternalMessageInfo

func (m *ForumTopic) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ForumTopic) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *ForumTopic) GetForumID() int64 {
	if m != nil {
		return m.ForumID
	}
	return 0
}

func (m *ForumTopic) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ForumTopic) GetContentType() int32 {
	if m != nil {
		return m.ContentType
	}
	return 0
}

func (m *ForumTopic) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ForumTopic) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *ForumTopic) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *ForumTopic) GetLocationCity() string {
	if m != nil {
		return m.LocationCity
	}
	return ""
}

func (m *ForumTopic) GetLocationName() string {
	if m != nil {
		return m.LocationName
	}
	return ""
}

func (m *ForumTopic) GetLocationAddress() string {
	if m != nil {
		return m.LocationAddress
	}
	return ""
}

func (m *ForumTopic) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ForumTopic) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *ForumTopic) GetContentEntity() string {
	if m != nil {
		return m.ContentEntity
	}
	return ""
}

func (m *ForumTopic) GetMention() string {
	if m != nil {
		return m.Mention
	}
	return ""
}

func (m *ForumTopic) GetTopic() json.RawMessage {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *ForumTopic) GetThumbUp() int64 {
	if m != nil {
		return m.ThumbUp
	}
	return 0
}

func (m *ForumTopic) GetCommentCount() int64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *ForumTopic) GetMedias() []*Media {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *ForumTopic) GetEntitys() []*HighLight {
	if m != nil {
		return m.Entitys
	}
	return nil
}

func (m *ForumTopic) GetHasThumb() bool {
	if m != nil {
		return m.HasThumb
	}
	return false
}

func (m *ForumTopic) GetHasFollow() bool {
	if m != nil {
		return m.HasFollow
	}
	return false
}

func (m *ForumTopic) GetThumbUsers() []int32 {
	if m != nil {
		return m.ThumbUsers
	}
	return nil
}

func (m *ForumTopic) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *ForumTopic) GetThumbUserInfos() []*imapigateway.UserInfo {
	if m != nil {
		return m.ThumbUserInfos
	}
	return nil
}

func (m *ForumTopic) GetCreator() *imapigateway.UserInfo {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ForumTopic) GetIsRecommend() bool {
	if m != nil {
		return m.IsRecommend
	}
	return false
}

func (m *ForumTopic) GetLimitVIP() int32 {
	if m != nil {
		return m.LimitVIP
	}
	return 0
}

func init() {
	proto.RegisterType((*ForumGetWithMediaReq)(nil), "moment.ForumGetWithMediaReq")
	proto.RegisterType((*ForumGetWithMediaResp)(nil), "moment.ForumGetWithMediaResp")
	proto.RegisterType((*ForumOtherMainByMouthReq)(nil), "moment.ForumOtherMainByMouthReq")
	proto.RegisterType((*ForumOtherMainByMouthResp)(nil), "moment.ForumOtherMainByMouthResp")
	proto.RegisterType((*OtherMainPageReq)(nil), "moment.OtherMainPageReq")
	proto.RegisterType((*OtherMainPageRep)(nil), "moment.OtherMainPageRep")
	proto.RegisterType((*SelfMainPageReq)(nil), "moment.SelfMainPageReq")
	proto.RegisterType((*SelfMainPageRep)(nil), "moment.SelfMainPageRep")
	proto.RegisterType((*FollowFourmPageReq)(nil), "moment.FollowFourmPageReq")
	proto.RegisterType((*FollowFourmPageRep)(nil), "moment.FollowFourmPageRep")
	proto.RegisterType((*RecommendPageReq)(nil), "moment.RecommendPageReq")
	proto.RegisterType((*RecommendPageRep)(nil), "moment.RecommendPageRep")
	proto.RegisterType((*ForumGetReq)(nil), "moment.ForumGetReq")
	proto.RegisterType((*ParticipatingFriendsMsg)(nil), "moment.ParticipatingFriendsMsg")
	proto.RegisterType((*ForumFriendPageReq)(nil), "moment.ForumFriendPageReq")
	proto.RegisterType((*ForumFriendPageRep)(nil), "moment.ForumFriendPageRep")
	proto.RegisterType((*ForumTopicPageReq)(nil), "moment.ForumTopicPageReq")
	proto.RegisterType((*ForumTopicPageRep)(nil), "moment.ForumTopicPageRep")
	proto.RegisterType((*ForumIgnore)(nil), "moment.ForumIgnore")
	proto.RegisterType((*ForumRecommend)(nil), "moment.ForumRecommend")
	proto.RegisterType((*ForumFriend)(nil), "moment.ForumFriend")
	proto.RegisterType((*ForumTopic)(nil), "moment.ForumTopic")
}

func init() { proto.RegisterFile("forum.proto", fileDescriptor_e7a205334ecc361c) }

var fileDescriptor_e7a205334ecc361c = []byte{
	// 1473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xdd, 0x6e, 0xdc, 0xc4,
	0x17, 0xaf, 0xb3, 0xd9, 0xaf, 0xb3, 0x9b, 0xaf, 0x49, 0xba, 0x99, 0xb8, 0x69, 0xba, 0x7f, 0xeb,
	0x0f, 0x8a, 0xa8, 0x14, 0x41, 0x8b, 0x04, 0x12, 0x52, 0xcb, 0x7e, 0x34, 0xcd, 0x4a, 0xd9, 0x12,
	0x39, 0x6d, 0x11, 0x15, 0x42, 0x72, 0xd7, 0x93, 0x5d, 0x8b, 0xac, 0xbd, 0xd8, 0xb3, 0x44, 0x0b,
	0x12, 0x2f, 0x80, 0xb8, 0xe1, 0x15, 0xe0, 0x51, 0xb8, 0xe0, 0x92, 0x47, 0x40, 0x7d, 0x11, 0xd0,
	0x7c, 0xf8, 0x33, 0xb6, 0x13, 0x87, 0x5e, 0x70, 0xc1, 0x9d, 0xcf, 0x99, 0x33, 0x67, 0xce, 0x99,
	0x73, 0x7e, 0x3f, 0xcf, 0x0c, 0x34, 0xce, 0x1c, 0x77, 0x3e, 0x3d, 0x98, 0xb9, 0x0e, 0x75, 0x50,
	0x65, 0xea, 0x4c, 0x89, 0x4d, 0xd5, 0xc6, 0x94, 0x98, 0x96, 0x21, 0x94, 0xea, 0xca, 0xc8, 0x99,
	0x32, 0xad, 0x14, 0x9b, 0x4c, 0x74, 0x6c, 0x21, 0x69, 0xdf, 0xc1, 0xd6, 0x21, 0x73, 0xf0, 0x94,
	0xd0, 0xcf, 0x2d, 0x3a, 0x19, 0xb2, 0x79, 0x3a, 0xf9, 0x06, 0xb5, 0xa0, 0xf2, 0xc2, 0x23, 0xee,
	0xa0, 0x8f, 0x95, 0xb6, 0xb2, 0x5f, 0xd6, 0xa5, 0x84, 0x54, 0xa8, 0x1d, 0xba, 0x16, 0xb1, 0xcd,
	0x41, 0x1f, 0x2f, 0xf1, 0x91, 0x40, 0x46, 0x18, 0xaa, 0xdc, 0xd7, 0xa0, 0x8f, 0x4b, 0x6d, 0x65,
	0xbf, 0xa4, 0xfb, 0x22, 0xda, 0x82, 0xf2, 0xb1, 0x35, 0xb5, 0x28, 0x5e, 0xe6, 0x53, 0x84, 0xa0,
	0xf5, 0xe1, 0x76, 0xca, 0xda, 0xde, 0x0c, 0xdd, 0x87, 0x0a, 0x1f, 0xf0, 0xb0, 0xd2, 0x2e, 0xed,
	0x37, 0x1e, 0x6c, 0x1e, 0x88, 0xbc, 0x0e, 0xb8, 0x56, 0xac, 0xa7, 0x4b, 0x13, 0xed, 0x07, 0xc0,
	0xfc, 0xeb, 0x33, 0x3a, 0x21, 0xee, 0xd0, 0xb0, 0xec, 0xee, 0x62, 0xe8, 0xcc, 0xe9, 0xe4, 0x1f,
	0x64, 0x71, 0x4a, 0x0d, 0x97, 0x76, 0xa8, 0x9f, 0x85, 0x14, 0x59, 0x16, 0x4f, 0x6c, 0xb3, 0x23,
	0xb2, 0x28, 0xe9, 0x42, 0xd0, 0x8e, 0x60, 0x27, 0x63, 0xfd, 0xa2, 0x99, 0xfc, 0xac, 0xc0, 0x7a,
	0xe0, 0xe5, 0xc4, 0x18, 0x13, 0x96, 0x42, 0x34, 0x54, 0x25, 0x11, 0x6a, 0x98, 0xde, 0x52, 0x2c,
	0xbd, 0xec, 0x42, 0xa8, 0x50, 0xd3, 0x9d, 0xb9, 0x6d, 0x3e, 0x9b, 0x4f, 0x65, 0x2d, 0x02, 0x39,
	0x2c, 0x52, 0x39, 0x5a, 0xa4, 0xc7, 0x97, 0x62, 0x2a, 0x98, 0xd5, 0x17, 0xb0, 0x76, 0x4a, 0xce,
	0xcf, 0xa2, 0x39, 0x65, 0x95, 0x25, 0x12, 0xf7, 0x52, 0x46, 0x03, 0x95, 0xa2, 0xb1, 0x3d, 0x4a,
	0xba, 0x2e, 0x18, 0xda, 0x6f, 0x0a, 0xa0, 0x43, 0xe7, 0xfc, 0xdc, 0xb9, 0x38, 0x74, 0xe6, 0xee,
	0x34, 0xb2, 0xe5, 0x3d, 0x97, 0x18, 0x94, 0x74, 0xa8, 0xbf, 0xe5, 0xbe, 0x9c, 0xb9, 0xe5, 0xa9,
	0x01, 0x22, 0x0d, 0x9a, 0x3d, 0x01, 0xbe, 0x68, 0xfb, 0xc7, 0x74, 0x68, 0x0f, 0xe0, 0xf9, 0x64,
	0x3e, 0x7d, 0x1d, 0xdd, 0xfb, 0x88, 0x06, 0xb5, 0xa1, 0xa1, 0x93, 0xd9, 0xb9, 0xb1, 0x10, 0x06,
	0x15, 0x6e, 0x10, 0x55, 0x69, 0x9d, 0x94, 0x2c, 0x0a, 0xee, 0xc4, 0x2b, 0x58, 0xd7, 0x89, 0xe0,
	0x09, 0xf3, 0x6d, 0x57, 0xa9, 0x7b, 0xc9, 0xf7, 0x0c, 0x1d, 0x24, 0x82, 0x6b, 0xc5, 0x82, 0x0b,
	0xcc, 0x83, 0xf8, 0xbe, 0x87, 0x86, 0x4f, 0x15, 0xb1, 0x0a, 0x75, 0x17, 0xf1, 0x0a, 0x75, 0x17,
	0x39, 0xe1, 0xed, 0x42, 0x9d, 0x7f, 0xb2, 0x3c, 0x64, 0x88, 0xa1, 0x82, 0xcf, 0xe3, 0x9b, 0xe2,
	0xe1, 0x66, 0xbb, 0xb4, 0x5f, 0xd6, 0x7d, 0x51, 0x1b, 0xc2, 0xf6, 0x89, 0xe1, 0x52, 0x6b, 0x64,
	0xcd, 0x0c, 0x6a, 0xd9, 0x63, 0xa9, 0x1f, 0x7a, 0xe3, 0xe8, 0x62, 0x4a, 0x7c, 0x31, 0x0c, 0xd5,
	0x33, 0xe9, 0x6e, 0x49, 0xb8, 0x93, 0xa2, 0xf6, 0x25, 0x2b, 0x57, 0x50, 0x82, 0xb7, 0xbd, 0xdb,
	0x9d, 0x14, 0xef, 0x05, 0x9b, 0x61, 0x0e, 0x1b, 0xfc, 0xeb, 0xb9, 0x33, 0xb3, 0x46, 0x7e, 0x7c,
	0x18, 0xaa, 0x5c, 0x0e, 0x33, 0x95, 0xe2, 0x0d, 0x58, 0x28, 0xfd, 0x77, 0xf0, 0xf8, 0xf2, 0xb2,
	0x33, 0xf4, 0x5e, 0x22, 0x70, 0x14, 0x0b, 0x9c, 0x9b, 0x06, 0x71, 0xff, 0xa8, 0xc8, 0x2e, 0x19,
	0x8c, 0x6d, 0xc7, 0x25, 0x68, 0x15, 0x96, 0x82, 0x68, 0x97, 0x04, 0xf9, 0x89, 0x91, 0x60, 0x2f,
	0x03, 0x39, 0x9f, 0x32, 0x83, 0x5e, 0x5b, 0x4e, 0xf4, 0x5a, 0x94, 0x29, 0xca, 0xc2, 0xa3, 0x2f,
	0x6b, 0x3f, 0x55, 0x61, 0x35, 0xde, 0xcd, 0x97, 0x02, 0xca, 0xae, 0x2d, 0x82, 0xe5, 0xe7, 0x8b,
	0x19, 0x91, 0xa5, 0xe5, 0xdf, 0x8c, 0x08, 0x7a, 0x8e, 0x4d, 0x89, 0x4d, 0xf9, 0x90, 0x88, 0x25,
	0xaa, 0x62, 0xfe, 0xa4, 0xc8, 0xa3, 0xa9, 0xeb, 0xbe, 0xc8, 0x5a, 0xff, 0xd8, 0xb1, 0xc7, 0x16,
	0x9d, 0x9b, 0x84, 0x53, 0x88, 0xa2, 0x87, 0x0a, 0x96, 0xc6, 0xb1, 0x41, 0xc5, 0x60, 0x95, 0x0f,
	0x06, 0x32, 0xa3, 0xb0, 0x63, 0x67, 0x64, 0x50, 0xcb, 0xb1, 0x7b, 0x16, 0x5d, 0xe0, 0x1a, 0x77,
	0x1c, 0xd3, 0x45, 0x6d, 0x9e, 0x19, 0x53, 0x82, 0xeb, 0x71, 0x1b, 0xa6, 0x43, 0xfb, 0xb0, 0xe6,
	0xcb, 0x1d, 0xd3, 0x74, 0x89, 0xe7, 0x61, 0xe0, 0x66, 0x49, 0x75, 0x6c, 0x53, 0x1b, 0xf1, 0x4d,
	0x8d, 0x15, 0xa3, 0x99, 0x28, 0xc6, 0xff, 0x61, 0x45, 0xa6, 0xfb, 0xc4, 0xa6, 0x2c, 0xd4, 0x15,
	0xee, 0x3f, 0xae, 0x64, 0x7b, 0x34, 0x24, 0x36, 0x5b, 0x0f, 0xaf, 0x8a, 0x3d, 0x92, 0x22, 0xeb,
	0x4a, 0xde, 0x4f, 0x78, 0x8d, 0xeb, 0x85, 0xc0, 0xfb, 0x9e, 0x91, 0xf1, 0x8b, 0x19, 0x5e, 0x97,
	0x7d, 0x2f, 0xc4, 0x08, 0xb9, 0xf7, 0x9c, 0xb9, 0x4d, 0xf1, 0x06, 0x1f, 0x8e, 0xe9, 0xd0, 0x3b,
	0x50, 0xe1, 0xc7, 0x1a, 0x0f, 0x23, 0xde, 0xbe, 0x2b, 0x7e, 0xfb, 0x8a, 0xc3, 0x8e, 0x1c, 0x44,
	0xf7, 0xa1, 0x2a, 0xc2, 0xf3, 0xf0, 0x26, 0xb7, 0xdb, 0xf0, 0xed, 0x8e, 0xac, 0xf1, 0xe4, 0xd8,
	0x1a, 0x4f, 0xa8, 0xee, 0x5b, 0xb0, 0x3d, 0x38, 0x32, 0x3c, 0x1e, 0x05, 0xde, 0x6a, 0x2b, 0xfb,
	0x35, 0x3d, 0x90, 0x59, 0x9d, 0x8f, 0x0c, 0x4f, 0xfc, 0x0d, 0xf0, 0x6d, 0x3e, 0x18, 0x2a, 0x82,
	0x5f, 0x0d, 0x03, 0xa8, 0x87, 0x5b, 0x9c, 0x96, 0x22, 0x1a, 0x74, 0x1f, 0x6a, 0x32, 0x7a, 0x0f,
	0x6f, 0xf3, 0x38, 0xd6, 0xfc, 0x38, 0xa4, 0x5e, 0x0f, 0x0c, 0xd0, 0x23, 0x58, 0x0d, 0xa6, 0x0e,
	0xec, 0x33, 0xc7, 0xc3, 0x58, 0x52, 0xb9, 0x35, 0x35, 0x66, 0xd6, 0xd8, 0xa0, 0xe4, 0xc2, 0x58,
	0x1c, 0xcc, 0xe5, 0xb0, 0x9e, 0xb0, 0x46, 0xef, 0x43, 0x95, 0x97, 0xce, 0x71, 0xf1, 0x4e, 0x5b,
	0xc9, 0x99, 0xe8, 0x9b, 0x31, 0x00, 0x0c, 0xbc, 0x00, 0x4d, 0x58, 0xe5, 0xe9, 0x45, 0x55, 0xbc,
	0x91, 0x19, 0x97, 0xbc, 0x1c, 0x9c, 0xe0, 0x3b, 0xa2, 0x3d, 0x7c, 0x59, 0xfb, 0xb5, 0x26, 0xd9,
	0x41, 0xb0, 0xdd, 0x25, 0x30, 0x16, 0xa7, 0x31, 0x1f, 0xa4, 0xcb, 0xd9, 0x20, 0x2d, 0xe7, 0x82,
	0xb4, 0x92, 0x03, 0xd2, 0x6a, 0x1e, 0x48, 0x6b, 0x57, 0x80, 0xb4, 0x7e, 0x0d, 0x90, 0xc2, 0xf5,
	0x40, 0xda, 0xb8, 0x1a, 0xa4, 0xcd, 0x1c, 0x90, 0xae, 0x5c, 0x05, 0xd2, 0xd5, 0x2b, 0x40, 0xba,
	0x96, 0x01, 0xd2, 0xf5, 0x28, 0x48, 0xf7, 0x00, 0x4e, 0x88, 0x3b, 0xb5, 0x3c, 0x8f, 0x4d, 0xd9,
	0x10, 0x67, 0xa8, 0x50, 0x83, 0xde, 0x85, 0xd5, 0x50, 0xe2, 0xbf, 0x7f, 0xc4, 0xa7, 0x27, 0xb4,
	0x51, 0xb0, 0x6f, 0xe6, 0x83, 0x7d, 0x2b, 0x05, 0xec, 0xbb, 0x50, 0x7f, 0x69, 0x91, 0x8b, 0x53,
	0x6a, 0x50, 0xc2, 0xc1, 0x57, 0xd2, 0x43, 0x45, 0x84, 0x0a, 0x5a, 0xd7, 0xa4, 0x82, 0xed, 0x42,
	0x54, 0x80, 0xf3, 0xa8, 0x60, 0x27, 0x9f, 0x0a, 0xd4, 0x5c, 0x2a, 0xb8, 0x53, 0x9c, 0x0a, 0x76,
	0x6f, 0x4a, 0x05, 0x77, 0x6f, 0x44, 0x05, 0x7b, 0xf9, 0x54, 0x70, 0x2f, 0x4e, 0x05, 0xb1, 0x5b,
	0x50, 0x3b, 0x7e, 0x0b, 0xd2, 0x7e, 0xa9, 0x02, 0x84, 0x67, 0x8b, 0xb4, 0x5f, 0xb6, 0x7f, 0x0c,
	0x5a, 0x8a, 0x1f, 0x83, 0xfe, 0xe3, 0x89, 0x7f, 0x3f, 0x4f, 0x44, 0xf0, 0xbd, 0x91, 0x8f, 0x6f,
	0x94, 0xfb, 0x33, 0xdf, 0xbc, 0x26, 0x82, 0xb7, 0x0a, 0x21, 0xf8, 0x76, 0x1e, 0x82, 0x5b, 0xf9,
	0x08, 0xde, 0xce, 0x45, 0x30, 0x2e, 0x8e, 0xe0, 0x9d, 0x9b, 0x22, 0x58, 0xbd, 0x11, 0x82, 0xef,
	0xe4, 0x23, 0x78, 0x37, 0x8e, 0xe0, 0x07, 0x7f, 0xd5, 0xe5, 0xe1, 0xba, 0xdf, 0x3d, 0x25, 0xee,
	0xb7, 0xd6, 0x88, 0xa0, 0x1e, 0xd4, 0x83, 0x9b, 0x03, 0xda, 0xb9, 0x7c, 0x4d, 0x90, 0x17, 0x19,
	0x35, 0x73, 0x68, 0xa6, 0xdd, 0x42, 0x4f, 0x60, 0x25, 0x76, 0x57, 0x45, 0xd8, 0xb7, 0x4e, 0x5e,
	0x8f, 0xd5, 0xac, 0x11, 0xe6, 0xe6, 0x10, 0x20, 0xbc, 0x7f, 0x21, 0x35, 0xe5, 0xb2, 0xe5, 0x7b,
	0xc9, 0x1e, 0x93, 0xe1, 0xc4, 0x1e, 0x5f, 0xc2, 0x70, 0x92, 0xef, 0x44, 0x6a, 0xd6, 0x08, 0x73,
	0xf3, 0x95, 0x7c, 0x68, 0x4b, 0x3e, 0x51, 0xa1, 0x76, 0x6c, 0xf5, 0x94, 0x17, 0x34, 0xf5, 0x7f,
	0x57, 0x58, 0x78, 0xcc, 0xbf, 0x2e, 0x6f, 0x6e, 0xd1, 0x87, 0x3c, 0xb4, 0x1b, 0x9b, 0x99, 0x78,
	0x5f, 0x54, 0xef, 0xe6, 0x8c, 0x72, 0x9f, 0x5d, 0x68, 0x46, 0xdf, 0x76, 0xd0, 0xb6, 0x3f, 0x21,
	0xf1, 0x98, 0xa4, 0x66, 0x0c, 0x30, 0x1f, 0x9f, 0x42, 0xb3, 0x63, 0x9a, 0x61, 0x47, 0x65, 0xbc,
	0x32, 0xa8, 0x19, 0x7a, 0xed, 0x16, 0xfa, 0x08, 0xea, 0x1d, 0xd3, 0x94, 0x27, 0xc6, 0xb4, 0x4b,
	0xb3, 0x9a, 0xa6, 0x0c, 0x26, 0x0e, 0x17, 0x2c, 0xa8, 0x42, 0x13, 0x3f, 0x84, 0x5a, 0xc7, 0x34,
	0x05, 0x5d, 0xa5, 0x5c, 0x76, 0xd5, 0x14, 0x1d, 0x9f, 0x55, 0xe9, 0x93, 0x73, 0x42, 0x49, 0xa1,
	0xb5, 0x3e, 0x80, 0xd2, 0x53, 0x42, 0x13, 0x53, 0xc4, 0x13, 0x4b, 0xd6, 0x94, 0x8f, 0x01, 0x18,
	0xea, 0x6f, 0xb0, 0xd8, 0x43, 0x28, 0xf7, 0x26, 0x64, 0xf4, 0x75, 0xc1, 0xdd, 0xa8, 0xc8, 0xcb,
	0x7c, 0xdc, 0x40, 0x28, 0xd5, 0x34, 0x25, 0xaf, 0x3b, 0x7a, 0x4a, 0xe8, 0x33, 0x72, 0x41, 0x3c,
	0x7a, 0xe8, 0x3a, 0xd3, 0x9e, 0x31, 0x9a, 0x14, 0x0b, 0xb6, 0x0f, 0xad, 0x88, 0xa2, 0x6f, 0x79,
	0xc6, 0xeb, 0x73, 0xc2, 0xce, 0x72, 0x85, 0xbc, 0xbc, 0x82, 0xad, 0xb4, 0x87, 0x23, 0x74, 0xcf,
	0x37, 0xcf, 0x78, 0x56, 0x52, 0xaf, 0x32, 0xd0, 0x6e, 0x75, 0x5b, 0xbf, 0xbf, 0xd9, 0x53, 0xfe,
	0x78, 0xb3, 0xa7, 0xfc, 0xf9, 0x66, 0x4f, 0x79, 0x55, 0x3b, 0xf8, 0x44, 0xcc, 0x78, 0x5d, 0xe1,
	0xef, 0xfa, 0x0f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x68, 0x68, 0x30, 0x8f, 0x18, 0x18, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ForumDBServiceClient is the client API for ForumDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForumDBServiceClient interface {
	TopicPage(ctx context.Context, in *ForumTopicPageReq, opts ...grpc.CallOption) (*ForumTopicPageRep, error)
	RecommendPage(ctx context.Context, in *RecommendPageReq, opts ...grpc.CallOption) (*RecommendPageRep, error)
	FriendPage(ctx context.Context, in *ForumFriendPageReq, opts ...grpc.CallOption) (*ForumFriendPageRep, error)
	// rpc FollowFourmPage(FollowFourmPageReq)returns(FollowFourmPageRep){};
	OtherMainPage(ctx context.Context, in *OtherMainPageReq, opts ...grpc.CallOption) (*OtherMainPageRep, error)
	ForumOtherMainByMouth(ctx context.Context, in *ForumOtherMainByMouthReq, opts ...grpc.CallOption) (*ForumOtherMainByMouthResp, error)
	ForumGetWithMedia(ctx context.Context, in *ForumGetWithMediaReq, opts ...grpc.CallOption) (*ForumGetWithMediaResp, error)
	SelfMainPage(ctx context.Context, in *SelfMainPageReq, opts ...grpc.CallOption) (*SelfMainPageRep, error)
	AddRecommend(ctx context.Context, in *ForumRecommend, opts ...grpc.CallOption) (*ForumRecommend, error)
	AddFriend(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error)
	AddMySelf(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error)
	AddTopic(ctx context.Context, in *ForumTopic, opts ...grpc.CallOption) (*ForumTopic, error)
	Delete(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error)
	Get(ctx context.Context, in *ForumGetReq, opts ...grpc.CallOption) (*ForumFriend, error)
	UserDelete(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error)
	Check(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error)
	Ignore(ctx context.Context, in *ForumIgnore, opts ...grpc.CallOption) (*ForumIgnore, error)
	GetNewestFromCache(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error)
	ForumFriendDisableView(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error)
	ParticipatingFriends(ctx context.Context, in *ParticipatingFriendsMsg, opts ...grpc.CallOption) (*ParticipatingFriendsMsg, error)
}

type forumDBServiceClient struct {
	cc *grpc.ClientConn
}

func NewForumDBServiceClient(cc *grpc.ClientConn) ForumDBServiceClient {
	return &forumDBServiceClient{cc}
}

func (c *forumDBServiceClient) TopicPage(ctx context.Context, in *ForumTopicPageReq, opts ...grpc.CallOption) (*ForumTopicPageRep, error) {
	out := new(ForumTopicPageRep)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/TopicPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) RecommendPage(ctx context.Context, in *RecommendPageReq, opts ...grpc.CallOption) (*RecommendPageRep, error) {
	out := new(RecommendPageRep)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/RecommendPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) FriendPage(ctx context.Context, in *ForumFriendPageReq, opts ...grpc.CallOption) (*ForumFriendPageRep, error) {
	out := new(ForumFriendPageRep)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/FriendPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) OtherMainPage(ctx context.Context, in *OtherMainPageReq, opts ...grpc.CallOption) (*OtherMainPageRep, error) {
	out := new(OtherMainPageRep)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/OtherMainPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) ForumOtherMainByMouth(ctx context.Context, in *ForumOtherMainByMouthReq, opts ...grpc.CallOption) (*ForumOtherMainByMouthResp, error) {
	out := new(ForumOtherMainByMouthResp)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/ForumOtherMainByMouth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) ForumGetWithMedia(ctx context.Context, in *ForumGetWithMediaReq, opts ...grpc.CallOption) (*ForumGetWithMediaResp, error) {
	out := new(ForumGetWithMediaResp)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/ForumGetWithMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) SelfMainPage(ctx context.Context, in *SelfMainPageReq, opts ...grpc.CallOption) (*SelfMainPageRep, error) {
	out := new(SelfMainPageRep)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/SelfMainPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) AddRecommend(ctx context.Context, in *ForumRecommend, opts ...grpc.CallOption) (*ForumRecommend, error) {
	out := new(ForumRecommend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/AddRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) AddFriend(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error) {
	out := new(ForumFriend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) AddMySelf(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error) {
	out := new(ForumFriend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/AddMySelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) AddTopic(ctx context.Context, in *ForumTopic, opts ...grpc.CallOption) (*ForumTopic, error) {
	out := new(ForumTopic)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/AddTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) Delete(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error) {
	out := new(ForumFriend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) Get(ctx context.Context, in *ForumGetReq, opts ...grpc.CallOption) (*ForumFriend, error) {
	out := new(ForumFriend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) UserDelete(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error) {
	out := new(ForumFriend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/UserDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) Check(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error) {
	out := new(ForumFriend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) Ignore(ctx context.Context, in *ForumIgnore, opts ...grpc.CallOption) (*ForumIgnore, error) {
	out := new(ForumIgnore)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/Ignore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) GetNewestFromCache(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error) {
	out := new(ForumFriend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/GetNewestFromCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) ForumFriendDisableView(ctx context.Context, in *ForumFriend, opts ...grpc.CallOption) (*ForumFriend, error) {
	out := new(ForumFriend)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/ForumFriendDisableView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumDBServiceClient) ParticipatingFriends(ctx context.Context, in *ParticipatingFriendsMsg, opts ...grpc.CallOption) (*ParticipatingFriendsMsg, error) {
	out := new(ParticipatingFriendsMsg)
	err := c.cc.Invoke(ctx, "/moment.ForumDBService/ParticipatingFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumDBServiceServer is the server API for ForumDBService service.
type ForumDBServiceServer interface {
	TopicPage(context.Context, *ForumTopicPageReq) (*ForumTopicPageRep, error)
	RecommendPage(context.Context, *RecommendPageReq) (*RecommendPageRep, error)
	FriendPage(context.Context, *ForumFriendPageReq) (*ForumFriendPageRep, error)
	// rpc FollowFourmPage(FollowFourmPageReq)returns(FollowFourmPageRep){};
	OtherMainPage(context.Context, *OtherMainPageReq) (*OtherMainPageRep, error)
	ForumOtherMainByMouth(context.Context, *ForumOtherMainByMouthReq) (*ForumOtherMainByMouthResp, error)
	ForumGetWithMedia(context.Context, *ForumGetWithMediaReq) (*ForumGetWithMediaResp, error)
	SelfMainPage(context.Context, *SelfMainPageReq) (*SelfMainPageRep, error)
	AddRecommend(context.Context, *ForumRecommend) (*ForumRecommend, error)
	AddFriend(context.Context, *ForumFriend) (*ForumFriend, error)
	AddMySelf(context.Context, *ForumFriend) (*ForumFriend, error)
	AddTopic(context.Context, *ForumTopic) (*ForumTopic, error)
	Delete(context.Context, *ForumFriend) (*ForumFriend, error)
	Get(context.Context, *ForumGetReq) (*ForumFriend, error)
	UserDelete(context.Context, *ForumFriend) (*ForumFriend, error)
	Check(context.Context, *ForumFriend) (*ForumFriend, error)
	Ignore(context.Context, *ForumIgnore) (*ForumIgnore, error)
	GetNewestFromCache(context.Context, *ForumFriend) (*ForumFriend, error)
	ForumFriendDisableView(context.Context, *ForumFriend) (*ForumFriend, error)
	ParticipatingFriends(context.Context, *ParticipatingFriendsMsg) (*ParticipatingFriendsMsg, error)
}

// UnimplementedForumDBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedForumDBServiceServer struct {
}

func (*UnimplementedForumDBServiceServer) TopicPage(ctx context.Context, req *ForumTopicPageReq) (*ForumTopicPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicPage not implemented")
}
func (*UnimplementedForumDBServiceServer) RecommendPage(ctx context.Context, req *RecommendPageReq) (*RecommendPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendPage not implemented")
}
func (*UnimplementedForumDBServiceServer) FriendPage(ctx context.Context, req *ForumFriendPageReq) (*ForumFriendPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendPage not implemented")
}
func (*UnimplementedForumDBServiceServer) OtherMainPage(ctx context.Context, req *OtherMainPageReq) (*OtherMainPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtherMainPage not implemented")
}
func (*UnimplementedForumDBServiceServer) ForumOtherMainByMouth(ctx context.Context, req *ForumOtherMainByMouthReq) (*ForumOtherMainByMouthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumOtherMainByMouth not implemented")
}
func (*UnimplementedForumDBServiceServer) ForumGetWithMedia(ctx context.Context, req *ForumGetWithMediaReq) (*ForumGetWithMediaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumGetWithMedia not implemented")
}
func (*UnimplementedForumDBServiceServer) SelfMainPage(ctx context.Context, req *SelfMainPageReq) (*SelfMainPageRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfMainPage not implemented")
}
func (*UnimplementedForumDBServiceServer) AddRecommend(ctx context.Context, req *ForumRecommend) (*ForumRecommend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecommend not implemented")
}
func (*UnimplementedForumDBServiceServer) AddFriend(ctx context.Context, req *ForumFriend) (*ForumFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (*UnimplementedForumDBServiceServer) AddMySelf(ctx context.Context, req *ForumFriend) (*ForumFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMySelf not implemented")
}
func (*UnimplementedForumDBServiceServer) AddTopic(ctx context.Context, req *ForumTopic) (*ForumTopic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTopic not implemented")
}
func (*UnimplementedForumDBServiceServer) Delete(ctx context.Context, req *ForumFriend) (*ForumFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedForumDBServiceServer) Get(ctx context.Context, req *ForumGetReq) (*ForumFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedForumDBServiceServer) UserDelete(ctx context.Context, req *ForumFriend) (*ForumFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (*UnimplementedForumDBServiceServer) Check(ctx context.Context, req *ForumFriend) (*ForumFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedForumDBServiceServer) Ignore(ctx context.Context, req *ForumIgnore) (*ForumIgnore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ignore not implemented")
}
func (*UnimplementedForumDBServiceServer) GetNewestFromCache(ctx context.Context, req *ForumFriend) (*ForumFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewestFromCache not implemented")
}
func (*UnimplementedForumDBServiceServer) ForumFriendDisableView(ctx context.Context, req *ForumFriend) (*ForumFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumFriendDisableView not implemented")
}
func (*UnimplementedForumDBServiceServer) ParticipatingFriends(ctx context.Context, req *ParticipatingFriendsMsg) (*ParticipatingFriendsMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipatingFriends not implemented")
}

func RegisterForumDBServiceServer(s *grpc.Server, srv ForumDBServiceServer) {
	s.RegisterService(&_ForumDBService_serviceDesc, srv)
}

func _ForumDBService_TopicPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumTopicPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).TopicPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/TopicPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).TopicPage(ctx, req.(*ForumTopicPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_RecommendPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).RecommendPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/RecommendPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).RecommendPage(ctx, req.(*RecommendPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_FriendPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumFriendPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).FriendPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/FriendPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).FriendPage(ctx, req.(*ForumFriendPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_OtherMainPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherMainPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).OtherMainPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/OtherMainPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).OtherMainPage(ctx, req.(*OtherMainPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_ForumOtherMainByMouth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumOtherMainByMouthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).ForumOtherMainByMouth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/ForumOtherMainByMouth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).ForumOtherMainByMouth(ctx, req.(*ForumOtherMainByMouthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_ForumGetWithMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumGetWithMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).ForumGetWithMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/ForumGetWithMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).ForumGetWithMedia(ctx, req.(*ForumGetWithMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_SelfMainPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfMainPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).SelfMainPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/SelfMainPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).SelfMainPage(ctx, req.(*SelfMainPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_AddRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumRecommend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).AddRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/AddRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).AddRecommend(ctx, req.(*ForumRecommend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).AddFriend(ctx, req.(*ForumFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_AddMySelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).AddMySelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/AddMySelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).AddMySelf(ctx, req.(*ForumFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_AddTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).AddTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/AddTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).AddTopic(ctx, req.(*ForumTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).Delete(ctx, req.(*ForumFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).Get(ctx, req.(*ForumGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).UserDelete(ctx, req.(*ForumFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).Check(ctx, req.(*ForumFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_Ignore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumIgnore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).Ignore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/Ignore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).Ignore(ctx, req.(*ForumIgnore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_GetNewestFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).GetNewestFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/GetNewestFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).GetNewestFromCache(ctx, req.(*ForumFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_ForumFriendDisableView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).ForumFriendDisableView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/ForumFriendDisableView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).ForumFriendDisableView(ctx, req.(*ForumFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumDBService_ParticipatingFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipatingFriendsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumDBServiceServer).ParticipatingFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.ForumDBService/ParticipatingFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumDBServiceServer).ParticipatingFriends(ctx, req.(*ParticipatingFriendsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForumDBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.ForumDBService",
	HandlerType: (*ForumDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopicPage",
			Handler:    _ForumDBService_TopicPage_Handler,
		},
		{
			MethodName: "RecommendPage",
			Handler:    _ForumDBService_RecommendPage_Handler,
		},
		{
			MethodName: "FriendPage",
			Handler:    _ForumDBService_FriendPage_Handler,
		},
		{
			MethodName: "OtherMainPage",
			Handler:    _ForumDBService_OtherMainPage_Handler,
		},
		{
			MethodName: "ForumOtherMainByMouth",
			Handler:    _ForumDBService_ForumOtherMainByMouth_Handler,
		},
		{
			MethodName: "ForumGetWithMedia",
			Handler:    _ForumDBService_ForumGetWithMedia_Handler,
		},
		{
			MethodName: "SelfMainPage",
			Handler:    _ForumDBService_SelfMainPage_Handler,
		},
		{
			MethodName: "AddRecommend",
			Handler:    _ForumDBService_AddRecommend_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _ForumDBService_AddFriend_Handler,
		},
		{
			MethodName: "AddMySelf",
			Handler:    _ForumDBService_AddMySelf_Handler,
		},
		{
			MethodName: "AddTopic",
			Handler:    _ForumDBService_AddTopic_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ForumDBService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ForumDBService_Get_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _ForumDBService_UserDelete_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _ForumDBService_Check_Handler,
		},
		{
			MethodName: "Ignore",
			Handler:    _ForumDBService_Ignore_Handler,
		},
		{
			MethodName: "GetNewestFromCache",
			Handler:    _ForumDBService_GetNewestFromCache_Handler,
		},
		{
			MethodName: "ForumFriendDisableView",
			Handler:    _ForumDBService_ForumFriendDisableView_Handler,
		},
		{
			MethodName: "ParticipatingFriends",
			Handler:    _ForumDBService_ParticipatingFriends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forum.proto",
}

func (m *ForumGetWithMediaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumGetWithMediaReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumGetWithMediaReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if m.FriendID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.FriendID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForumGetWithMediaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumGetWithMediaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumGetWithMediaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Forums) > 0 {
		for iNdEx := len(m.Forums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForumOtherMainByMouthReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumOtherMainByMouthReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumOtherMainByMouthReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndAt != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x20
	}
	if m.StartAt != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x18
	}
	if m.FriendID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.FriendID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForumOtherMainByMouthResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumOtherMainByMouthResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumOtherMainByMouthResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Forums) > 0 {
		for iNdEx := len(m.Forums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OtherMainPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherMainPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OtherMainPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.RoundNum != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.RoundNum))
		i--
		dAtA[i] = 0x20
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.FriendID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.FriendID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OtherMainPageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherMainPageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OtherMainPageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Forums) > 0 {
		for iNdEx := len(m.Forums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SelfMainPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelfMainPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelfMainPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelfMainPageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelfMainPageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelfMainPageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Forums) > 0 {
		for iNdEx := len(m.Forums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FollowFourmPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowFourmPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FollowFourmPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReplayLimit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ReplayLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.ThumbLimit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ThumbLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.CommentLimit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CommentLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.CreateAt != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FollowFourmPageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowFourmPageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FollowFourmPageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Forums) > 0 {
		for iNdEx := len(m.Forums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecommendPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecommendPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecommendPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecommendPageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecommendPageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecommendPageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Forums) > 0 {
		for iNdEx := len(m.Forums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForumGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumGetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumGetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Friends) > 0 {
		dAtA2 := make([]byte, len(m.Friends)*10)
		var j1 int
		for _, num1 := range m.Friends {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintForum(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x62
	}
	if m.ForumUser != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumUser))
		i--
		dAtA[i] = 0x18
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x10
	}
	if m.CreateBy != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParticipatingFriendsMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipatingFriendsMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipatingFriendsMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Friends) > 0 {
		dAtA4 := make([]byte, len(m.Friends)*10)
		var j3 int
		for _, num1 := range m.Friends {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintForum(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForumFriendPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumFriendPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumFriendPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForumFriendPageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumFriendPageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumFriendPageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Forums) > 0 {
		for iNdEx := len(m.Forums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForumTopicPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumTopicPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumTopicPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForumTopicPageRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumTopicPageRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumTopicPageRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Forums) > 0 {
		for iNdEx := len(m.Forums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForumIgnore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumIgnore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumIgnore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateBy != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x20
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if m.IgnoreID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.IgnoreID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForumRecommend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumRecommend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumRecommend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LimitVIP != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.LimitVIP))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.IsRecommend {
		i--
		if m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.ThumbUserInfos) > 0 {
		for iNdEx := len(m.ThumbUserInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ThumbUserInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.ThumbUsers) > 0 {
		dAtA7 := make([]byte, len(m.ThumbUsers)*10)
		var j6 int
		for _, num1 := range m.ThumbUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintForum(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.HasFollow {
		i--
		if m.HasFollow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.HasThumb {
		i--
		if m.HasThumb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Entitys) > 0 {
		for iNdEx := len(m.Entitys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entitys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Medias) > 0 {
		for iNdEx := len(m.Medias) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Medias[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.CommentCount != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ThumbUp != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ThumbUp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Mention) > 0 {
		i -= len(m.Mention)
		copy(dAtA[i:], m.Mention)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Mention)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ContentEntity) > 0 {
		i -= len(m.ContentEntity)
		copy(dAtA[i:], m.ContentEntity)
		i = encodeVarintForum(dAtA, i, uint64(len(m.ContentEntity)))
		i--
		dAtA[i] = 0x6a
	}
	if m.CreateBy != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x60
	}
	if m.CreateAt != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x58
	}
	if len(m.LocationAddress) > 0 {
		i -= len(m.LocationAddress)
		copy(dAtA[i:], m.LocationAddress)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LocationName) > 0 {
		i -= len(m.LocationName)
		copy(dAtA[i:], m.LocationName)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LocationCity) > 0 {
		i -= len(m.LocationCity)
		copy(dAtA[i:], m.LocationCity)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationCity)))
		i--
		dAtA[i] = 0x42
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x39
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ContentType != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ContentType))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForumFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumFriend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumFriend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoundNum != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.RoundNum))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.LimitVIP != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.LimitVIP))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.IsRecommend {
		i--
		if m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.ThumbUserInfos) > 0 {
		for iNdEx := len(m.ThumbUserInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ThumbUserInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.ThumbUsers) > 0 {
		dAtA10 := make([]byte, len(m.ThumbUsers)*10)
		var j9 int
		for _, num1 := range m.ThumbUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintForum(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.HasFollow {
		i--
		if m.HasFollow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.HasThumb {
		i--
		if m.HasThumb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.Entitys) > 0 {
		for iNdEx := len(m.Entitys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entitys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.Medias) > 0 {
		for iNdEx := len(m.Medias) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Medias[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.ViewState != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ViewState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CommentCount != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ThumbUp != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ThumbUp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.PermissionUser) > 0 {
		i -= len(m.PermissionUser)
		copy(dAtA[i:], m.PermissionUser)
		i = encodeVarintForum(dAtA, i, uint64(len(m.PermissionUser)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Permission != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Mention) > 0 {
		i -= len(m.Mention)
		copy(dAtA[i:], m.Mention)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Mention)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ContentEntity) > 0 {
		i -= len(m.ContentEntity)
		copy(dAtA[i:], m.ContentEntity)
		i = encodeVarintForum(dAtA, i, uint64(len(m.ContentEntity)))
		i--
		dAtA[i] = 0x72
	}
	if m.CreateBy != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateAt != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.LocationAddress) > 0 {
		i -= len(m.LocationAddress)
		copy(dAtA[i:], m.LocationAddress)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LocationName) > 0 {
		i -= len(m.LocationName)
		copy(dAtA[i:], m.LocationName)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LocationCity) > 0 {
		i -= len(m.LocationCity)
		copy(dAtA[i:], m.LocationCity)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationCity)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x41
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x32
	}
	if m.ContentType != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ContentType))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForumTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForumTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForumTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LimitVIP != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.LimitVIP))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.IsRecommend {
		i--
		if m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.ThumbUserInfos) > 0 {
		for iNdEx := len(m.ThumbUserInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ThumbUserInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.ThumbUsers) > 0 {
		dAtA13 := make([]byte, len(m.ThumbUsers)*10)
		var j12 int
		for _, num1 := range m.ThumbUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintForum(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.HasFollow {
		i--
		if m.HasFollow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.HasThumb {
		i--
		if m.HasThumb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Entitys) > 0 {
		for iNdEx := len(m.Entitys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entitys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.Medias) > 0 {
		for iNdEx := len(m.Medias) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Medias[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.CommentCount != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ThumbUp != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ThumbUp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Mention) > 0 {
		i -= len(m.Mention)
		copy(dAtA[i:], m.Mention)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Mention)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ContentEntity) > 0 {
		i -= len(m.ContentEntity)
		copy(dAtA[i:], m.ContentEntity)
		i = encodeVarintForum(dAtA, i, uint64(len(m.ContentEntity)))
		i--
		dAtA[i] = 0x72
	}
	if m.CreateBy != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateBy))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateAt != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.LocationAddress) > 0 {
		i -= len(m.LocationAddress)
		copy(dAtA[i:], m.LocationAddress)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LocationName) > 0 {
		i -= len(m.LocationName)
		copy(dAtA[i:], m.LocationName)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LocationCity) > 0 {
		i -= len(m.LocationCity)
		copy(dAtA[i:], m.LocationCity)
		i = encodeVarintForum(dAtA, i, uint64(len(m.LocationCity)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x41
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintForum(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x32
	}
	if m.ContentType != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ContentType))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.ForumID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ForumID))
		i--
		dAtA[i] = 0x18
	}
	if m.TopicID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintForum(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintForum(dAtA []byte, offset int, v uint64) int {
	offset -= sovForum(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ForumGetWithMediaReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.FriendID != 0 {
		n += 1 + sovForum(uint64(m.FriendID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.Limit != 0 {
		n += 1 + sovForum(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumGetWithMediaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forums) > 0 {
		for _, e := range m.Forums {
			l = e.Size()
			n += 1 + l + sovForum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumOtherMainByMouthReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.FriendID != 0 {
		n += 1 + sovForum(uint64(m.FriendID))
	}
	if m.StartAt != 0 {
		n += 1 + sovForum(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovForum(uint64(m.EndAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumOtherMainByMouthResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forums) > 0 {
		for _, e := range m.Forums {
			l = e.Size()
			n += 1 + l + sovForum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OtherMainPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendID != 0 {
		n += 1 + sovForum(uint64(m.FriendID))
	}
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.RoundNum != 0 {
		n += 1 + sovForum(uint64(m.RoundNum))
	}
	if m.Limit != 0 {
		n += 1 + sovForum(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OtherMainPageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forums) > 0 {
		for _, e := range m.Forums {
			l = e.Size()
			n += 1 + l + sovForum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelfMainPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.Limit != 0 {
		n += 1 + sovForum(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelfMainPageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forums) > 0 {
		for _, e := range m.Forums {
			l = e.Size()
			n += 1 + l + sovForum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowFourmPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateAt != 0 {
		n += 1 + sovForum(uint64(m.CreateAt))
	}
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.Limit != 0 {
		n += 1 + sovForum(uint64(m.Limit))
	}
	if m.CommentLimit != 0 {
		n += 1 + sovForum(uint64(m.CommentLimit))
	}
	if m.ThumbLimit != 0 {
		n += 1 + sovForum(uint64(m.ThumbLimit))
	}
	if m.ReplayLimit != 0 {
		n += 1 + sovForum(uint64(m.ReplayLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowFourmPageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forums) > 0 {
		for _, e := range m.Forums {
			l = e.Size()
			n += 1 + l + sovForum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecommendPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.Limit != 0 {
		n += 1 + sovForum(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecommendPageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forums) > 0 {
		for _, e := range m.Forums {
			l = e.Size()
			n += 1 + l + sovForum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateBy != 0 {
		n += 1 + sovForum(uint64(m.CreateBy))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.ForumUser != 0 {
		n += 1 + sovForum(uint64(m.ForumUser))
	}
	if len(m.Friends) > 0 {
		l = 0
		for _, e := range m.Friends {
			l += sovForum(uint64(e))
		}
		n += 1 + sovForum(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParticipatingFriendsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if len(m.Friends) > 0 {
		l = 0
		for _, e := range m.Friends {
			l += sovForum(uint64(e))
		}
		n += 1 + sovForum(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumFriendPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.Limit != 0 {
		n += 1 + sovForum(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumFriendPageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forums) > 0 {
		for _, e := range m.Forums {
			l = e.Size()
			n += 1 + l + sovForum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumTopicPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovForum(uint64(m.TopicID))
	}
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.Limit != 0 {
		n += 1 + sovForum(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumTopicPageRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forums) > 0 {
		for _, e := range m.Forums {
			l = e.Size()
			n += 1 + l + sovForum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumIgnore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovForum(uint64(m.ID))
	}
	if m.IgnoreID != 0 {
		n += 1 + sovForum(uint64(m.IgnoreID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.CreateBy != 0 {
		n += 1 + sovForum(uint64(m.CreateBy))
	}
	if m.CreateAt != 0 {
		n += 1 + sovForum(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumRecommend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovForum(uint64(m.ID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.Type != 0 {
		n += 1 + sovForum(uint64(m.Type))
	}
	if m.ContentType != 0 {
		n += 1 + sovForum(uint64(m.ContentType))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	l = len(m.LocationCity)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.LocationName)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.LocationAddress)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovForum(uint64(m.CreateAt))
	}
	if m.CreateBy != 0 {
		n += 1 + sovForum(uint64(m.CreateBy))
	}
	l = len(m.ContentEntity)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.Mention)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	if m.ThumbUp != 0 {
		n += 2 + sovForum(uint64(m.ThumbUp))
	}
	if m.CommentCount != 0 {
		n += 2 + sovForum(uint64(m.CommentCount))
	}
	if len(m.Medias) > 0 {
		for _, e := range m.Medias {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if len(m.Entitys) > 0 {
		for _, e := range m.Entitys {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if m.HasThumb {
		n += 3
	}
	if m.HasFollow {
		n += 3
	}
	if len(m.ThumbUsers) > 0 {
		l = 0
		for _, e := range m.ThumbUsers {
			l += sovForum(uint64(e))
		}
		n += 2 + sovForum(uint64(l)) + l
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if len(m.ThumbUserInfos) > 0 {
		for _, e := range m.ThumbUserInfos {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 2 + l + sovForum(uint64(l))
	}
	if m.IsRecommend {
		n += 3
	}
	if m.LimitVIP != 0 {
		n += 2 + sovForum(uint64(m.LimitVIP))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumFriend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovForum(uint64(m.ID))
	}
	if m.UserID != 0 {
		n += 1 + sovForum(uint64(m.UserID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.Type != 0 {
		n += 1 + sovForum(uint64(m.Type))
	}
	if m.ContentType != 0 {
		n += 1 + sovForum(uint64(m.ContentType))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	l = len(m.LocationCity)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.LocationName)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.LocationAddress)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovForum(uint64(m.CreateAt))
	}
	if m.CreateBy != 0 {
		n += 1 + sovForum(uint64(m.CreateBy))
	}
	l = len(m.ContentEntity)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.Mention)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 2 + l + sovForum(uint64(l))
	}
	if m.Permission != 0 {
		n += 2 + sovForum(uint64(m.Permission))
	}
	l = len(m.PermissionUser)
	if l > 0 {
		n += 2 + l + sovForum(uint64(l))
	}
	if m.ThumbUp != 0 {
		n += 2 + sovForum(uint64(m.ThumbUp))
	}
	if m.CommentCount != 0 {
		n += 2 + sovForum(uint64(m.CommentCount))
	}
	if m.ViewState != 0 {
		n += 2 + sovForum(uint64(m.ViewState))
	}
	if len(m.Medias) > 0 {
		for _, e := range m.Medias {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if len(m.Entitys) > 0 {
		for _, e := range m.Entitys {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if m.HasThumb {
		n += 3
	}
	if m.HasFollow {
		n += 3
	}
	if len(m.ThumbUsers) > 0 {
		l = 0
		for _, e := range m.ThumbUsers {
			l += sovForum(uint64(e))
		}
		n += 2 + sovForum(uint64(l)) + l
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if len(m.ThumbUserInfos) > 0 {
		for _, e := range m.ThumbUserInfos {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 2 + l + sovForum(uint64(l))
	}
	if m.IsRecommend {
		n += 3
	}
	if m.LimitVIP != 0 {
		n += 2 + sovForum(uint64(m.LimitVIP))
	}
	if m.RoundNum != 0 {
		n += 2 + sovForum(uint64(m.RoundNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForumTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovForum(uint64(m.ID))
	}
	if m.TopicID != 0 {
		n += 1 + sovForum(uint64(m.TopicID))
	}
	if m.ForumID != 0 {
		n += 1 + sovForum(uint64(m.ForumID))
	}
	if m.Type != 0 {
		n += 1 + sovForum(uint64(m.Type))
	}
	if m.ContentType != 0 {
		n += 1 + sovForum(uint64(m.ContentType))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	l = len(m.LocationCity)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.LocationName)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.LocationAddress)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovForum(uint64(m.CreateAt))
	}
	if m.CreateBy != 0 {
		n += 1 + sovForum(uint64(m.CreateBy))
	}
	l = len(m.ContentEntity)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.Mention)
	if l > 0 {
		n += 1 + l + sovForum(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 2 + l + sovForum(uint64(l))
	}
	if m.ThumbUp != 0 {
		n += 2 + sovForum(uint64(m.ThumbUp))
	}
	if m.CommentCount != 0 {
		n += 2 + sovForum(uint64(m.CommentCount))
	}
	if len(m.Medias) > 0 {
		for _, e := range m.Medias {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if len(m.Entitys) > 0 {
		for _, e := range m.Entitys {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if m.HasThumb {
		n += 3
	}
	if m.HasFollow {
		n += 3
	}
	if len(m.ThumbUsers) > 0 {
		l = 0
		for _, e := range m.ThumbUsers {
			l += sovForum(uint64(e))
		}
		n += 2 + sovForum(uint64(l)) + l
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if len(m.ThumbUserInfos) > 0 {
		for _, e := range m.ThumbUserInfos {
			l = e.Size()
			n += 2 + l + sovForum(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 2 + l + sovForum(uint64(l))
	}
	if m.IsRecommend {
		n += 3
	}
	if m.LimitVIP != 0 {
		n += 2 + sovForum(uint64(m.LimitVIP))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovForum(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozForum(x uint64) (n int) {
	return sovForum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ForumGetWithMediaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumGetWithMediaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumGetWithMediaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendID", wireType)
			}
			m.FriendID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumGetWithMediaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumGetWithMediaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumGetWithMediaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forums = append(m.Forums, &ForumFriend{})
			if err := m.Forums[len(m.Forums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumOtherMainByMouthReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumOtherMainByMouthReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumOtherMainByMouthReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendID", wireType)
			}
			m.FriendID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumOtherMainByMouthResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumOtherMainByMouthResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumOtherMainByMouthResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forums = append(m.Forums, &ForumFriend{})
			if err := m.Forums[len(m.Forums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherMainPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherMainPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherMainPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendID", wireType)
			}
			m.FriendID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundNum", wireType)
			}
			m.RoundNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherMainPageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherMainPageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherMainPageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forums = append(m.Forums, &ForumFriend{})
			if err := m.Forums[len(m.Forums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelfMainPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfMainPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfMainPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelfMainPageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfMainPageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfMainPageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forums = append(m.Forums, &ForumFriend{})
			if err := m.Forums[len(m.Forums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowFourmPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowFourmPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowFourmPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentLimit", wireType)
			}
			m.CommentLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbLimit", wireType)
			}
			m.ThumbLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayLimit", wireType)
			}
			m.ReplayLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowFourmPageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowFourmPageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowFourmPageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forums = append(m.Forums, &ForumFriend{})
			if err := m.Forums[len(m.Forums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecommendPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecommendPageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendPageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendPageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forums = append(m.Forums, &ForumRecommend{})
			if err := m.Forums[len(m.Forums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumUser", wireType)
			}
			m.ForumUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumUser |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Friends = append(m.Friends, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthForum
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthForum
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Friends) == 0 {
					m.Friends = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowForum
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Friends = append(m.Friends, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipatingFriendsMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipatingFriendsMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipatingFriendsMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Friends = append(m.Friends, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthForum
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthForum
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Friends) == 0 {
					m.Friends = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowForum
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Friends = append(m.Friends, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumFriendPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumFriendPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumFriendPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumFriendPageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumFriendPageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumFriendPageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forums = append(m.Forums, &ForumFriend{})
			if err := m.Forums[len(m.Forums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumTopicPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumTopicPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumTopicPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumTopicPageRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumTopicPageRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumTopicPageRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forums = append(m.Forums, &ForumTopic{})
			if err := m.Forums[len(m.Forums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumIgnore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumIgnore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumIgnore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreID", wireType)
			}
			m.IgnoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgnoreID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumRecommend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumRecommend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumRecommend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			m.ContentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentEntity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentEntity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mention", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mention = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = json.RawMessage(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUp", wireType)
			}
			m.ThumbUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbUp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medias = append(m.Medias, &Media{})
			if err := m.Medias[len(m.Medias)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entitys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entitys = append(m.Entitys, &HighLight{})
			if err := m.Entitys[len(m.Entitys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasThumb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasThumb = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasFollow = bool(v != 0)
		case 22:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ThumbUsers = append(m.ThumbUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthForum
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthForum
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ThumbUsers) == 0 {
					m.ThumbUsers = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowForum
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ThumbUsers = append(m.ThumbUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUsers", wireType)
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUserInfos = append(m.ThumbUserInfos, &imapigateway.UserInfo{})
			if err := m.ThumbUserInfos[len(m.ThumbUserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &imapigateway.UserInfo{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRecommend = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVIP", wireType)
			}
			m.LimitVIP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitVIP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			m.ContentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentEntity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentEntity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mention", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mention = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = json.RawMessage(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUp", wireType)
			}
			m.ThumbUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbUp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewState", wireType)
			}
			m.ViewState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewState |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medias = append(m.Medias, &Media{})
			if err := m.Medias[len(m.Medias)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entitys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entitys = append(m.Entitys, &HighLight{})
			if err := m.Entitys[len(m.Entitys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasThumb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasThumb = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasFollow = bool(v != 0)
		case 26:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ThumbUsers = append(m.ThumbUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthForum
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthForum
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ThumbUsers) == 0 {
					m.ThumbUsers = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowForum
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ThumbUsers = append(m.ThumbUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUsers", wireType)
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUserInfos = append(m.ThumbUserInfos, &imapigateway.UserInfo{})
			if err := m.ThumbUserInfos[len(m.ThumbUserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &imapigateway.UserInfo{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRecommend = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVIP", wireType)
			}
			m.LimitVIP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitVIP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundNum", wireType)
			}
			m.RoundNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForumTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForumTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForumTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForumID", wireType)
			}
			m.ForumID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForumID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			m.ContentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentEntity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentEntity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mention", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mention = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = json.RawMessage(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUp", wireType)
			}
			m.ThumbUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbUp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medias = append(m.Medias, &Media{})
			if err := m.Medias[len(m.Medias)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entitys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entitys = append(m.Entitys, &HighLight{})
			if err := m.Entitys[len(m.Entitys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasThumb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasThumb = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasFollow = bool(v != 0)
		case 23:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ThumbUsers = append(m.ThumbUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowForum
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthForum
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthForum
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ThumbUsers) == 0 {
					m.ThumbUsers = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowForum
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ThumbUsers = append(m.ThumbUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUsers", wireType)
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUserInfos = append(m.ThumbUserInfos, &imapigateway.UserInfo{})
			if err := m.ThumbUserInfos[len(m.ThumbUserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &imapigateway.UserInfo{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRecommend = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVIP", wireType)
			}
			m.LimitVIP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitVIP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipForum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowForum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthForum
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupForum
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthForum
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthForum        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowForum          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupForum = fmt.Errorf("proto: unexpected end of group")
)
